npm init -- 노드 프로젝트를 만들겠다. 
         -- 노드는 자바스크립트 실행기이다. 
         -- package.json 이 생성됨 

npm i react react-dom next --react, reactdom, next 설치
                           --next는 react위에서 돌아가는 프레임워크이다.
                           --seo, 서버사이드 렌더링, 코드 스플릿 


npm i -D nodemon webpack

npm i -D eslint -- 코딩 스타일 통일 되게 하기 위해 사용하는 패키지
                -- .eslintrc 파일 만들기 
                --  npm i eslint-plugin-import 
                    npm i eslint-plugin-react  
                    npm i eslint-plugin-react-hooks



npm i -g next -- next 글로벌 설치 
              -- 처음에 next 설치 했는데 왜 또 next 를 글로벌로 설치했을까? 
              
npm i prop-types




next에서 제공하는 특수한 파일들 -------------------------------------------------
pages
    실제 컴포넌트들 

_document.js
    html, head, body 
    
_app.js
    root 

_error.js  

_가 붙은 파일들은 next 내부에 이미 존재하지만 
이렇게 새롭게 만들면 우리가 만든게 덮어씌워져서 커스터 마이징이 가능하다. 

-------------------------------------------------------------------------------



redux , redux-saga-------------------------------------------------------------

리덕스의 state를 사용하면 리엑트의 state를 사용하지 않아도 된다.
    (리엑트랑 리덕스는 별개이다.)
    (둘다 공용으로 사용한다.)
    (코드량이 많지만 예상치 못한 동작이 생길 일은 없다.)
    (복잡한 state는 리덕스를 사용 -> 안정성, 중앙통제 용이)


01.
Action -> state를 바꾸는 행동, 

02.
Dispatch -> Action을 실행 
            Reducer -> Action의 결과로 state를 어떻게 바꿀지 정의함(switch case로)

03. 
실제로 리덕스 state 변경 


----사용순서---- 
    01.
    npm i redux react-redux

    02.
    pages/reducers 폴더 생성 

    03.reducer 생성 후 react랑 redux랑 연결해주는 작업이 필요하다. 
        ->pages/_app.js로 간다.
        ->react에 redux 붙이는거랑 next에 redux 붙이는게 다르므로 npm i next-redux-wrapper 를 설치 해야한다.


----리덕스 사가----  
    01.
    리덕스는 동기적으로 밖에 일어나지 않으므로 
    리덕스 사가를 써준다. 

    02.
    즉, 바로바로 실행되기 때문에, 특정 시간, 또는 특정 동작 이후에
    액션을 실행시킬 수 없다. 
    
    03.
    이러한 비동기 요청을 리덕스에서 사용하기 위해 리덕스 사가를 사용하는 것이다. 

    Redux에서 비동기 처리를 사용하기 위해 미들웨어란 것이 필요합니다.
    예를들어 어떤 action을 dispatch하게 되면 reducer들은 순수 객체를 기대합니다.
    그런데 미들웨어 없이! 비동기처리 액션을 reducer에게 전달하게 되면 reducer들은 객체를 받지 못하거나 혹은 순수 객체를 받지 못하게 됩니다. 그러면 오류를 뿜어댈것입니다.
    그래서 액션을 리듀서에게 전달하기 전에 중간에서 어떤 처리를 하기위해서 미들웨어를 사용하는데 saga는 reducer에게 액션을 전달하기 전에 그것을 캐치해서 순수객체로 만들어주는 과정을 처리해준후 reducer에게 전달해줍니다.
    Saga를 비동기처리로 사용하는 목적에 따라서 사용할수도 있고 안할수도 있는것입니다.
    모든명령이 비동기처리는 아닙니다.

    npm i redux-saga

    _app.js에  saga 미들웨어를 추가해 줘야 한다. 

-------------------------------------------------------------------------------

