{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/PostCard.js","webpack:///./components/PostForm.js","webpack:///./pages/index.js","webpack:///./reducers/post.js","webpack:///./reducers/user.js","webpack:///external \"@ant-design/icons\"","webpack:///external \"antd\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-redux\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","\r\nimport React,{useState,useCallback,useEffect}  from 'react'\r\nimport {Card , Button, Avatar,Form, Input, List, Comment}from 'antd'\r\nimport {RetweetOutlined ,\r\n        HeartOutlined ,\r\n        MessageOutlined,\r\n        EllipsisOutlined \r\n} from '@ant-design/icons';\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {useDispatch ,useSelector} from 'react-redux'\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({post}) =>{\r\n    \r\n    const [commentFormOpend,setCommentFormOpend] = useState(false); \r\n    const [commentText, setCommentText] = useState(''); \r\n    const { me } = useSelector(state=> state.user); \r\n    const {commentAdded, isAddingComment}  = useSelector(state=>state.post); \r\n    const dispatch = useDispatch(); \r\n\r\n    const onToggleComment = useCallback(() =>{\r\n        setCommentFormOpend(preve => !preve); \r\n    },[]);\r\n\r\n    const onSubmitComment =useCallback((e)=>{\r\n        \r\n        if(!me){\r\n            return alert('로그인이 필요합니다.'); \r\n        }\r\n        \r\n        return dispatch({type:ADD_COMMENT_REQUEST,\r\n                         data:{\r\n                            postId:post.id,\r\n                         }\r\n        })\r\n\r\n    },[me && me.id]); \r\n\r\n        //댓글을 쓰고 새로 load해야 할 터이니...\r\n        useEffect(()=>{\r\n            setCommentText('');\r\n        },[commentAdded ===true]); \r\n\r\n    const onChangeCommentText = useCallback((e)=>{\r\n        setCommentText(e.target.value); \r\n    },[]); \r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <Card\r\n            key={+post.createdAt}\r\n            cover={post.img && <img alt=\"example\" src={post.img} style={{width:'100px'}}/>}\r\n            actions={[\r\n                <RetweetOutlined />,\r\n                <HeartOutlined />,\r\n                <MessageOutlined  onClick={onToggleComment} />,\r\n                <EllipsisOutlined />,\r\n            ]}\r\n            extra={<Button>팔로우</Button>}\r\n             >\r\n            <Card.Meta \r\n                avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title={post.User.nickname}\r\n                description={post.content}\r\n            />\r\n        </Card>\r\n        {commentFormOpend && (\r\n            <>\r\n            <Form onFinish={onSubmitComment}>\r\n                <Form.Item>\r\n                    <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText}/>\r\n                </Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n            </Form>\r\n            <List \r\n                 header={`${post.Comments? post.Comments.length : 0 } 댓글${post.id}`}\r\n                 itemLayout=\"horizontal\"\r\n                 dataSource={post.Comments || []}\r\n                 renderItem={item=>(\r\n                     <li>\r\n                      <Comment \r\n                        author={item.User.nickname}\r\n                        avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                        content={item.content}\r\n                      />\r\n                      </li>\r\n                 )}\r\n            />\r\n            </>\r\n\r\n        )}\r\n        </div>\r\n    )\r\n     \r\n}\r\n\r\nPostCard.propTypes = {\r\n                    //shape을 써서 객체의 각 props의 상세 타입을 지정할 수 있다.\r\n    post : PropTypes.shape({\r\n            User: PropTypes.object,\r\n            content : PropTypes.string,\r\n            img:PropTypes.string,\r\n            createdAt:PropTypes.object\r\n    })\r\n}\r\n\r\nexport default PostCard; ","import React,{useEffect, useCallback, useState} from 'react'\r\nimport {Form, Button,Input}from 'antd'\r\n\r\nimport {useDispatch ,useSelector} from 'react-redux'\r\nimport { ADD_POST_REQUEST } from '../reducers/post';\r\n\r\n\r\n\r\nconst PostForm = () =>{\r\n\r\n    const dispatch=useDispatch();\r\n    const [text,setText] = useState(''); \r\n    const {imagePaths, isAddingPost, postAdded} = useSelector(state=>state.post);\r\n    useEffect(()=>{\r\n        setText(''); \r\n    },[postAdded === true])\r\n\r\n    const onSubmitForm = useCallback((e)=>{\r\n        //e.preventDefault(); \r\n\r\n        dispatch({\r\n                type:ADD_POST_REQUEST,\r\n                data: {\r\n                  text,\r\n                    },\r\n            });\r\n\r\n    },[])\r\n    \r\n\r\n\r\n    const onChangeText =useCallback( (e)=>{\r\n        setText(e.target.value); \r\n    },[]); \r\n\r\n    return(\r\n            \r\n                <Form style={{margin:'10px 0 20px'}} encType=\"multipart/form-data\" onFinish={onSubmitForm}>               \r\n                        \r\n                        <Input.TextArea maxLength={140} placeholder=\"어떤일이 있었나요?\" value={text} onChange={onChangeText} />\r\n                        <div>\r\n                            <input type=\"file\" multiple hidden />\r\n                            <Button>이미지 업로드</Button>\r\n                            <Button type=\"primary\" style={{float:'right'}} htmlType=\"submit\" loading={isAddingPost}>짹짹</Button>\r\n                        </div>\r\n                        <div>\r\n                        {imagePaths.map((v,i)=>{\r\n                            return (\r\n\r\n                                <div key={i} style={{display:'inline-block'}}>\r\n                                <img src={v} style={{width:'200px' }} alt={v} />\r\n                                <div>\r\n                                    <Button>제거</Button>\r\n                                </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                        </div>\r\n                </Form>\r\n            )\r\n}\r\nexport default PostForm; ","\r\nimport React, {useEffect} from 'react'; \r\nimport PostForm from '../components/PostForm'\r\nimport PostCard from '../components/PostCard'\r\nimport {useDispatch ,useSelector} from 'react-redux'\r\nimport { LOG_IN_REQUEST, loginAction, LOG_IN_SUCCESS } from '../reducers/user';\r\n\r\n\r\n\r\n\r\nconst Home = ()=>{\r\n\r\n    const dispatch = useDispatch(); \r\n                                //dispatch() 는 useState 의 setState라고 생각하면 편하다.\r\n\r\n    const {user,isLoggedIn} = useSelector(state => state.user);\r\n                                //리덕스 STATE를 가져오기 위해서는 userSelector \r\n    const {mainPosts} =useSelector(state => state.post); \r\n  \r\n    useEffect(()=>{\r\n     //   dispatch(loginAction);\r\n     dispatch({\r\n         type:'HELLO_SAGA', \r\n     })\r\n     dispatch({\r\n        type:'HELLO_SAGA', \r\n    })\r\n    dispatch({\r\n        type:'HELLO_SAGA', \r\n    })\r\n\r\n    },[])\r\n\r\n    return (\r\n      \r\n            <div>\r\n            {user ? <div>로그인됨</div> : <div>로그인 안됨</div>}\r\n                {isLoggedIn && <PostForm />}\r\n                {mainPosts.map((v,i)=>{\r\n                    return (\r\n                            <PostCard key={v.User.id} post={v} />\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\nexport default Home;","import { ConsoleSqlOutlined } from \"@ant-design/icons\";\r\n\r\nexport const initialState = {\r\n\r\n    mainPosts : [  {\r\n                    id:1,\r\n                    User : {\r\n                            id:1,\r\n                            nickname:'정준일',\r\n                        \r\n                        }, \r\n                        img:'http://zzalbang.kr/wp-content/uploads/2019/06/944afa44ly1g3bon5dh4kj20u0140gvl-851x1024.jpg',\r\n                        content:'요즘 핫한 배우', \r\n                        Comments:[],\r\n\r\n                    },\r\n\r\n                    {\r\n                    id:2,    \r\n                    User : {\r\n                        id:2,\r\n                        nickname:'정준이',\r\n                        \r\n                    }, \r\n                    \r\n                    img:'https://i.pinimg.com/236x/94/c7/82/94c7822c6c5c33cd442c3b8d4fe524c6.jpg',\r\n                    content:'김근식 군 추천배우', \r\n                    Comments:[],\r\n\r\n                    },\r\n                    {\r\n                    id:3,\r\n                    User : {\r\n                        id:3,\r\n                        nickname:'정준삼',\r\n                        \r\n                    }, \r\n                    img:'https://img.extmovie.com/files/attach/images/197/785/981/025/882889a567914626e514406aa0759382.png',\r\n                    content:'아스카짱!', \r\n                    Comments:[],\r\n\r\n                    }\r\n                ],  //화면에 보일 POST들 \r\n\r\n\r\n     imagePaths : [], //미리보기 이미지 경로 \r\n     addPostErrorReason : false, // POST 업로드 실패 사유 \r\n     isAddingPost : false, //post업로드중 \r\n     postAdded : false, \r\n     isAddingComment: false,\r\n     addCommentErrorReason:'',\r\n     commentAdded: false,\r\n\r\n\r\n};\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST'; \r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS'; \r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE'; \r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST'; \r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS'; \r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE'; \r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST'; \r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS'; \r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; \r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE'; \r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST'; \r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS'; \r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE'; \r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST'; \r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS'; \r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE'; \r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST'; \r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS'; \r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; \r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST ='RETWEET_REQUEST'; \r\nexport const RETWEET_SUCCESS ='RETWEET_SUCCESS'; \r\nexport const RETWEET_FAILURE ='RETWEET_FAILURE'; \r\n\r\nexport const REMOVE_POST_REQUEST='REMOVE_POST_REQUEST'; \r\nexport const REMOVE_POST_SUCCESS='REMOVE_POST_SUCCESS'; \r\nexport const REMOVE_POST_FAILURE='REMOVE_POST_FAILURE'; \r\n\r\n\r\nconst dummyPost = {\r\n    id:4,\r\n    User: {\r\n        id:1,\r\n        nickname:'주닐정', \r\n\r\n    }, \r\n    content:'나는 더미 입니다.', \r\n    Comments:[], \r\n}\r\n\r\nconst dummyComment = {\r\n                        id:1,\r\n                        User: {\r\n                            id:1,\r\n                            nickname:'주닐정',\r\n\r\n                        }, \r\n                        createdAt: new Date(),\r\n                        content : '더미 댓글 입니다...',\r\n\r\n}\r\n\r\n//const ADD_DUMMY = 'ADD_DUMMY'; \r\n\r\n\r\nconst addPost = {\r\n\r\n    type:ADD_POST_REQUEST,\r\n\r\n}\r\n\r\n// const addDummy ={\r\n//     type:ADD_DUMMY, \r\n//     data : {\r\n//         content : 'Hello', \r\n//         UserId : 1, \r\n//         User : {\r\n//             nickname:'정준일', \r\n//         },\r\n//     },\r\n// }\r\n\r\n\r\nconst reducer = (state = initialState , action) =>{\r\n\r\n    switch(action.type){\r\n        case ADD_POST_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isAddingPost:true, \r\n                addPostErrorReason:'', \r\n                postAdded: false, \r\n            }\r\n        }\r\n\r\n        case ADD_POST_SUCCESS : {\r\n            console.log('action.data ==>' , action);\r\n            return {\r\n                ...state,\r\n                isAddingPost:false,\r\n                mainPosts:[dummyPost, ...state.mainPosts],\r\n                postAdded:true, \r\n            }\r\n        }\r\n        case ADD_POST_FAILURE : {\r\n            return {\r\n                ...state,\r\n                addPostErrorReason :action.error,\r\n            }\r\n        }\r\n\r\n //---------댓글 달기 액션    \r\n\r\n        case ADD_COMMENT_REQUEST : {\r\n            console.log('ADD_COMMENT_REQUEST==>' , ADD_COMMENT_REQUEST); \r\n            return {\r\n                ...state,\r\n                isAddingComment : true,\r\n                addCommentErrorReason:'',\r\n                commentAdded: false, \r\n\r\n            }\r\n        }\r\n\r\n        case ADD_COMMENT_SUCCESS : {\r\n            const postIndex = state.mainPosts.findIndex(v=>v.id===action.data.postId); \r\n            const post = state.mainPosts[postIndex]; \r\n            const Comments = [...post.Comments,dummyComment]; \r\n            const mainPosts = [...state.mainPosts]; \r\n            mainPosts[postIndex] = {...post,Comments}; \r\n\r\n            return {\r\n                ...state,\r\n                isAddingComment : false, \r\n                mainPosts,\r\n                commentAdded: true, \r\n\r\n            }\r\n        }\r\n        case ADD_COMMENT_FAILURE : {\r\n            return {\r\n                ...state,\r\n                isAddingComment:false, \r\n                addCommentErrorReason:action.error,\r\n\r\n            }\r\n        }\r\n//---------댓글 달기 액션\r\n        \r\n        default : {\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default reducer; ","//user의 store \r\n\r\n//초기 state\r\nconst dummyUser = {\r\n    nickname:'정준일일', \r\n    Post:['정','준'],\r\n    Followings:['정','준'],\r\n    Followers:['정','준'],\r\n    signUpData:{},\r\n    id:1,\r\n    \r\n}\r\nexport const initialState = {\r\n\r\n    isLoggedIn : false,    //로그인 여부 \r\n    isLoggingOut : false, //로그아웃 시도중, \r\n    isLoggingIn  : false, //로그인 시도중\r\n    logInErrorReason: '' , //로그인 에러 사유\r\n    signedUp : '',//회원가입 성공 \r\n    isSigningUp : false,  //회원가입 시도중\r\n    signUpErrorReason : '', //회원가입 실패 사유 \r\n    me: null,   //내 정보 \r\n    follwingList: [], \r\n    followerList: [], \r\n    userInfo : null, //남의 정보 \r\n    successMesage: '', \r\n    isLoading: true, \r\n    isSignedUp : false, //회원가입 성공여부 \r\n};\r\n\r\nexport const SIGN_UP_REQUEST ='SIGN_UP_REQUEST'; \r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS'; \r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; \r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; \r\nexport const LOG_IN_SUCCESS = 'LOGIN_SUCCESS'; \r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; \r\n\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST'; \r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS'; \r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; \r\n\r\nexport const LOAD_FOLLOW_REQUEST='LOAD_FOLLOW_REQUEST'; \r\nexport const LOAD_FOLLOW_SUCCESS='LOAD_FOLLOW_SUCCESS'; \r\nexport const LOAD_FOLLOW_FAILURE='LOAD_FOLLOW_FAILURE'; \r\n\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'\r\n\r\nconst reducer = (state = initialState , action)=>{\r\n\r\n    switch(action.type){\r\n        \r\n        case LOG_IN_REQUEST:{\r\n            return {\r\n                ...state,\r\n                isLoggingIn:true,\r\n               logInErrorReason:'',\r\n            };\r\n        }\r\n        \r\n        case LOG_IN_SUCCESS:{\r\n            return {\r\n                ...state,\r\n                isLoggingIn:false,\r\n                isLoggedIn:true,\r\n                me:action.data,\r\n                isLoading:false,\r\n                successMesage :'로그인에 성공하였습니다.', \r\n            }\r\n        }\r\n        case LOG_IN_FAILURE: {\r\n            return{\r\n                ...state,\r\n                isLoggingIn:false,\r\n                isLoggedIn: false, \r\n                logInErrorReason:action.error,\r\n                me:null,\r\n            }    \r\n        }\r\n\r\n        case LOG_OUT_REQUEST:{\r\n            return {\r\n                ...state,\r\n                isLoggedIn:false,\r\n                me:null,\r\n            }\r\n        }\r\n        case SIGN_UP_REQUEST:{\r\n            return{\r\n                ...state,\r\n                isSigningUp:true,\r\n                isSignedUp:false,\r\n                signUpErrorReason:'', \r\n            }\r\n        }\r\n\r\n        case SIGN_UP_SUCCESS:{\r\n            return{\r\n                ...state,\r\n                isSigningUp:false,\r\n                isSignedUp: true,\r\n            }\r\n        }\r\n        case SIGN_UP_FAILURE:{\r\n            return{\r\n                ...state,\r\n                isSigningUp:false,\r\n                signUpErrorReason: action.error,\r\n            }\r\n        }\r\n\r\n\r\n\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default reducer; ","module.exports = require(\"@ant-design/icons\");","module.exports = require(\"antd\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-redux\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AADA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAUA;;;;;;;;;;;;;;;;;;;;;;AC7GA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AADA;AAFA;AAOA;AAIA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AATA;AAcA;AACA;AACA;AACA;AAFA;AAMA;AACA;AACA;AAVA;AAcA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AATA;AAYA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAjDA;AAsDA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AARA;AACA;AAcA;AAEA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AACA;AAGA;AApEA;AAyEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAGA;AAAA;AACA;AAGA;AAnEA;AAwEA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;AC9IA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}