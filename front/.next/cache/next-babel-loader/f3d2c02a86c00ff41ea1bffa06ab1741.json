{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay, takeEvery, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'; //call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\n//fort : 함수 비동기적 호출  \n//---------------------------둘 다 함수를 실행시켜준다.\n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n\nexport const HELLO_SAGA = 'HELLO_SAGA';\n\nfunction* loginAPI() {//서버에 요청하는 부분 \n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  console.log('watchLogin');\n  yield take(LOG_IN); //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \n  // dispatch될 때 login 제너레이터를 호출한다. \n\n  yield put({\n    type: LOG_IN_SUCCESS\n  });\n}\n\nfunction* hello() {\n  yield delay(1000);\n  yield put({\n    type: 'Bye Saga'\n  });\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, hello);\n} //이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \n// function* watchHello(){\n//     console.log('before saga'); \n//     while(true){\n//         yield take(HELLO_SAGA); \n//         console.log('hello saga'); \n//     }\n// }\n\n\nexport default function* userSaga() {\n  yield all([fork(watchHello), fork(watchLogin)]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","delay","takeEvery","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","login","type","e","console","error","watchLogin","log","hello","watchHello","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,KAA1C,EAAgDC,SAAhD,EAA0DC,IAA1D,QAAqE,oBAArE;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD,C,CAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAG,YAAnB;;AAEP,UAAUC,QAAV,GAAoB,CACpB;AAEC;;AAED,UAAUC,KAAV,GAAiB;AAEb,MAAG;AAEC,UAAMV,IAAI,CAACS,QAAD,CAAV;AACA,UAAMR,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMM,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMX,GAAG,CAAC;AACNU,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT;AAGH;AAEJ;;AAED,UAAUQ,UAAV,GAAsB;AAClBF,EAAAA,OAAO,CAACG,GAAR,CAAY,YAAZ;AACA,QAAMZ,IAAI,CAACC,MAAD,CAAV,CAFkB,CAGZ;AACA;;AAEN,QAAMJ,GAAG,CAAC;AACNU,IAAAA,IAAI,EAACL;AADC,GAAD,CAAT;AAGH;;AAED,UAAUW,KAAV,GAAiB;AAEb,QAAMf,KAAK,CAAC,IAAD,CAAX;AACA,QAAMD,GAAG,CAAC;AACNU,IAAAA,IAAI,EAAC;AADC,GAAD,CAAT;AAGH;;AAID,UAAUO,UAAV,GAAsB;AACjB,QAAMnB,UAAU,CAACS,UAAD,EAAaS,KAAb,CAAhB;AACJ,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAIA,eAAe,UAAUE,QAAV,GAAqB;AAEhC,QAAMtB,GAAG,CAAC,CACNC,IAAI,CAACoB,UAAD,CADE,EAENpB,IAAI,CAACiB,UAAD,CAFE,CAAD,CAAT;AAKH","sourcesContent":["import {all ,fork, takeLatest, call, put, delay,takeEvery,take }from 'redux-saga/effects'; \r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\n//call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\r\n//fort : 함수 비동기적 호출  \r\n//---------------------------둘 다 함수를 실행시켜준다.\r\n\r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\nfunction* loginAPI(){\r\n//서버에 요청하는 부분 \r\n\r\n}\r\n\r\nfunction* login(){\r\n\r\n    try{\r\n        \r\n        yield call(loginAPI);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogin(){\r\n    console.log('watchLogin'); \r\n    yield take(LOG_IN);\r\n          //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \r\n          // dispatch될 때 login 제너레이터를 호출한다. \r\n\r\n    yield put({\r\n        type:LOG_IN_SUCCESS,\r\n    });\r\n}\r\n\r\nfunction* hello(){\r\n\r\n    yield delay(1000); \r\n    yield put({\r\n        type:'Bye Saga'\r\n    })\r\n}\r\n\r\n\r\n\r\nfunction* watchHello(){\r\n     yield takeLatest(HELLO_SAGA, hello); \r\n}\r\n//이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \r\n// function* watchHello(){\r\n//     console.log('before saga'); \r\n//     while(true){\r\n//         yield take(HELLO_SAGA); \r\n//         console.log('hello saga'); \r\n//     }\r\n\r\n// }\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        fork(watchHello),\r\n        fork(watchLogin), \r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}