{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \n//axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  console.log('postData===>', postData);\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    console.log('posts==>', result.data);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (e) {\n    console.error('ADD_POST_FAILURE==>', e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction loadCommentstAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentstAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction upLoadImagesAPI(formData) {\n  return axios.post('/post/images', formData, {\n    withCredentials: true\n  });\n}\n\nfunction* upLoadImages(action) {\n  try {\n    const result = yield call(upLoadImagesAPI, action.data);\n    console.log('upLoadImages result ===>', result);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data //이미지가 저장된 주소를 가져온다. \n\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  console.log('post saga likePost==>', action);\n\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction unLikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unLikePost(action) {\n  try {\n    const result = yield call(unLikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction reTweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* reTweet(action) {\n  try {\n    const result = yield call(reTweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    alert(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* whatchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction* whatchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, upLoadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unLikePost);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, reTweet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(whatchAddPost), fork(whatchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnLikePost), fork(watchRetweet)]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_REQUEST","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","addPostAPI","postData","console","log","post","withCredentials","loadMainPostsAPI","get","loadMainPosts","action","result","data","type","e","error","loadHashtagPostsAPI","tag","loadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","addPost","addCommentAPI","postId","content","addComment","comment","loadCommentstAPI","loadComments","comments","upLoadImagesAPI","formData","upLoadImages","likePostAPI","likePost","userId","unLikePostAPI","delete","unLikePost","reTweetAPI","reTweet","alert","whatchAddPost","watchLoadMainPosts","whatchAddComment","watchLoadHashtagPosts","watchLoadUserPosts","watchLoadComments","watchUploadImages","watchLikePost","watchUnLikePost","watchRetweet","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,IAAZ,EAAiBC,UAAjB,EAA6BC,GAA7B,EAAkCC,KAAlC,EAAwCC,IAAxC,QAAmD,oBAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAA2B;AACA;;AAE3B,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EAA+DC,mBAA/D,EAAoFC,mBAApF,EAAyGC,mBAAzG,EAA8HC,uBAA9H,EAAuJC,uBAAvJ,EAAgLC,uBAAhL,EAAyMC,0BAAzM,EAAqOC,0BAArO,EAAiQC,0BAAjQ,EAA6RC,uBAA7R,EAAsTC,uBAAtT,EAA+UC,uBAA/U,EAAwWC,qBAAxW,EAA+XC,qBAA/X,EAAsZC,qBAAtZ,EAA6aC,qBAA7a,EAAocC,qBAApc,EAA2dC,qBAA3d,EAAkfC,iBAAlf,EAAqgBC,mBAArgB,EAA0hBC,iBAA1hB,EAA6iBC,iBAA7iB,EAAgkBC,mBAAhkB,EAAqlBC,mBAArlB,EAA0mBC,eAA1mB,EAA2nBC,eAA3nB,EAA4oBC,eAA5oB,QAAmqB,kBAAnqB;AACA,SAASC,cAAT,QAA8B,kBAA9B;;AAGA,SAASC,UAAT,CAAoBC,QAApB,EAA6B;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA6BF,QAA7B;AACA,SAAOjC,KAAK,CAACoC,IAAN,CAAW,OAAX,EAAmBH,QAAnB,EAA4B;AAACI,IAAAA,eAAe,EAAC;AAAjB,GAA5B,CAAP;AACH;;AAED,SAASC,gBAAT,GAA2B;AAEvB,SAAOtC,KAAK,CAACuC,GAAN,CAAU,QAAV,CAAP;AACH;;AAGD,UAAUC,aAAV,CAAwBC,MAAxB,EAA+B;AAE3B,MAAG;AACI,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACuC,gBAAD,CAAzB;AACCJ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBO,MAAM,CAACC,IAA9B;AACA,UAAM9C,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAACpC,uBADC;AAENmC,MAAAA,IAAI,EAACD,MAAM,CAACC;AAFN,KAAD,CAAT;AAMP,GATD,CASC,OAAME,CAAN,EAAQ;AACLX,IAAAA,OAAO,CAACY,KAAR,CAAcD,CAAd;AACA,UAAMhD,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAACnC,uBADC;AAENqC,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAKH;AAGJ;;AAGD,SAASE,mBAAT,CAA6BC,GAA7B,EAAiC;AAE7B,SAAOhD,KAAK,CAACuC,GAAN,CAAW,YAAWS,GAAI,EAA1B,CAAP;AACH;;AAGD,UAAUC,gBAAV,CAA2BR,MAA3B,EAAkC;AAE9B,MAAG;AACI,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACgD,mBAAD,EAAqBN,MAAM,CAACE,IAA5B,CAAzB;AACA,UAAM9C,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAAClC,0BADC;AAENiC,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAMN,GARD,CAQC,OAAME,CAAN,EAAQ;AACLX,IAAAA,OAAO,CAACY,KAAR,CAAcD,CAAd;AACA,UAAMhD,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAACjC,0BADC;AAENmC,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAKH;AAGJ;;AAGD,SAASK,gBAAT,CAA0BC,EAA1B,EAA6B;AAEzB,SAAOnD,KAAK,CAACuC,GAAN,CAAW,SAAQY,EAAG,QAAtB,CAAP;AACH;;AAGD,UAAUC,aAAV,CAAwBX,MAAxB,EAA+B;AAE3B,MAAG;AACI,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACmD,gBAAD,EAAkBT,MAAM,CAACE,IAAzB,CAAzB;AACA,UAAM9C,GAAG,CAAC;AACT+C,MAAAA,IAAI,EAAE9B,uBADG;AAET6B,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFJ,KAAD,CAAT;AAON,GATD,CASC,OAAME,CAAN,EAAQ;AACLX,IAAAA,OAAO,CAACY,KAAR,CAAcD,CAAd;AACA,UAAMhD,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAAC/B,uBADC;AAENiC,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAKH;AAGJ;;AAID,UAAUQ,OAAV,CAAkBZ,MAAlB,EAAyB;AAErB,MAAG;AACK,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACiC,UAAD,EAAYS,MAAM,CAACE,IAAnB,CAAzB;AAEA,UAAM9C,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAAC1C,gBADC;AAENyC,MAAAA,IAAI,EAACD,MAAM,CAACC;AAFN,KAAD,CAAT;AAOA,UAAM9C,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAAEb,cADA;AAENY,MAAAA,IAAI,EAAGD,MAAM,CAACC,IAAP,CAAYQ;AAFb,KAAD,CAAT;AAKP,GAfD,CAeC,OAAMN,CAAN,EAAQ;AACLX,IAAAA,OAAO,CAACY,KAAR,CAAc,qBAAd,EAAqCD,CAArC;AACA,UAAMhD,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAACzC,gBADC;AAEN2C,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAKH;AAGJ;;AAGD,SAASS,aAAT,CAAuBX,IAAvB,EAA6B;AACzB,SAAO3C,KAAK,CAACoC,IAAN,CAAY,SAAQO,IAAI,CAACY,MAAO,UAAhC,EAA2C;AAAEC,IAAAA,OAAO,EAAEb,IAAI,CAACa;AAAhB,GAA3C,EAAsE;AAC3EnB,IAAAA,eAAe,EAAE;AAD0D,GAAtE,CAAP;AAGD;;AAED,UAAUoB,UAAV,CAAqBhB,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACuD,aAAD,EAAgBb,MAAM,CAACE,IAAvB,CAAzB;AACA,UAAM9C,GAAG,CAAC;AACR+C,MAAAA,IAAI,EAAEvC,mBADE;AAERsC,MAAAA,IAAI,EAAE;AACJY,QAAAA,MAAM,EAAEd,MAAM,CAACE,IAAP,CAAYY,MADhB;AAEJG,QAAAA,OAAO,EAAEhB,MAAM,CAACC;AAFZ;AAFE,KAAD,CAAT;AAOD,GATD,CASE,OAAOE,CAAP,EAAU;AAEVX,IAAAA,OAAO,CAACY,KAAR,CAAcD,CAAd;AACA,UAAMhD,GAAG,CAAC;AACR+C,MAAAA,IAAI,EAAEtC,mBADE;AAERwC,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AAIH,SAASc,gBAAT,CAA0BJ,MAA1B,EAAiC;AAE7B,SAAOvD,KAAK,CAACuC,GAAN,CAAW,SAAQgB,MAAO,WAA1B,CAAP;AACH;;AAED,UAAUK,YAAV,CAAuBnB,MAAvB,EAA8B;AAE1B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAAC4D,gBAAD,EAAkBlB,MAAM,CAACE,IAAzB,CAAzB;AACA,UAAM9C,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAAC3B,qBADC;AAEN0B,MAAAA,IAAI,EAAC;AACDY,QAAAA,MAAM,EAACd,MAAM,CAACE,IADb;AAEDkB,QAAAA,QAAQ,EAACnB,MAAM,CAACC;AAFf;AAFC,KAAD,CAAT;AAQP,GAVG,CAUH,OAAME,CAAN,EAAQ;AACLX,IAAAA,OAAO,CAACC,GAAR,CAAYU,CAAZ;AACA,UAAMhD,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAAC1B,qBADC;AAEN4B,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAKH;AAGA;;AAID,SAASiB,eAAT,CAAyBC,QAAzB,EAAkC;AAC9B,SAAO/D,KAAK,CAACoC,IAAN,CAAW,cAAX,EAA0B2B,QAA1B,EAAmC;AAAC1B,IAAAA,eAAe,EAAC;AAAjB,GAAnC,CAAP;AACH;;AAED,UAAU2B,YAAV,CAAuBvB,MAAvB,EAA8B;AAE1B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAAC+D,eAAD,EAAiBrB,MAAM,CAACE,IAAxB,CAAzB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAyCO,MAAzC;AACA,UAAM7C,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAACxB,qBADC;AAENuB,MAAAA,IAAI,EAAED,MAAM,CAACC,IAFP,CAEc;;AAFd,KAAD,CAAT;AAKP,GARG,CAQH,OAAME,CAAN,EAAQ;AACLX,IAAAA,OAAO,CAACC,GAAR,CAAYU,CAAZ;AACA,UAAMhD,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAACvB,qBADC;AAENyB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAKH;AAEA;;AAGD,SAASoB,WAAT,CAAqBV,MAArB,EAA4B;AACxB,SAAOvD,KAAK,CAACoC,IAAN,CAAY,SAAQmB,MAAO,OAA3B,EAAkC,EAAlC,EAAqC;AAAClB,IAAAA,eAAe,EAAC;AAAjB,GAArC,CAAP;AACH;;AAED,UAAU6B,QAAV,CAAmBzB,MAAnB,EAA0B;AAClBP,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAsCM,MAAtC;;AACJ,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACkE,WAAD,EAAaxB,MAAM,CAACE,IAApB,CAAzB;AACA,UAAM9C,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAACpB,iBADC;AAENmB,MAAAA,IAAI,EAAE;AACFY,QAAAA,MAAM,EAAEd,MAAM,CAACE,IADb;AAEFwB,QAAAA,MAAM,EAAEzB,MAAM,CAACC,IAAP,CAAYwB;AAFlB;AAFA,KAAD,CAAT;AAQP,GAVG,CAUH,OAAMtB,CAAN,EAAQ;AACLX,IAAAA,OAAO,CAACC,GAAR,CAAYU,CAAZ;AACA,UAAMhD,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAACnB,iBADC;AAENqB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAKH;AAEA;;AAMD,SAASuB,aAAT,CAAuBb,MAAvB,EAA8B;AAC1B,SAAOvD,KAAK,CAACqE,MAAN,CAAc,SAAQd,MAAO,OAA7B,EAAoC;AAAClB,IAAAA,eAAe,EAAC;AAAjB,GAApC,CAAP;AACH;;AAED,UAAUiC,UAAV,CAAqB7B,MAArB,EAA4B;AACxB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACqE,aAAD,EAAe3B,MAAM,CAACE,IAAtB,CAAzB;AACA,UAAM9C,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAAClB,mBADC;AAENiB,MAAAA,IAAI,EAAE;AACFY,QAAAA,MAAM,EAAEd,MAAM,CAACE,IADb;AAEFwB,QAAAA,MAAM,EAAEzB,MAAM,CAACC,IAAP,CAAYwB;AAFlB;AAFA,KAAD,CAAT;AAQP,GAVG,CAUH,OAAMtB,CAAN,EAAQ;AACLX,IAAAA,OAAO,CAACC,GAAR,CAAYU,CAAZ;AACA,UAAMhD,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAACjB,mBADC;AAENmB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAKH;AAEA;;AAQD,SAAS0B,UAAT,CAAoBhB,MAApB,EAA2B;AACvB,SAAOvD,KAAK,CAACoC,IAAN,CAAY,SAAQmB,MAAO,UAA3B,EAAqC,EAArC,EAAwC;AAAClB,IAAAA,eAAe,EAAC;AAAjB,GAAxC,CAAP;AACH;;AAED,UAAUmC,OAAV,CAAkB/B,MAAlB,EAAyB;AACrB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACwE,UAAD,EAAY9B,MAAM,CAACE,IAAnB,CAAzB;AACA,UAAM9C,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAACf,eADC;AAENc,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAKP,GAPG,CAOH,OAAME,CAAN,EAAQ;AACLX,IAAAA,OAAO,CAACC,GAAR,CAAYU,CAAZ;AACD4B,IAAAA,KAAK,CAAC5B,CAAD,CAAL;AACC,UAAMhD,GAAG,CAAC;AACN+C,MAAAA,IAAI,EAACd,eADC;AAENgB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAKH;AAEA;;AAQD,UAAU6B,aAAV,GAAyB;AACrB,QAAM9E,UAAU,CAACK,gBAAD,EAAkBoD,OAAlB,CAAhB;AAEH;;AAED,UAAUsB,kBAAV,GAA8B;AAC1B,QAAM/E,UAAU,CAACW,uBAAD,EAAyBiC,aAAzB,CAAhB;AACH;;AAGD,UAAUoC,gBAAV,GAA4B;AACxB,QAAMhF,UAAU,CAACQ,mBAAD,EAAsBqD,UAAtB,CAAhB;AAEH;;AAED,UAAUoB,qBAAV,GAAiC;AAC7B,QAAMjF,UAAU,CAACgB,0BAAD,EAA4BqC,gBAA5B,CAAhB;AACH;;AAED,UAAU6B,kBAAV,GAA8B;AAC1B,QAAMlF,UAAU,CAACmB,uBAAD,EAAyBqC,aAAzB,CAAhB;AACH;;AAED,UAAU2B,iBAAV,GAA6B;AACzB,QAAMnF,UAAU,CAACoB,qBAAD,EAAuB4C,YAAvB,CAAhB;AACH;;AAED,UAAUoB,iBAAV,GAA6B;AACzB,QAAMpF,UAAU,CAACuB,qBAAD,EAAuB6C,YAAvB,CAAhB;AACH;;AAED,UAAUiB,aAAV,GAAyB;AACrB,QAAMrF,UAAU,CAAC0B,iBAAD,EAAmB4C,QAAnB,CAAhB;AAEH;;AAED,UAAUgB,eAAV,GAA2B;AACnB,QAAMtF,UAAU,CAAC2B,mBAAD,EAAqB+C,UAArB,CAAhB;AACP;;AAED,UAAUa,YAAV,GAAwB;AACpB,QAAMvF,UAAU,CAACgC,eAAD,EAAiB4C,OAAjB,CAAhB;AACH;;AAED,eAAe,UAAUY,QAAV,GAAqB;AAEnC,QAAM1F,GAAG,CAAC,CACNC,IAAI,CAACgF,kBAAD,CADE,EAENhF,IAAI,CAAC+E,aAAD,CAFE,EAGN/E,IAAI,CAACiF,gBAAD,CAHE,EAINjF,IAAI,CAACoF,iBAAD,CAJE,EAKNpF,IAAI,CAACkF,qBAAD,CALE,EAMNlF,IAAI,CAACmF,kBAAD,CANE,EAONnF,IAAI,CAACqF,iBAAD,CAPE,EAQNrF,IAAI,CAACsF,aAAD,CARE,EASNtF,IAAI,CAACuF,eAAD,CATE,EAUNvF,IAAI,CAACwF,YAAD,CAVE,CAAD,CAAT;AAaA","sourcesContent":["import {all,fork,takeLatest, put, delay,call} from 'redux-saga/effects'; \r\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \r\n                           //axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \r\n\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\r\nimport { ADD_POST_TO_ME} from '../reducers/user'\r\n\r\n\r\nfunction addPostAPI(postData){\r\n    console.log('postData===>' , postData); \r\n    return axios.post('/post',postData,{withCredentials:true}); \r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n\r\n    return axios.get('/posts'); \r\n}\r\n\r\n\r\nfunction* loadMainPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadMainPostsAPI);       \r\n            console.log('posts==>',result.data); \r\n            yield put({\r\n                type:LOAD_MAIN_POSTS_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadHashtagPostsAPI(tag){\r\n\r\n    return axios.get(`/hashtag/${tag}`); \r\n}\r\n\r\n\r\nfunction* loadHashtagPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadHashtagPostsAPI,action.data);     \r\n           yield put({\r\n               type:LOAD_HASHTAG_POSTS_SUCCESS,\r\n               data: result.data,\r\n           })  \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadUserPostsAPI(id){\r\n\r\n    return axios.get(`/user/${id}/posts`); \r\n}\r\n\r\n\r\nfunction* loadUserPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadUserPostsAPI,action.data);    \r\n           yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })  \r\n          \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction* addPost(action){\r\n\r\n    try{\r\n            const result = yield call(addPostAPI,action.data);\r\n \r\n            yield put({\r\n                type:ADD_POST_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n\r\n            yield put({\r\n                type: ADD_POST_TO_ME,\r\n                data : result.data.id,\r\n            });\r\n\r\n    }catch(e){\r\n        console.error('ADD_POST_FAILURE==>' ,e); \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n\r\n  function* addComment(action) {\r\n    try {\r\n      const result = yield call(addCommentAPI, action.data);\r\n      yield put({\r\n        type: ADD_COMMENT_SUCCESS,\r\n        data: {\r\n          postId: action.data.postId,\r\n          comment: result.data,\r\n        },\r\n      });\r\n    } catch (e) {\r\n      \r\n      console.error(e);\r\n      yield put({\r\n        type: ADD_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\nfunction loadCommentstAPI(postId){\r\n\r\n    return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action){\r\n\r\n    try{\r\n        const result = yield call(loadCommentstAPI,action.data);\r\n        yield put({\r\n            type:LOAD_COMMENTS_SUCCESS,\r\n            data:{\r\n                postId:action.data,\r\n                comments:result.data,\r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:LOAD_COMMENTS_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction upLoadImagesAPI(formData){\r\n    return axios.post('/post/images',formData,{withCredentials:true}); \r\n}\r\n\r\nfunction* upLoadImages(action){\r\n\r\n    try{\r\n        const result = yield call(upLoadImagesAPI,action.data);\r\n        console.log('upLoadImages result ===>' , result); \r\n        yield put({\r\n            type:UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,  //이미지가 저장된 주소를 가져온다. \r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:UPLOAD_IMAGES_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\nfunction likePostAPI(postId){\r\n    return axios.post(`/post/${postId}/like`,{},{withCredentials:true}); \r\n}\r\n\r\nfunction* likePost(action){\r\n        console.log('post saga likePost==>' , action); \r\n    try{\r\n        const result = yield call(likePostAPI,action.data);\r\n        yield put({\r\n            type:LIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            }\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:LIKE_POST_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction unLikePostAPI(postId){\r\n    return axios.delete(`/post/${postId}/like`,{withCredentials:true}); \r\n}\r\n\r\nfunction* unLikePost(action){\r\n    try{\r\n        const result = yield call(unLikePostAPI,action.data);\r\n        yield put({\r\n            type:UNLIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            }\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:UNLIKE_POST_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction reTweetAPI(postId){\r\n    return axios.post(`/post/${postId}/retweet`,{},{withCredentials:true}); \r\n}\r\n\r\nfunction* reTweet(action){\r\n    try{\r\n        const result = yield call(reTweetAPI,action.data);\r\n        yield put({\r\n            type:RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n   alert(e); \r\n    yield put({\r\n        type:RETWEET_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction* whatchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost); \r\n\r\n}\r\n\r\nfunction* watchLoadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts); \r\n}\r\n\r\n\r\nfunction* whatchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); \r\n    \r\n}\r\n\r\nfunction* watchLoadHashtagPosts(){\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts); \r\n}\r\n\r\nfunction* watchLoadUserPosts(){\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST,loadUserPosts); \r\n}\r\n\r\nfunction* watchLoadComments(){\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST,loadComments);\r\n}\r\n\r\nfunction* watchUploadImages(){\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST,upLoadImages);\r\n}\r\n\r\nfunction* watchLikePost(){\r\n    yield takeLatest(LIKE_POST_REQUEST,likePost);\r\n\r\n}\r\n\r\nfunction* watchUnLikePost(){\r\n        yield takeLatest(UNLIKE_POST_REQUEST,unLikePost)\r\n}\r\n\r\nfunction* watchRetweet(){\r\n    yield takeLatest(RETWEET_REQUEST,reTweet); \r\n}\r\n\r\nexport default function* postSaga() {\r\n\r\n yield all([\r\n     fork(watchLoadMainPosts),\r\n     fork(whatchAddPost), \r\n     fork(whatchAddComment), \r\n     fork(watchLoadComments),\r\n     fork(watchLoadHashtagPosts),\r\n     fork(watchLoadUserPosts),\r\n     fork(watchUploadImages),\r\n     fork(watchLikePost),\r\n     fork(watchUnLikePost),\r\n     fork(watchRetweet),\r\n ]); \r\n\r\n}"]},"metadata":{},"sourceType":"module"}