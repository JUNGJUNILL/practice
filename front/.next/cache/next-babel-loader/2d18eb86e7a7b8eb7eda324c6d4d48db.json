{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay, takeEvery, take } from 'redux-saga/effects'; //이 외에도\n// race, cancel, select, throttle, debounce 등 도 있다. \n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST } from '../reducers/user';\nimport axios from 'axios'; //call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\n//fort : 함수 비동기적 호출  \n//---------------------------둘 다 함수를 실행시켜준다.\n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n\naxios.defaults.baseURL = 'http://captainryan.gonetis.com:3065/api';\nexport const HELLO_SAGA = 'HELLO_SAGA';\n\nfunction* loginAPI(loginData) {\n  //서버에 요청하는 부분 \n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n} //▲백엔드와 프론트간에 쿠키를 주고 받을 수 있다.\n\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    const loginInfo = yield result.then(resolve => {\n      return resolve.data;\n    });\n    console.log('loginInfo==>', loginInfo);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: loginInfo\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  console.log('watchLogin');\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* logout() {\n  return axios.post();\n}\n\nfunction* watchLogout() {\n  console.log('watchLogout');\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\nfunction* signUpAPI(signUpData) {\n  console.log('signUpData ==>', signUpData);\n  return axios.post('http://captainryan.gonetis.com:3065/api/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    console.log('action.data-->' + action.data); //  yield call(signUpAPI);\n\n    yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* hello() {\n  yield delay(1000);\n  yield put({\n    type: 'Bye Saga'\n  });\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, hello);\n} //이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \n// function* watchHello(){\n//     console.log('before saga'); \n//     while(true){\n//         yield take(HELLO_SAGA); \n//         console.log('hello saga'); \n//     }\n// }\n\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), //fork(watchHello),\n  fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","delay","takeEvery","take","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","LOG_OUT_REQUEST","axios","defaults","baseURL","HELLO_SAGA","loginAPI","loginData","post","withCredentials","login","action","result","data","loginInfo","then","resolve","console","log","type","e","error","watchLogin","logout","watchLogout","signUpAPI","signUpData","signUp","watchSignUp","hello","watchHello","userSaga"],"mappings":"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","sourcesContent":["import {all ,fork, takeLatest, call, put, delay,takeEvery,take }from 'redux-saga/effects'; \r\n//이 외에도\r\n// race, cancel, select, throttle, debounce 등 도 있다. \r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\n//call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\r\n//fort : 함수 비동기적 호출  \r\n//---------------------------둘 다 함수를 실행시켜준다.\r\n\r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\n axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api';\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\n\r\n\r\nfunction* loginAPI(loginData){\r\n//서버에 요청하는 부분 \r\n    return axios.post('/user/login',loginData,{withCredentials:true}); \r\n}                                                                                          //▲백엔드와 프론트간에 쿠키를 주고 받을 수 있다.\r\n\r\nfunction* login(action){\r\n   \r\n  \r\n    try{\r\n        \r\n         const result    = yield call(loginAPI,action.data);  \r\n         const loginInfo = yield result.then((resolve)=>{\r\n            \r\n            return resolve.data; \r\n            \r\n         }); \r\n\r\n         console.log('loginInfo==>' , loginInfo);\r\n       \r\n        yield  put({\r\n            type: LOG_IN_SUCCESS,\r\n            data:loginInfo,\r\n        });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogin(){\r\n    console.log('watchLogin'); \r\n    yield takeEvery(LOG_IN_REQUEST,login); \r\n}\r\n\r\nfunction* logout(){\r\n\r\n    return axios.post()\r\n}\r\n\r\nfunction* watchLogout(){\r\n    console.log('watchLogout'); \r\n    yield takeEvery(LOG_OUT_REQUEST,logout); \r\n}\r\n\r\n\r\n\r\n\r\nfunction* signUpAPI(signUpData){\r\n    console.log('signUpData ==>' ,signUpData)\r\n    return axios.post('http://captainryan.gonetis.com:3065/api/user/',signUpData); \r\n}\r\n\r\nfunction* signUp(action){\r\n\r\n    try{\r\n        console.log('action.data-->' + action.data); \r\n      //  yield call(signUpAPI);\r\n        yield call(signUpAPI,action.data);  \r\n\r\n        yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST,signUp)\r\n}\r\n\r\n\r\nfunction* hello(){\r\n\r\n    yield delay(1000); \r\n    yield put({\r\n        type:'Bye Saga'\r\n    })\r\n}\r\n\r\nfunction* watchHello(){\r\n     yield takeLatest(HELLO_SAGA, hello); \r\n}\r\n//이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \r\n// function* watchHello(){\r\n//     console.log('before saga'); \r\n//     while(true){\r\n//         yield take(HELLO_SAGA); \r\n//         console.log('hello saga'); \r\n//     }\r\n// }\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        fork(watchLogin), \r\n        fork(watchLogout),\r\n        //fork(watchHello),\r\n        fork(watchSignUp),\r\n        \r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}