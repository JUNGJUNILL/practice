{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Button, List, Card } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { StopOutlined } from '@ant-design/icons';\nimport NicknameEditForm from '../components/NicknameEditForm';\nimport { LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST, REMOVE_FOLLOWER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../components/PostCard';\n\nvar Profile = function Profile() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me,\n      followingList = _useSelector.followingList,\n      followerList = _useSelector.followerList;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts;\n\n  useEffect(function () {}, [me && me.id]);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onRemoveFollower = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: REMOVE_FOLLOWER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  return __jsx(\"div\", null, __jsx(NicknameEditForm, null), __jsx(List, {\n    style: {\n      marginBottom: '20px'\n    },\n    grid: {\n      gutter: 4,\n      xs: 2,\n      md: 3\n    },\n    size: \"small\",\n    header: __jsx(\"div\", null, \"\\uD314\\uB85C\\uC789 \\uBAA9\\uB85D\"),\n    loadMore: __jsx(Button, {\n      style: {\n        width: '100%'\n      }\n    }, \"\\uB354 \\uBCF4\\uAE30\"),\n    bordered: true,\n    dataSource: followingList,\n    renderItem: function renderItem(item) {\n      return __jsx(List.Item, {\n        style: {\n          marginTop: '20px'\n        }\n      }, __jsx(Card, {\n        actions: [__jsx(StopOutlined, {\n          onClick: onUnfollow(item.id)\n        })]\n      }, __jsx(Card.Meta, {\n        description: item.nickname\n      })));\n    }\n  }), __jsx(List, {\n    style: {\n      marginBottom: '20px'\n    },\n    grid: {\n      gutter: 4,\n      xs: 2,\n      md: 3\n    },\n    size: \"small\",\n    header: __jsx(\"div\", null, \"\\uD314\\uB85C\\uC6CC \\uBAA9\\uB85D\"),\n    loadMore: __jsx(Button, {\n      style: {\n        width: '100%'\n      }\n    }, \"\\uB354 \\uBCF4\\uAE30\"),\n    bordered: true,\n    dataSource: followerList,\n    renderItem: function renderItem(item) {\n      return __jsx(List.Item, {\n        style: {\n          marginTop: '20px'\n        }\n      }, __jsx(Card, {\n        actions: [__jsx(StopOutlined, {\n          onClick: onRemoveFollower(item.id)\n        })]\n      }, __jsx(Card.Meta, {\n        description: item.nickname\n      })));\n    }\n  }), __jsx(\"div\", null, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: +c.createdAt,\n      post: c\n    });\n  })));\n};\n\nProfile.getInitialProps = function _callee(context) {\n  var state;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          state = context.store.getState();\n          context.store.dispatch({\n            type: LOAD_FOLLOWERS_REQUEST,\n            data: state.user.me && state.user.me.id\n          });\n          context.store.dispatch({\n            type: LOAD_FOLLOWINGS_REQUEST,\n            data: state.user.me && state.user.me.id\n          });\n          context.store.dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            data: state.user.me && state.user.me.id\n          }); //__app.js에서 \n          //   \n\n          /*\r\n          const state  = ctx.store.getState(); \r\n          if(!state.user.me){\r\n            ctx.store.dispatch({\r\n                type: LOAD_USER_REQUEST\r\n            });\r\n            에서 me를 먼저 load 한 후에 me가 생성되기 때문에 id default 값을 0으로 설정하여 \r\n            0인 경우는 내 정보 이므로, 해당 파라메터를 서버로 넘거 0인 경우는 내 프로필을 조회 한 것이다\r\n            라고 로직을 설정한다.  \r\n                }\r\n          */\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Profile;","map":{"version":3,"sources":["D:/git Repository/practice/front/pages/profile.js"],"names":["React","useEffect","useCallback","useState","Button","List","Card","useDispatch","useSelector","StopOutlined","NicknameEditForm","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWINGS_REQUEST","REMOVE_FOLLOWER_REQUEST","UNFOLLOW_USER_REQUEST","LOAD_USER_POSTS_REQUEST","PostCard","Profile","dispatch","state","user","me","followingList","followerList","post","mainPosts","id","onUnfollow","userId","type","data","onRemoveFollower","marginBottom","gutter","xs","md","width","item","marginTop","nickname","map","c","createdAt","getInitialProps","context","store","getState"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback,useState } from 'react';\r\nimport { Button, List, Card } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {StopOutlined } from '@ant-design/icons';\r\nimport NicknameEditForm from '../components/NicknameEditForm';\r\nimport {\r\n  LOAD_FOLLOWERS_REQUEST,\r\n  LOAD_FOLLOWINGS_REQUEST,\r\n  REMOVE_FOLLOWER_REQUEST,\r\n  UNFOLLOW_USER_REQUEST,\r\n} from '../reducers/user';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\r\nimport PostCard from '../components/PostCard';\r\n\r\nconst Profile = () => {\r\n  const dispatch = useDispatch();\r\n  const { me, followingList, followerList } = useSelector(state => state.user);\r\n  const { mainPosts } = useSelector(state => state.post);\r\n\r\n  useEffect(() => {\r\n  \r\n  }, [me && me.id]);\r\n\r\n  const onUnfollow = useCallback(userId => () => {\r\n    dispatch({\r\n      type: UNFOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n\r\n  const onRemoveFollower = useCallback(userId => () => {\r\n    dispatch({\r\n      type: REMOVE_FOLLOWER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <NicknameEditForm />\r\n      <List\r\n        style={{ marginBottom: '20px' }}\r\n        grid={{ gutter: 4, xs: 2, md: 3 }}\r\n        size=\"small\"\r\n        header={<div>팔로잉 목록</div>}\r\n        loadMore={<Button style={{ width: '100%' }}>더 보기</Button>}\r\n        bordered\r\n        dataSource={followingList}\r\n        renderItem={item => (\r\n          <List.Item style={{ marginTop: '20px' }}>\r\n            <Card actions={[<StopOutlined onClick={onUnfollow(item.id)} />]}>\r\n              <Card.Meta description={item.nickname} />\r\n            </Card>\r\n          </List.Item>\r\n        )}\r\n      />\r\n      <List\r\n        style={{ marginBottom: '20px' }}\r\n        grid={{ gutter: 4, xs: 2, md: 3 }}\r\n        size=\"small\"\r\n        header={<div>팔로워 목록</div>}\r\n        loadMore={<Button style={{ width: '100%' }}>더 보기</Button>}\r\n        bordered\r\n        dataSource={followerList}\r\n        renderItem={item => (\r\n          <List.Item style={{ marginTop: '20px' }}>\r\n            <Card actions={[<StopOutlined onClick={onRemoveFollower(item.id)} />]}>\r\n              <Card.Meta description={item.nickname} />\r\n            </Card>\r\n          </List.Item>\r\n        )}\r\n      />\r\n      <div>\r\n        {mainPosts.map(c => (\r\n          <PostCard key={+c.createdAt} post={c} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nProfile.getInitialProps = async (context) =>{\r\n\r\n  const state = context.store.getState(); \r\n\r\n    context.store.dispatch({\r\n      type: LOAD_FOLLOWERS_REQUEST,\r\n      data: state.user.me && state.user.me.id,\r\n    });\r\n\r\n    context.store.dispatch({\r\n      type: LOAD_FOLLOWINGS_REQUEST,\r\n      data: state.user.me && state.user.me.id,\r\n    });\r\n\r\n    context.store.dispatch({\r\n      type: LOAD_USER_POSTS_REQUEST,\r\n      data: state.user.me && state.user.me.id,\r\n    });\r\n\r\n\r\n    //__app.js에서 \r\n    //   \r\n    \r\n    /*\r\n    const state  = ctx.store.getState(); \r\n    if(!state.user.me){\r\n      ctx.store.dispatch({\r\n          type: LOAD_USER_REQUEST\r\n      });\r\n      에서 me를 먼저 load 한 후에 me가 생성되기 때문에 id default 값을 0으로 설정하여 \r\n      0인 경우는 내 정보 이므로, 해당 파라메터를 서버로 넘거 0인 경우는 내 프로필을 조회 한 것이다\r\n      라고 로직을 설정한다.  \r\n          }\r\n    */\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}