{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostCard from '../components/PostCard';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\n\nconst Hashtag = ({\n  tag\n}) => {\n  const dispatch = useDispatch();\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  const onScroll = useCallback(() => {\n    //window.scrollY + document.documentElement.clientHeight = document.documentElement.scrollHeight\n    console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n    if (hasMorePost) {\n      //스크롤 할 때 마다 서버로 요청보내면 서버 뒤질 수 도 있음 방지\n      //reducer 잘 보면 이해가 가능할 것이다. \n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        dispatch({\n          type: LOAD_MAIN_POSTS_REQUEST,\n          lastId: mainPosts[mainPosts.length - 1].id\n        });\n      }\n    }\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, mainPosts.map((v, i) => __jsx(PostCard, {\n    key: i,\n    post: v\n  })));\n};\n\nHashtag.propTypes = {\n  tag: PropTypes.string.isRequired\n}; //next에서 제공하는 기능\n//_app.js에서 NodeBird.getInitialProps 추가 되어야 가능(_app.js에서 가장 먼저 선행 되어야 한다.)\n//_app.js에서 context가 이 Hashtag의 실행 문맥이 된다.\n\nHashtag.getInitialProps = async context => {\n  const tag = context.query.tag;\n  console.log(context.query.tag);\n  context.store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: tag\n  });\n  return {\n    tag\n  };\n};\n\nexport default Hashtag;","map":{"version":3,"sources":["D:/git Repository/practice/front/pages/hashtag.js"],"names":["PropTypes","useEffect","useDispatch","useSelector","PostCard","LOAD_HASHTAG_POSTS_REQUEST","Hashtag","tag","dispatch","mainPosts","hasMorePost","state","post","onScroll","useCallback","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","LOAD_MAIN_POSTS_REQUEST","lastId","length","id","addEventListener","removeEventListener","map","v","i","propTypes","string","isRequired","getInitialProps","context","query","store","data"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,0BAAT,QAA2C,kBAA3C;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAS;AAErB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAACO,IAAAA,SAAD;AAAWC,IAAAA;AAAX,MAA0BP,WAAW,CAACQ,KAAK,IAAEA,KAAK,CAACC,IAAd,CAA3C;AAEA,QAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAK;AAC9B;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F;;AAEA,QAAGZ,WAAH,EAAe;AAAC;AACA;AACZ,UAAGO,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAsC,GAAlG,EAAsG;AAClGd,QAAAA,QAAQ,CAAC;AACLe,UAAAA,IAAI,EAACC,uBADA;AAELC,UAAAA,MAAM,EAAGhB,SAAS,CAACA,SAAS,CAACiB,MAAV,GAAmB,CAApB,CAAT,CAAgCC;AAFpC,SAAD,CAAR;AAIH;AACJ;AACJ,GAb+B,EAa9B,CAACjB,WAAD,EAAeD,SAAS,CAACiB,MAAzB,CAb8B,CAA5B;AAeAzB,EAAAA,SAAS,CAAC,MAAI;AACNgB,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAiCf,QAAjC;AAEA,WAAO,MAAI;AACPI,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAoChB,QAApC;AACH,KAFD;AAGP,GANQ,EAMP,CAACJ,SAAS,CAACiB,MAAX,CANO,CAAT;AASA,SACI,mBACKjB,SAAS,CAACqB,GAAV,CAAc,CAACC,CAAD,EAAGC,CAAH,KACX,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAf;AAAkB,IAAA,IAAI,EAAED;AAAxB,IADH,CADL,CADJ;AAOH,CApCD;;AAsCAzB,OAAO,CAAC2B,SAAR,GAAoB;AAChB1B,EAAAA,GAAG,EAAGP,SAAS,CAACkC,MAAV,CAAiBC;AADP,CAApB,C,CAIQ;AACA;AACA;;AACR7B,OAAO,CAAC8B,eAAR,GAA0B,MAAOC,OAAP,IAAkB;AAExC,QAAM9B,GAAG,GAAG8B,OAAO,CAACC,KAAR,CAAc/B,GAA1B;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYqB,OAAO,CAACC,KAAR,CAAc/B,GAA1B;AAEA8B,EAAAA,OAAO,CAACE,KAAR,CAAc/B,QAAd,CAAuB;AACnBe,IAAAA,IAAI,EAAClB,0BADc;AAEnBmC,IAAAA,IAAI,EAACjC;AAFc,GAAvB;AAKA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACH,CAXD;;AAaA,eAAeD,OAAf","sourcesContent":["import PropTypes from 'prop-types'\r\nimport {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport PostCard from '../components/PostCard'\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Hashtag = ({tag})=>{\r\n\r\n    const dispatch = useDispatch(); \r\n    const {mainPosts,hasMorePost} = useSelector(state=>state.post); \r\n\r\n    const onScroll = useCallback(() =>{\r\n        //window.scrollY + document.documentElement.clientHeight = document.documentElement.scrollHeight\r\n    console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight); \r\n\r\n    if(hasMorePost){//스크롤 할 때 마다 서버로 요청보내면 서버 뒤질 수 도 있음 방지\r\n                    //reducer 잘 보면 이해가 가능할 것이다. \r\n        if(window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight-300){\r\n            dispatch({\r\n                type:LOAD_MAIN_POSTS_REQUEST,\r\n                lastId : mainPosts[mainPosts.length - 1].id,\r\n            }); \r\n        }\r\n    }         \r\n},[hasMorePost , mainPosts.length]); \r\n\r\n    useEffect(()=>{\r\n            window.addEventListener('scroll',onScroll); \r\n\r\n            return ()=>{\r\n                window.removeEventListener('scroll',onScroll);\r\n            }\r\n    },[mainPosts.length])\r\n\r\n\r\n    return(\r\n        <div>\r\n            {mainPosts.map((v,i)=>(\r\n                <PostCard key={i} post={v} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nHashtag.propTypes = {\r\n    tag : PropTypes.string.isRequired, \r\n}\r\n\r\n        //next에서 제공하는 기능\r\n        //_app.js에서 NodeBird.getInitialProps 추가 되어야 가능(_app.js에서 가장 먼저 선행 되어야 한다.)\r\n        //_app.js에서 context가 이 Hashtag의 실행 문맥이 된다.\r\nHashtag.getInitialProps = async (context) =>{\r\n    \r\n    const tag = context.query.tag; \r\n    console.log(context.query.tag);\r\n\r\n    context.store.dispatch({\r\n        type:LOAD_HASHTAG_POSTS_REQUEST,\r\n        data:tag,\r\n    }); \r\n\r\n    return { tag }; \r\n}\r\n\r\nexport default Hashtag; "]},"metadata":{},"sourceType":"module"}