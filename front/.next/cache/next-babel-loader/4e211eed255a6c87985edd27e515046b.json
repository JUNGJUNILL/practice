{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { EDIT_NICKNAME_FAILURE, EDIT_NICKNAME_REQUEST, EDIT_NICKNAME_SUCCESS, FOLLOW_USER_FAILURE, FOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWINGS_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, REMOVE_FOLLOWER_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_USER_FAILURE, UNFOLLOW_USER_REQUEST, UNFOLLOW_USER_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    const loginInfo = yield result.then(resolve => {\n      return resolve.data;\n    });\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: loginInfo\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield call(signUpAPI);\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction followAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(`/user/${userId}/follow`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* follow(action) {\n  try {\n    // yield call(followAPI);\n    const result = yield call(followAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: FOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: FOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeEvery(FOLLOW_USER_REQUEST, follow);\n}\n\nfunction unfollowAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follow`, {\n    withCredentials: true\n  });\n}\n\nfunction* unfollow(action) {\n  try {\n    // yield call(unfollowAPI);\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: UNFOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: UNFOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\n}\n\nfunction loadFollowersAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(`/user/${userId}/followers`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowers(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowersAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction loadFollowingsAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(`/user/${userId}/followings`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowings(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowingsAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowings() {\n  yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction removeFollowerAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follower`, {\n    withCredentials: true\n  });\n}\n\nfunction* removeFollower(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(removeFollowerAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: REMOVE_FOLLOWER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemoveFollower() {\n  yield takeEvery(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nfunction editNicknameAPI(nickname) {\n  // 서버에 요청을 보내는 부분\n  return axios.patch('/user/nickname', {\n    nickname\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* editNickname(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(editNicknameAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: EDIT_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: EDIT_NICKNAME_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchEditNickname() {\n  yield takeEvery(EDIT_NICKNAME_REQUEST, editNickname);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow), fork(watchLoadFollowers), fork(watchLoadFollowings), fork(watchRemoveFollower), fork(watchEditNickname)]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/user.js"],"names":["all","call","fork","put","takeEvery","axios","EDIT_NICKNAME_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","FOLLOW_USER_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","REMOVE_FOLLOWER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","logInAPI","loginData","post","withCredentials","logIn","action","result","loginAPI","data","loginInfo","then","resolve","type","e","console","error","watchLogIn","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logOut","watchLogOut","loadUserAPI","userId","get","loadUser","me","watchLoadUser","followAPI","follow","watchFollow","unfollowAPI","delete","unfollow","watchUnfollow","loadFollowersAPI","loadFollowers","watchLoadFollowers","loadFollowingsAPI","loadFollowings","watchLoadFollowings","removeFollowerAPI","removeFollower","watchRemoveFollower","editNicknameAPI","nickname","patch","editNickname","watchEditNickname","userSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  EDIT_NICKNAME_FAILURE, EDIT_NICKNAME_REQUEST,\r\n  EDIT_NICKNAME_SUCCESS,\r\n  FOLLOW_USER_FAILURE,\r\n  FOLLOW_USER_REQUEST,\r\n  FOLLOW_USER_SUCCESS,\r\n  LOAD_FOLLOWERS_FAILURE,\r\n  LOAD_FOLLOWERS_REQUEST,\r\n  LOAD_FOLLOWERS_SUCCESS,\r\n  LOAD_FOLLOWINGS_FAILURE, LOAD_FOLLOWINGS_REQUEST,\r\n  LOAD_FOLLOWINGS_SUCCESS,\r\n  LOAD_USER_FAILURE,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS, REMOVE_FOLLOWER_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  UNFOLLOW_USER_FAILURE,\r\n  UNFOLLOW_USER_REQUEST,\r\n  UNFOLLOW_USER_SUCCESS,\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI(loginData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/login', loginData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* logIn(action) {\r\n    \r\n    try{\r\n        \r\n        const result    = yield call(loginAPI,action.data);  \r\n        const loginInfo = yield result.then((resolve)=>{\r\n           \r\n           return resolve.data; \r\n           \r\n        }); \r\n\r\n      \r\n       yield  put({\r\n           type: LOG_IN_SUCCESS,\r\n           data: loginInfo,\r\n       });\r\n\r\n   }catch(e){\r\n       console.error(e); \r\n       yield put({\r\n           type:LOG_IN_FAILURE,\r\n       });\r\n   }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction signUpAPI(signUpData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    // yield call(signUpAPI);\r\n    yield call(signUpAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction logOutAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/logout', {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // yield call(logOutAPI);\r\n    yield call(logOutAPI);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction loadUserAPI(userId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* loadUser(action) {\r\n  try {\r\n    // yield call(loadUserAPI);\r\n    const result = yield call(loadUserAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data,\r\n      me: !action.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nfunction followAPI(userId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post(`/user/${userId}/follow`, {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    // yield call(followAPI);\r\n    const result = yield call(followAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: FOLLOW_USER_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: FOLLOW_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeEvery(FOLLOW_USER_REQUEST, follow);\r\n}\r\n\r\nfunction unfollowAPI(userId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.delete(`/user/${userId}/follow`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    // yield call(unfollowAPI);\r\n    const result = yield call(unfollowAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: UNFOLLOW_USER_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: UNFOLLOW_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\r\n}\r\n\r\nfunction loadFollowersAPI(userId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.get(`/user/${userId}/followers`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* loadFollowers(action) {\r\n  try {\r\n    // yield call(loadFollowersAPI);\r\n    const result = yield call(loadFollowersAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOAD_FOLLOWERS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_FOLLOWERS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadFollowers() {\r\n  yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\r\n}\r\n\r\nfunction loadFollowingsAPI(userId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.get(`/user/${userId}/followings`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* loadFollowings(action) {\r\n  try {\r\n    // yield call(loadFollowersAPI);\r\n    const result = yield call(loadFollowingsAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOAD_FOLLOWINGS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_FOLLOWINGS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadFollowings() {\r\n  yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\r\n}\r\n\r\nfunction removeFollowerAPI(userId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.delete(`/user/${userId}/follower`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* removeFollower(action) {\r\n  try {\r\n    // yield call(loadFollowersAPI);\r\n    const result = yield call(removeFollowerAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: REMOVE_FOLLOWER_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: REMOVE_FOLLOWER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemoveFollower() {\r\n  yield takeEvery(REMOVE_FOLLOWER_REQUEST, removeFollower);\r\n}\r\n\r\nfunction editNicknameAPI(nickname) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.patch('/user/nickname', { nickname }, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* editNickname(action) {\r\n  try {\r\n    // yield call(loadFollowersAPI);\r\n    const result = yield call(editNicknameAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: EDIT_NICKNAME_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: EDIT_NICKNAME_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchEditNickname() {\r\n  yield takeEvery(EDIT_NICKNAME_REQUEST, editNickname);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchLoadUser),\r\n    fork(watchSignUp),\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n    fork(watchLoadFollowers),\r\n    fork(watchLoadFollowings),\r\n    fork(watchRemoveFollower),\r\n    fork(watchEditNickname),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}