{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \n//axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  console.log('postData===>', postData);\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction loadMainPostsAPI(postData) {\n  return axios.get('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: postData\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const postData = yield result.then(resolve => {\n      return resolve.data;\n    });\n    console.log('postData===>', postData);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: postData\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* whatchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    console.log('action.data.postId==>', action.data.postId);\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        poSstId: action.data.postId\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* whatchAddComment() {\n  console.log('whatchAddComment');\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(whatchAddPost), fork(whatchAddComment)]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","addPostAPI","postData","console","log","post","withCredentials","loadMainPostsAPI","get","loadMainPosts","action","type","data","e","error","addPost","result","then","resolve","whatchAddPost","watchLoadMainPosts","addCommentAPI","addComment","postId","poSstId","whatchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all,fork,takeLatest, put, delay,call} from 'redux-saga/effects'; \r\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \r\n                           //axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \r\n\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\r\n\r\n\r\nfunction addPostAPI(postData){\r\n    console.log('postData===>' , postData); \r\n    return axios.post('/post',postData,{withCredentials:true}); \r\n}\r\n\r\nfunction loadMainPostsAPI(postData){\r\n\r\n    return axios.get('/post',postData,{withCredentials:true}); \r\n}\r\n\r\n\r\nfunction* loadMainPosts(action){\r\n\r\n    try{\r\n           \r\n            yield put({\r\n                type:LOAD_MAIN_POSTS_SUCCESS,\r\n                data:postData,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\nfunction* addPost(action){\r\n\r\n    try{\r\n            const result = yield call(addPostAPI,action.data);\r\n            const postData = yield result.then((resolve)=>{\r\n                \r\n                return resolve.data; \r\n            }); \r\n            console.log('postData===>',postData); \r\n            yield put({\r\n                type:ADD_POST_SUCCESS,\r\n                data:postData,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction* whatchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost); \r\n\r\n}\r\n\r\nfunction* watchLoadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts); \r\n}\r\n\r\n\r\n\r\n\r\nfunction addCommentAPI(){\r\n\r\n}\r\n\r\nfunction* addComment(action){\r\n\r\n    try{\r\n        console.log('action.data.postId==>' , action.data.postId); \r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                poSstId:action.data.postId,\r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:ADD_COMMENT_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\nfunction* whatchAddComment(){\r\n    console.log('whatchAddComment'); \r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); \r\n    \r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n\r\n yield all([\r\n     fork(watchLoadMainPosts),\r\n     fork(whatchAddPost), \r\n     fork(whatchAddComment), \r\n ]); \r\n\r\n}"]},"metadata":{},"sourceType":"module"}