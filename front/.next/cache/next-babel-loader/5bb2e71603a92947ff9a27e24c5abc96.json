{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadMainPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(loadComments),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(upLoadImages),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(unLikePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(reTweet),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(whatchAddPost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(whatchAddComment),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadComments),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnLikePost),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \n//axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  console.log('postData===>', postData);\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction loadMainPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context2.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context4.next = 15;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error('ADD_POST_FAILURE==>', _context4.t0);\n          _context4.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context4.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context5.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction loadCommentstAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(loadCommentstAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.log(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context6.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction upLoadImagesAPI(formData) {\n  return axios.post('/post/images', formData, {\n    withCredentials: true\n  });\n}\n\nfunction upLoadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function upLoadImages$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(upLoadImagesAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          console.log('upLoadImages result ===>', result);\n          _context7.next = 7;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data //이미지가 저장된 주소를 가져온다. \n\n          });\n\n        case 7:\n          _context7.next = 14;\n          break;\n\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.log(_context7.t0);\n          _context7.next = 14;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context7.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 9]]);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          console.log('post saga likePost==>', action);\n          _context8.prev = 1;\n          _context8.next = 4;\n          return call(likePostAPI, action.data);\n\n        case 4:\n          result = _context8.sent;\n          _context8.next = 7;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 7:\n          _context8.next = 14;\n          break;\n\n        case 9:\n          _context8.prev = 9;\n          _context8.t0 = _context8[\"catch\"](1);\n          console.log(_context8.t0);\n          _context8.next = 14;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context8.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[1, 9]]);\n}\n\nfunction unLikePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unLikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unLikePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(unLikePostAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.log(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context9.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction reTweetAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/retweet\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction reTweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function reTweet$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(reTweetAPI, action.data);\n\n        case 3:\n          result = _context10.sent;\n          _context10.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context10.next = 14;\n          break;\n\n        case 8:\n          _context10.prev = 8;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.log(_context10.t0);\n          alert(_context10.t0);\n          _context10.next = 14;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context10.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 8]]);\n}\n\nfunction whatchAddPost() {\n  return _regeneratorRuntime.wrap(function whatchAddPost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction whatchAddComment() {\n  return _regeneratorRuntime.wrap(function whatchAddComment$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, upLoadImages);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction watchUnLikePost() {\n  return _regeneratorRuntime.wrap(function watchUnLikePost$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unLikePost);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, reTweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return all([fork(watchLoadMainPosts), fork(whatchAddPost), fork(whatchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnLikePost), fork(watchRetweet)]);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/post.js"],"names":["loadMainPosts","loadHashtagPosts","loadUserPosts","addPost","addComment","loadComments","upLoadImages","likePost","unLikePost","reTweet","whatchAddPost","watchLoadMainPosts","whatchAddComment","watchLoadHashtagPosts","watchLoadUserPosts","watchLoadComments","watchUploadImages","watchLikePost","watchUnLikePost","watchRetweet","postSaga","all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_REQUEST","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","addPostAPI","postData","console","log","post","withCredentials","loadMainPostsAPI","get","action","result","type","data","error","loadHashtagPostsAPI","tag","loadUserPostsAPI","id","addCommentAPI","postId","content","comment","loadCommentstAPI","comments","upLoadImagesAPI","formData","likePostAPI","userId","unLikePostAPI","reTweetAPI","alert"],"mappings":"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","sourcesContent":["import {all,fork,takeLatest, put, delay,call} from 'redux-saga/effects'; \r\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \r\n                           //axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \r\n\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\r\nimport { ADD_POST_TO_ME} from '../reducers/user'\r\n\r\n\r\nfunction addPostAPI(postData){\r\n    console.log('postData===>' , postData); \r\n    return axios.post('/post',postData,{withCredentials:true}); \r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n\r\n    return axios.get('/posts'); \r\n}\r\n\r\n\r\nfunction* loadMainPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadMainPostsAPI);       \r\n            yield put({\r\n                type:LOAD_MAIN_POSTS_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadHashtagPostsAPI(tag){\r\n\r\n    return axios.get(`/hashtag/${tag}`); \r\n}\r\n\r\n\r\nfunction* loadHashtagPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadHashtagPostsAPI,action.data);     \r\n           yield put({\r\n               type:LOAD_HASHTAG_POSTS_SUCCESS,\r\n               data: result.data,\r\n           })  \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadUserPostsAPI(id){\r\n\r\n    return axios.get(`/user/${id}/posts`); \r\n}\r\n\r\n\r\nfunction* loadUserPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadUserPostsAPI,action.data);    \r\n           yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })  \r\n          \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction* addPost(action){\r\n\r\n    try{\r\n            const result = yield call(addPostAPI,action.data);\r\n \r\n            yield put({\r\n                type:ADD_POST_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n\r\n            yield put({\r\n                type: ADD_POST_TO_ME,\r\n                data : result.data.id,\r\n            });\r\n\r\n    }catch(e){\r\n        console.error('ADD_POST_FAILURE==>' ,e); \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n\r\n  function* addComment(action) {\r\n    try {\r\n      const result = yield call(addCommentAPI, action.data);\r\n      yield put({\r\n        type: ADD_COMMENT_SUCCESS,\r\n        data: {\r\n          postId: action.data.postId,\r\n          comment: result.data,\r\n        },\r\n      });\r\n    } catch (e) {\r\n      \r\n      console.error(e);\r\n      yield put({\r\n        type: ADD_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\nfunction loadCommentstAPI(postId){\r\n\r\n    return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action){\r\n\r\n    try{\r\n        const result = yield call(loadCommentstAPI,action.data);\r\n        yield put({\r\n            type:LOAD_COMMENTS_SUCCESS,\r\n            data:{\r\n                postId:action.data,\r\n                comments:result.data,\r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:LOAD_COMMENTS_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction upLoadImagesAPI(formData){\r\n    return axios.post('/post/images',formData,{withCredentials:true}); \r\n}\r\n\r\nfunction* upLoadImages(action){\r\n\r\n    try{\r\n        const result = yield call(upLoadImagesAPI,action.data);\r\n        console.log('upLoadImages result ===>' , result); \r\n        yield put({\r\n            type:UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,  //이미지가 저장된 주소를 가져온다. \r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:UPLOAD_IMAGES_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\nfunction likePostAPI(postId){\r\n    return axios.post(`/post/${postId}/like`,{},{withCredentials:true}); \r\n}\r\n\r\nfunction* likePost(action){\r\n        console.log('post saga likePost==>' , action); \r\n    try{\r\n        const result = yield call(likePostAPI,action.data);\r\n        yield put({\r\n            type:LIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            }\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:LIKE_POST_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction unLikePostAPI(postId){\r\n    return axios.delete(`/post/${postId}/like`,{withCredentials:true}); \r\n}\r\n\r\nfunction* unLikePost(action){\r\n    try{\r\n        const result = yield call(unLikePostAPI,action.data);\r\n        yield put({\r\n            type:UNLIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            }\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:UNLIKE_POST_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction reTweetAPI(postId){\r\n    return axios.post(`/post/${postId}/retweet`,{},{withCredentials:true}); \r\n}\r\n\r\nfunction* reTweet(action){\r\n    try{\r\n        const result = yield call(reTweetAPI,action.data);\r\n        yield put({\r\n            type:RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n   alert(e); \r\n    yield put({\r\n        type:RETWEET_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction* whatchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost); \r\n\r\n}\r\n\r\nfunction* watchLoadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts); \r\n}\r\n\r\n\r\nfunction* whatchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); \r\n    \r\n}\r\n\r\nfunction* watchLoadHashtagPosts(){\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts); \r\n}\r\n\r\nfunction* watchLoadUserPosts(){\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST,loadUserPosts); \r\n}\r\n\r\nfunction* watchLoadComments(){\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST,loadComments);\r\n}\r\n\r\nfunction* watchUploadImages(){\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST,upLoadImages);\r\n}\r\n\r\nfunction* watchLikePost(){\r\n    yield takeLatest(LIKE_POST_REQUEST,likePost);\r\n\r\n}\r\n\r\nfunction* watchUnLikePost(){\r\n        yield takeLatest(UNLIKE_POST_REQUEST,unLikePost)\r\n}\r\n\r\nfunction* watchRetweet(){\r\n    yield takeLatest(RETWEET_REQUEST,reTweet); \r\n}\r\n\r\nexport default function* postSaga() {\r\n\r\n yield all([\r\n     fork(watchLoadMainPosts),\r\n     fork(whatchAddPost), \r\n     fork(whatchAddComment), \r\n     fork(watchLoadComments),\r\n     fork(watchLoadHashtagPosts),\r\n     fork(watchLoadUserPosts),\r\n     fork(watchUploadImages),\r\n     fork(watchLikePost),\r\n     fork(watchUnLikePost),\r\n     fork(watchRetweet),\r\n ]); \r\n\r\n}"]},"metadata":{},"sourceType":"module"}