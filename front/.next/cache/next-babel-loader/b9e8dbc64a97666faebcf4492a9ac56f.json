{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//user의 store \n//초기 state\nvar dummyUser = {\n  nickname: '정준일',\n  Post: ['정', '준'],\n  Followings: ['정', '준'],\n  Followers: ['정', '준'],\n  signUpData: {}\n};\nexport var initialState = {\n  isLoggedIn: false,\n  user: null,\n  successMesage: ''\n};\nexport var SIGN_UP = 'SIGN_UP';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var LOG_IN = 'LOG_IN';\nexport var LOG_IN_SUCCESS = 'LOGIN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport var LOG_OUT = 'LOG_OUT'; //실제 액션 \n\nexport var signUpAction = function signUpAction(data) {\n  //action에 넣을 데이터가 동적인 경우 action을 함수로 만들어야 한다. \n  return {\n    type: SIGN_UP,\n    data: data\n  };\n};\nexport var loginAction = {\n  type: LOG_IN,\n  data: {\n    nickname: '주닐정'\n  }\n};\nexport var logOutAction = {\n  type: LOG_OUT\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: dummyUser\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: dummyUser,\n          successMesage: '로그인에 성공하였습니다.'\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/git Repository/practice/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","signUpData","initialState","isLoggedIn","user","successMesage","SIGN_UP","SIGN_UP_SUCCESS","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT","signUpAction","data","type","loginAction","logOutAction","reducer","state","action"],"mappings":";;;;;;AAAA;AAEA;AACA,IAAMA,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAC,KADK;AAEdC,EAAAA,IAAI,EAAC,CAAC,GAAD,EAAK,GAAL,CAFS;AAGdC,EAAAA,UAAU,EAAC,CAAC,GAAD,EAAK,GAAL,CAHG;AAIdC,EAAAA,SAAS,EAAC,CAAC,GAAD,EAAK,GAAL,CAJI;AAKdC,EAAAA,UAAU,EAAC;AALG,CAAlB;AAQA,OAAO,IAAMC,YAAY,GAAG;AAExBC,EAAAA,UAAU,EAAG,KAFW;AAGxBC,EAAAA,IAAI,EAAE,IAHkB;AAIxBC,EAAAA,aAAa,EAAE;AAJS,CAArB;AAOP,OAAO,IAAMC,OAAO,GAAC,SAAd;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,IAAMC,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,cAAc,GAAG,eAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAhB,C,CAGP;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAS;AACrC;AACI,SAAO;AACHC,IAAAA,IAAI,EAACR,OADF;AAEHO,IAAAA,IAAI,EAACA;AAFF,GAAP;AAKH,CAPM;AAQP,OAAO,IAAME,WAAW,GAAG;AACvBD,EAAAA,IAAI,EAACN,MADkB;AAEvBK,EAAAA,IAAI,EAAC;AACDhB,IAAAA,QAAQ,EAAC;AADR;AAFkB,CAApB;AAOP,OAAO,IAAMmB,YAAY,GAAG;AACxBF,EAAAA,IAAI,EAACH;AADmB,CAArB;;AAIP,IAAMM,OAAO,GAAG,SAAVA,OAAU,GAAiC;AAAA,MAAhCC,KAAgC,uEAAxBhB,YAAwB;AAAA,MAATiB,MAAS;;AAE7C,UAAOA,MAAM,CAACL,IAAd;AAEI,SAAKN,MAAL;AAAY;AACR,iCACOU,KADP;AAEIf,UAAAA,UAAU,EAAC,IAFf;AAGIC,UAAAA,IAAI,EAACR;AAHT;AAKH;;AACD,SAAKe,OAAL;AAAa;AACT,iCACOO,KADP;AAEIf,UAAAA,UAAU,EAAC,KAFf;AAGIC,UAAAA,IAAI,EAAC;AAHT;AAKH;;AACD,SAAKE,OAAL;AAAa;AACT,iCACOY,KADP;AAEIjB,UAAAA,UAAU,EAACkB,MAAM,CAACN;AAFtB;AAIH;;AAED,SAAKJ,cAAL;AAAoB;AAChB,iCACOS,KADP;AAEIf,UAAAA,UAAU,EAAC,IAFf;AAGIC,UAAAA,IAAI,EAACR,SAHT;AAIIS,UAAAA,aAAa,EAAE;AAJnB;AAQH;;AAGD;AAAU;AACN,iCACOa,KADP;AAGH;AAvCL;AA4CH,CA9CD;;AAkDA,eAAeD,OAAf","sourcesContent":["//user의 store \r\n\r\n//초기 state\r\nconst dummyUser = {\r\n    nickname:'정준일', \r\n    Post:['정','준'],\r\n    Followings:['정','준'],\r\n    Followers:['정','준'],\r\n    signUpData:{},\r\n    \r\n}\r\nexport const initialState = {\r\n\r\n    isLoggedIn : false, \r\n    user: null, \r\n    successMesage: '', \r\n};\r\n\r\nexport const SIGN_UP='SIGN_UP'; \r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS'; \r\n \r\nexport const LOG_IN = 'LOG_IN'; \r\nexport const LOG_IN_SUCCESS = 'LOGIN_SUCCESS'; \r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; \r\n\r\nexport const LOG_OUT = 'LOG_OUT'; \r\n\r\n\r\n//실제 액션 \r\nexport const signUpAction = (data) =>{\r\n//action에 넣을 데이터가 동적인 경우 action을 함수로 만들어야 한다. \r\n    return {\r\n        type:SIGN_UP,\r\n        data:data,\r\n    };\r\n\r\n}\r\nexport const loginAction = {\r\n    type:LOG_IN,\r\n    data:{\r\n        nickname:'주닐정', \r\n    }, \r\n}\r\n\r\nexport const logOutAction = {\r\n    type:LOG_OUT,\r\n}\r\n\r\nconst reducer = (state = initialState , action)=>{\r\n\r\n    switch(action.type){\r\n        \r\n        case LOG_IN:{\r\n            return {\r\n                ...state,\r\n                isLoggedIn:true,\r\n                user:dummyUser,\r\n            };\r\n        }\r\n        case LOG_OUT:{\r\n            return {\r\n                ...state,\r\n                isLoggedIn:false,\r\n                user:null,\r\n            }\r\n        }\r\n        case SIGN_UP:{\r\n            return{\r\n                ...state,\r\n                signUpData:action.data,\r\n            }\r\n        }\r\n\r\n        case LOG_IN_SUCCESS:{\r\n            return {\r\n                ...state,\r\n                isLoggedIn:true,\r\n                user:dummyUser,\r\n                successMesage :'로그인에 성공하였습니다.', \r\n\r\n\r\n            }\r\n        }\r\n\r\n\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default reducer; "]},"metadata":{},"sourceType":"module"}