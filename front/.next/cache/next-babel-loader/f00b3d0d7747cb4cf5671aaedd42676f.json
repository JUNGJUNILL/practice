{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, Input, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpend = _useState[0],\n      setCommentFormOpend = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpend(function (preve) {\n      return !preve;\n    });\n\n    if (!commentFormOpend) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]); //댓글을 쓰고 새로 load해야 할 터이니...\n\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card //key={post.}\n  , {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      onClick: onRetweet\n    }), __jsx(HeartOutlined, {\n      onClick: onToggleLike\n    }), __jsx(MessageOutlined, {\n      onClick: onToggleComment\n    }), __jsx(EllipsisOutlined, null)],\n    title: post.RetweetId && post.Retweet ? \"\".concat(post.User.nickname, \" \\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : '',\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(function (v) {\n      return v.id === post.User.id;\n    }) ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id)\n    }, \"\\uD314\\uB85C\\uC6B0 \\uCDE8\\uC18C\") : __jsx(Button, {\n      onClick: onFollow(post.User.id)\n    }, \"\\uD314\\uB85C\\uC6B0\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"user/\".concat(post.User.id)\n      /*href={`/user/${post.User.id}`}*/\n\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    }) //next 사용시 <a> 태그 말고 Link 를 사용해야 한다.\n\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"user/\".concat(post.User.id)\n      /*href={`/user/${post.User.id}`}*/\n\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    }) //next 사용시 <a> 태그 말고 Link 를 사용해야 한다.\n\n  })), commentFormOpend && __jsx(React.Fragment, null, __jsx(Form, {\n    onFinish: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\\uB313\\uAE00 \".concat(post.Comments ? post.Comments.length : 0),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  //shape을 써서 객체의 각 props의 상세 타입을 지정할 수 있다.\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    images: PropTypes.array // createdAt:PropTypes.object\n\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["D:/git Repository/practice/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","Form","Input","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","PropTypes","Link","PostImages","PostCardContent","useDispatch","useSelector","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_REQUEST","RETWEET_REQUEST","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","PostCard","post","commentFormOpend","setCommentFormOpend","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","preve","type","data","onSubmitComment","e","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","onUnfollow","userId","onFollow","Images","RetweetId","Retweet","User","nickname","Followings","pathname","query","Comments","length","item","propTypes","shape","object","string","images","array"],"mappings":"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","sourcesContent":["\r\nimport React,{useState,useCallback,useEffect}  from 'react'\r\nimport {Card , Button, Avatar,Form, Input, List, Comment}from 'antd'\r\nimport {\r\n    RetweetOutlined, \r\n    HeartOutlined,\r\n    MessageOutlined  ,\r\n    EllipsisOutlined ,\r\n} from '@ant-design/icons';\r\n\r\nimport PropTypes from 'prop-types'\r\nimport Link from 'next/link'\r\nimport PostImages from './PostImages'; \r\nimport PostCardContent from './PostCardContent'; \r\n\r\n\r\nimport {useDispatch ,useSelector} from 'react-redux'\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport {FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST} from '../reducers/user';\r\n\r\nconst PostCard = ({post}) =>{\r\n    \r\n    const [commentFormOpend,setCommentFormOpend] = useState(false); \r\n    const [commentText, setCommentText] = useState(''); \r\n    const { me } = useSelector(state=> state.user); \r\n    const {commentAdded, isAddingComment}  = useSelector(state=>state.post); \r\n    const dispatch = useDispatch(); \r\n\r\n    const liked =me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n    const onToggleComment = useCallback(() =>{\r\n        setCommentFormOpend(preve => !preve); \r\n        if(!commentFormOpend){\r\n            dispatch({\r\n                type:LOAD_COMMENTS_REQUEST,\r\n                data:post.id,\r\n            });\r\n        }\r\n    },[]);\r\n\r\n    const onSubmitComment =useCallback((e)=>{\r\n        \r\n        if(!me){\r\n            return alert('로그인이 필요합니다.'); \r\n        }\r\n        \r\n        return dispatch({type:ADD_COMMENT_REQUEST,\r\n                         data:{\r\n                            postId:post.id,\r\n                            content:commentText,\r\n                         }\r\n        })\r\n\r\n    },[me && me.id,commentText]); \r\n    \r\n        //댓글을 쓰고 새로 load해야 할 터이니...\r\n        useEffect(()=>{\r\n            setCommentText('');\r\n        },[commentAdded ===true]); \r\n\r\n    const onChangeCommentText = useCallback((e)=>{\r\n        setCommentText(e.target.value); \r\n    },[]); \r\n\r\n\r\n    const onToggleLike = useCallback(() => {\r\n        if (!me) {\r\n          return alert('로그인이 필요합니다!');\r\n        }\r\n\r\n        if (liked) { // 좋아요 누른 상태\r\n          dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id,\r\n          });\r\n\r\n        } else { // 좋아요 안 누른 상태\r\n          dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n          });\r\n        }\r\n      }, [me && me.id, post && post.id, liked]);\r\n\r\n\r\n      const onRetweet = useCallback(()=>{\r\n\r\n          if (!me) {\r\n            return alert('로그인이 필요합니다!');\r\n          }\r\n  \r\n\r\n        return  dispatch({\r\n            type : RETWEET_REQUEST,\r\n            data : post.id,\r\n        });\r\n\r\n\r\n      },[me && me.id , post && post.id]);\r\n\r\n\r\n      const onUnfollow = useCallback(userId=>()=>{\r\n            dispatch({\r\n                type : UNFOLLOW_USER_REQUEST,\r\n                data : userId,\r\n            })\r\n      },[])\r\n\r\n      const onFollow  = useCallback(userId=>()=>{\r\n\r\n        dispatch({\r\n            type : FOLLOW_USER_REQUEST,\r\n            data : userId,\r\n        })\r\n\r\n    },[])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <Card\r\n            //key={post.}\r\n            cover={post.Images[0] && <PostImages images={post.Images} />}\r\n            actions={[\r\n                <RetweetOutlined onClick={onRetweet} />,\r\n                <HeartOutlined onClick={onToggleLike} />,\r\n                <MessageOutlined  onClick={onToggleComment} />,\r\n                <EllipsisOutlined />,\r\n            ]}\r\n            title={post.RetweetId && post.Retweet ? `${post.User.nickname} 님이 리트윗하셨습니다.` : ''}\r\n            extra={!me || post.User.id === me.id ?\r\n                null \r\n                : me.Followings && me.Followings.find(v=> v.id === post.User.id) ?\r\n                 <Button onClick={onUnfollow(post.User.id)}>팔로우 취소</Button>\r\n                :<Button onClick={onFollow(post.User.id)}>팔로우</Button>\r\n               \r\n                \r\n                 }\r\n             >\r\n\r\n             {post.RetweetId && post.Retweet ?\r\n               ( \r\n                <Card\r\n                        cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n                >\r\n                    <Card.Meta \r\n                    \r\n                    avatar={<Link href={{pathname:'/user', query:{id : post.User.id} }} as={`user/${post.User.id}`}/*href={`/user/${post.User.id}`}*/><a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>}\r\n                    title={post.Retweet.User.nickname}\r\n                    description={<PostCardContent postData={post.Retweet.content}/>}\r\n                    //next 사용시 <a> 태그 말고 Link 를 사용해야 한다.\r\n                    />\r\n                </Card>\r\n               )\r\n\r\n            :( \r\n            <Card.Meta \r\n                avatar={<Link href={{pathname:'/user', query:{id : post.User.id} }} as={`user/${post.User.id}`}/*href={`/user/${post.User.id}`}*/><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                title={post.User.nickname}\r\n                description={<PostCardContent postData={post.content}/>}\r\n                //next 사용시 <a> 태그 말고 Link 를 사용해야 한다.\r\n            />\r\n            )}\r\n        </Card>\r\n        {commentFormOpend && (\r\n            <>\r\n            <Form onFinish={onSubmitComment}>\r\n                <Form.Item>\r\n                    <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText}/>\r\n                </Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n            </Form>\r\n            <List \r\n                 header={`댓글 ${post.Comments? post.Comments.length : 0 }`}\r\n                 itemLayout=\"horizontal\"\r\n                 dataSource={post.Comments || []}\r\n                 renderItem={item=>(\r\n                     <li>\r\n                      <Comment \r\n                        author={item.User.nickname}\r\n                        avatar={<Link href={{pathname:'/user', query:{id : item.User.id} }} as={`user/${item.User.id}` }><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                        content={item.content}\r\n                      />\r\n                      </li>\r\n                 )}\r\n            />\r\n            </>\r\n\r\n        )}\r\n        </div>\r\n    )\r\n     \r\n}\r\n\r\nPostCard.propTypes = {\r\n                    //shape을 써서 객체의 각 props의 상세 타입을 지정할 수 있다.\r\n    post : PropTypes.shape({\r\n            User: PropTypes.object,\r\n            content : PropTypes.string,\r\n            images:PropTypes.array,\r\n           // createdAt:PropTypes.object\r\n    })\r\n}\r\n\r\nexport default PostCard;    "]},"metadata":{},"sourceType":"module"}