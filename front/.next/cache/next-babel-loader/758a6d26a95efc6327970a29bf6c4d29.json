{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, Input, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpend = _useState[0],\n      setCommentFormOpend = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpend(function (preve) {\n      return !preve;\n    });\n\n    if (!commentFormOpend) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]); //댓글을 쓰고 새로 load해야 할 터이니...\n\n  useEffect(function () {\n    console.log('post===>', post);\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card //key={post.}\n  , {\n    cover: post.Images[0] && __jsx(\"img\", {\n      alt: \"example\",\n      src: 'http://http://captainryan.gonetis.com:3065/' + post.Images[0].src,\n      style: {\n        width: '100px'\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, null), __jsx(HeartOutlined, null), __jsx(MessageOutlined, {\n      onClick: onToggleComment\n    }), __jsx(EllipsisOutlined, null)],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"user/\".concat(post.User.id)\n      /*href={`/user/${post.User.id}`}*/\n\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.replace(/#/g, \"\")\n            }\n          },\n          as: \"hashtag/\".concat(v.replace(/#/g, \"\"))\n          /*href={`/hashtag/${v.replace(/#/g,\"\")}`}*/\n          ,\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    })) //next 사용시 <a> 태그 말고 Link 를 사용해야 한다.\n\n  })), commentFormOpend && __jsx(React.Fragment, null, __jsx(Form, {\n    onFinish: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\\uB313\\uAE00 \".concat(post.Comments ? post.Comments.length : 0),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  //shape을 써서 객체의 각 props의 상세 타입을 지정할 수 있다.\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string // createdAt:PropTypes.object\n\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["D:/git Repository/practice/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","Form","Input","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","PropTypes","Link","useDispatch","useSelector","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","PostCard","post","commentFormOpend","setCommentFormOpend","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onToggleComment","preve","type","data","id","onSubmitComment","e","alert","postId","content","console","log","onChangeCommentText","target","value","Images","src","width","pathname","query","User","nickname","split","map","v","match","tag","replace","Comments","length","item","propTypes","shape","object","string","img"],"mappings":"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","sourcesContent":["\r\nimport React,{useState,useCallback,useEffect}  from 'react'\r\nimport {Card , Button, Avatar,Form, Input, List, Comment}from 'antd'\r\nimport {RetweetOutlined ,\r\n        HeartOutlined ,\r\n        MessageOutlined,\r\n        EllipsisOutlined \r\n} from '@ant-design/icons';\r\nimport PropTypes from 'prop-types'\r\nimport Link from 'next/link'\r\n\r\nimport {useDispatch ,useSelector} from 'react-redux'\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({post}) =>{\r\n    \r\n    const [commentFormOpend,setCommentFormOpend] = useState(false); \r\n    const [commentText, setCommentText] = useState(''); \r\n    const { me } = useSelector(state=> state.user); \r\n    const {commentAdded, isAddingComment}  = useSelector(state=>state.post); \r\n    const dispatch = useDispatch(); \r\n\r\n    const onToggleComment = useCallback(() =>{\r\n        setCommentFormOpend(preve => !preve); \r\n        if(!commentFormOpend){\r\n            dispatch({\r\n                type:LOAD_COMMENTS_REQUEST,\r\n                data:post.id,\r\n            });\r\n        }\r\n    },[]);\r\n\r\n    const onSubmitComment =useCallback((e)=>{\r\n        \r\n        if(!me){\r\n            return alert('로그인이 필요합니다.'); \r\n        }\r\n        \r\n        return dispatch({type:ADD_COMMENT_REQUEST,\r\n                         data:{\r\n                            postId:post.id,\r\n                            content:commentText,\r\n                         }\r\n        })\r\n\r\n    },[me && me.id,commentText]); \r\n    \r\n        //댓글을 쓰고 새로 load해야 할 터이니...\r\n        useEffect(()=>{\r\n            console.log('post===>' , post); \r\n            setCommentText('');\r\n        },[commentAdded ===true]); \r\n\r\n    const onChangeCommentText = useCallback((e)=>{\r\n        setCommentText(e.target.value); \r\n    },[]); \r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <Card\r\n            //key={post.}\r\n            cover={post.Images[0] && <img alt=\"example\" src={'http://http://captainryan.gonetis.com:3065/'+post.Images[0].src} style={{width:'100px'}}/>}\r\n            actions={[\r\n                <RetweetOutlined />,\r\n                <HeartOutlined />,\r\n                <MessageOutlined  onClick={onToggleComment} />,\r\n                <EllipsisOutlined />,\r\n            ]}\r\n            extra={<Button>팔로우</Button>}\r\n             >\r\n            <Card.Meta \r\n                avatar={<Link href={{pathname:'/user', query:{id : post.User.id} }} as={`user/${post.User.id}`}/*href={`/user/${post.User.id}`}*/><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                title={post.User.nickname}\r\n                description={(<div>{post.content.split(/(#[^\\s]+)/g).map((v)=>{\r\n                    if(v.match(/#[^\\s]+/)){\r\n                        return(\r\n                            <Link href={{pathname:'/hashtag', query:{tag : v.replace(/#/g,\"\")}}} as={`hashtag/${v.replace(/#/g,\"\")}`}/*href={`/hashtag/${v.replace(/#/g,\"\")}`}*/ key={v}><a>{v}</a></Link>\r\n                        );\r\n                    }\r\n                  \r\n                        return v; \r\n                  \r\n                })}</div>\r\n                )}\r\n                //next 사용시 <a> 태그 말고 Link 를 사용해야 한다.\r\n            />\r\n        </Card>\r\n        {commentFormOpend && (\r\n            <>\r\n            <Form onFinish={onSubmitComment}>\r\n                <Form.Item>\r\n                    <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText}/>\r\n                </Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n            </Form>\r\n            <List \r\n                 header={`댓글 ${post.Comments? post.Comments.length : 0 }`}\r\n                 itemLayout=\"horizontal\"\r\n                 dataSource={post.Comments || []}\r\n                 renderItem={item=>(\r\n                     <li>\r\n                      <Comment \r\n                        author={item.User.nickname}\r\n                        avatar={<Link href={{pathname:'/user', query:{id : item.User.id} }} as={`user/${item.User.id}` }><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                        content={item.content}\r\n                      />\r\n                      </li>\r\n                 )}\r\n            />\r\n            </>\r\n\r\n        )}\r\n        </div>\r\n    )\r\n     \r\n}\r\n\r\nPostCard.propTypes = {\r\n                    //shape을 써서 객체의 각 props의 상세 타입을 지정할 수 있다.\r\n    post : PropTypes.shape({\r\n            User: PropTypes.object,\r\n            content : PropTypes.string,\r\n            img:PropTypes.string,\r\n           // createdAt:PropTypes.object\r\n    })\r\n}\r\n\r\nexport default PostCard; "]},"metadata":{},"sourceType":"module"}