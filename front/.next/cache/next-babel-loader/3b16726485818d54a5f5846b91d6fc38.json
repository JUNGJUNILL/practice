{"ast":null,"code":"import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'; //call : 함수 동기적 호출 \n//fort : 함수 비동기적 호출 \n//put  : 액션 , dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction* loginAPI() {//서버에 요청하는 부분 \n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN, login); //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \n  // dispatch될 때 login 제너레이터를 호출한다. \n}\n\nfunction* helloSaga() {\n  yield take(HELLO_SAGA);\n  console.log('hello saga');\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), helloSaga()]);\n}","map":{"version":3,"sources":["C:/git Repository/practice/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","login","type","e","console","error","watchLogin","helloSaga","log","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,IAA1C,QAAqD,oBAArD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD,C,CAEA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,UAAUC,QAAV,GAAoB,CACpB;AAEC;;AAED,UAAUC,KAAV,GAAiB;AAEb,MAAG;AAEC,UAAMR,IAAI,CAACO,QAAD,CAAV;AACA,UAAMN,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMM,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT;AAGH;AAEJ;;AAED,UAAUQ,UAAV,GAAsB;AAClB,QAAMd,UAAU,CAACI,MAAD,EAAQK,KAAR,CAAhB,CADkB,CAEZ;AACA;AAET;;AAED,UAAUM,SAAV,GAAqB;AACjB,QAAMZ,IAAI,CAACI,UAAD,CAAV;AACAK,EAAAA,OAAO,CAACI,GAAR,CAAY,YAAZ;AAGH;;AAED,eAAe,UAAUC,QAAV,GAAqB;AAEnC,QAAMnB,GAAG,CAAC,CACNC,IAAI,CAACe,UAAD,CADE,EAENC,SAAS,EAFH,CAAD,CAAT;AAKA","sourcesContent":["import {all ,fork, takeLatest, call, put, take }from 'redux-saga/effects'; \r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\n//call : 함수 동기적 호출 \r\n//fort : 함수 비동기적 호출 \r\n//put  : 액션 , dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\nfunction* loginAPI(){\r\n//서버에 요청하는 부분 \r\n\r\n}\r\n\r\nfunction* login(){\r\n\r\n    try{\r\n        \r\n        yield call(loginAPI); \r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN,login); \r\n          //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \r\n          // dispatch될 때 login 제너레이터를 호출한다. \r\n\r\n}\r\n\r\nfunction* helloSaga(){\r\n    yield take(HELLO_SAGA); \r\n    console.log('hello saga'); \r\n \r\n\r\n}\r\n\r\nexport default function* userSaga() {\r\n\r\n yield all([\r\n     fork(watchLogin),\r\n     helloSaga(), \r\n ]); \r\n\r\n}"]},"metadata":{},"sourceType":"module"}