{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay, takeEvery, take } from 'redux-saga/effects'; //이 외에도\n// race, cancel, select, throttle, debounce 등 도 있다. \n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from '../reducers/user';\nimport axios from 'axios'; //call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\n//fort : 함수 비동기적 호출  \n//---------------------------둘 다 함수를 실행시켜준다.\n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n\nexport const HELLO_SAGA = 'HELLO_SAGA'; //-----------------------------------API\n\nfunction* loginAPI(loginData) {\n  //서버에 요청하는 부분 \n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n} //▲백엔드와 프론트간에 쿠키를 주고 받을 수 있다.\n\n\nfunction* signUpAPI(signUpData) {\n  return axios.post('/user/signUp', signUpData, {\n    withCredentials: true\n  });\n}\n\nfunction* logoutAPI() {\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  }); //▲데이터 없더라도 빈 객체라도 보내야 한다.\n}\n\nfunction* loadUserAPI() {\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n} //-----------------------------------END API\n//-----------------------------------WATCH\n\n\nfunction* watchLogin() {\n  console.log('watchLogin');\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchLogout() {\n  console.log('watchLogout');\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n} //-----------------------------------END WATCH \n\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    const loginInfo = yield result.then(resolve => {\n      return resolve.data;\n    });\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: loginInfo\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* logout() {\n  try {\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserAPI);\n    const userData = yield result.then(resolve => {\n      return resolve.data;\n    });\n    console.log('userData==>', userData);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: userData\n    });\n  } catch (e) {\n    console.log('eeee==>', e);\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* hello() {\n  yield delay(1000);\n  yield put({\n    type: 'Bye Saga'\n  });\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, hello);\n} //이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \n// function* watchHello(){\n//     console.log('before saga'); \n//     while(true){\n//         yield take(HELLO_SAGA); \n//         console.log('hello saga'); \n//     }\n// }\n\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser), //fork(watchHello),\n  fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","delay","takeEvery","take","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","LOG_OUT_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","axios","HELLO_SAGA","loginAPI","loginData","post","withCredentials","signUpAPI","signUpData","logoutAPI","loadUserAPI","get","watchLogin","console","log","login","watchSignUp","signUp","watchLogout","logout","watchLoadUser","loadUser","action","result","data","loginInfo","then","resolve","type","e","error","userData","hello","watchHello","userSaga"],"mappings":"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","sourcesContent":["import {all ,fork, takeLatest, call, put, delay,takeEvery,take }from 'redux-saga/effects'; \r\n//이 외에도\r\n// race, cancel, select, throttle, debounce 등 도 있다. \r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\n//call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\r\n//fort : 함수 비동기적 호출  \r\n//---------------------------둘 다 함수를 실행시켜준다.\r\n\r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\n\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\n\r\n//-----------------------------------API\r\nfunction* loginAPI(loginData){\r\n//서버에 요청하는 부분 \r\n    return axios.post('/user/login',loginData,{withCredentials:true}); \r\n}\r\n                                                                                          //▲백엔드와 프론트간에 쿠키를 주고 받을 수 있다.\r\n                                                                               \r\nfunction* signUpAPI(signUpData){\r\n    \r\n    return axios.post('/user/signUp',signUpData,{withCredentials:true}); \r\n}        \r\n\r\n\r\nfunction* logoutAPI(){\r\n\r\n    return axios.post('/user/logout',{},{withCredentials:true});\r\n                                    //▲데이터 없더라도 빈 객체라도 보내야 한다.\r\n}\r\n\r\nfunction* loadUserAPI(){\r\n\r\n    return axios.get('/user/',{withCredentials:true}); \r\n}\r\n//-----------------------------------END API\r\n\r\n\r\n//-----------------------------------WATCH\r\nfunction* watchLogin(){\r\n    console.log('watchLogin'); \r\n    yield takeEvery(LOG_IN_REQUEST,login); \r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST,signUp)\r\n}\r\n\r\nfunction* watchLogout(){\r\n    console.log('watchLogout'); \r\n    yield takeEvery(LOG_OUT_REQUEST,logout); \r\n}\r\n\r\nfunction* watchLoadUser(){\r\n    yield takeLatest(LOAD_USER_REQUEST,loadUser); \r\n}\r\n//-----------------------------------END WATCH \r\n\r\nfunction* login(action){\r\n   \r\n  \r\n    try{\r\n        \r\n         const result    = yield call(loginAPI,action.data);  \r\n         const loginInfo = yield result.then((resolve)=>{\r\n            \r\n            return resolve.data; \r\n            \r\n         }); \r\n\r\n       \r\n        yield  put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: loginInfo,\r\n        });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* signUp(action){\r\n\r\n    try{\r\n    \r\n        yield call(signUpAPI,action.data);  \r\n        \r\n      \r\n\r\n        yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* logout(){\r\n\r\n    try{\r\n\r\n        yield call(logoutAPI); \r\n        yield put({\r\n            type:LOG_OUT_SUCCESS, \r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_OUT_FAILURE, \r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* loadUser(){\r\n\r\n    try{\r\n\r\n      \r\n        const result   = yield call(loadUserAPI);  \r\n        const userData = yield result.then((resolve)=>{\r\n            return resolve.data; \r\n        }); \r\n        console.log('userData==>' , userData); \r\n        yield put({\r\n                type: LOAD_USER_SUCCESS,\r\n                data: userData, \r\n            })\r\n\r\n    }catch(e){\r\n        console.log('eeee==>', e); \r\n        console.error(e); \r\n\r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n            error:e,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction* hello(){\r\n\r\n    yield delay(1000); \r\n    yield put({\r\n        type:'Bye Saga'\r\n    })\r\n}\r\n\r\nfunction* watchHello(){\r\n     yield takeLatest(HELLO_SAGA, hello); \r\n}\r\n//이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \r\n// function* watchHello(){\r\n//     console.log('before saga'); \r\n//     while(true){\r\n//         yield take(HELLO_SAGA); \r\n//         console.log('hello saga'); \r\n//     }\r\n// }\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        fork(watchLogin), \r\n        fork(watchLogout),\r\n        fork(watchLoadUser), \r\n        //fork(watchHello),\r\n        fork(watchSignUp),\r\n        \r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}