{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay, takeEvery, take } from 'redux-saga/effects'; //이 외에도\n// race, cancel, select, throttle, debounce 등 도 있다. \n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, FOLLOW_USER_FAILURE, UNFOLLOW_USER_SUCCESS, UNFOLLOW_USER_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_FAILURE } from '../reducers/user';\nimport axios from 'axios'; //call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\n//fort : 함수 비동기적 호출  \n//---------------------------둘 다 함수를 실행시켜준다.\n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n\nexport const HELLO_SAGA = 'HELLO_SAGA'; //-----------------------------------API\n\nfunction* loginAPI(loginData) {\n  //서버에 요청하는 부분 \n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n} //▲백엔드와 프론트간에 쿠키를 주고 받을 수 있다.\n\n\nfunction* signUpAPI(signUpData) {\n  return axios.post('/user/signUp', signUpData, {\n    withCredentials: true\n  });\n}\n\nfunction* logoutAPI() {\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  }); //▲POST로 보낼 때, 데이터 없더라도 빈 객체라도 보내야 한다.\n} // function* loadUserAPI(userId){\n//     return axios.get(userId? `/user/${userId}`:'/user/',{withCredentials:true}); \n// }\n\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* followAPI(userId) {\n  return axios.post(`/user/${userId}/follow`, {}, {\n    withCredentials: true\n  }); //▲post인 경우 데이터 없더라도 빈 객체라도 보내야 한다.\n}\n\nfunction* unFollowAPI(userId) {\n  return axios.delete(`/user/${userId}/follow`, {\n    withCredentials: true\n  });\n} //-----------------------------------END API\n//-----------------------------------WATCH\n\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction* watchFollowUser() {\n  yield takeEvery(FOLLOW_USER_REQUEST, follow);\n}\n\nfunction* watchUnFollowUser() {\n  yield takeLatest(UNFOLLOW_USER_REQUEST, unFollow);\n} //-----------------------------------END WATCH \n\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    const loginInfo = yield result.then(resolve => {\n      return resolve.data;\n    });\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: loginInfo\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* logout() {\n  try {\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* follow(action) {\n  try {\n    const result = yield call(followAPI, action.data);\n    console.log('result==>', result);\n    const followInfo = yield result.then(resolve => {\n      return resolve.data;\n    });\n    console.log('followInfo==>', followInfo);\n    yield put({\n      type: FOLLOW_USER_SUCCESS,\n      data: followInfo\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: FOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* unFollow(action) {\n  try {\n    const result = yield call(unFollowAPI, action.data);\n    const unFollowInfo = yield result.then(resolve => {\n      return resolve.data;\n    });\n    yield put({\n      type: UNFOLLOW_USER_SUCCESS,\n      data: unFollowInfo\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNFOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* hello() {\n  yield delay(1000);\n  yield put({\n    type: 'Bye Saga'\n  });\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, hello);\n} //이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \n// function* watchHello(){\n//     console.log('before saga'); \n//     while(true){\n//         yield take(HELLO_SAGA); \n//         console.log('hello saga'); \n//     }\n// }\n\n\nfunction* loadFollowersAPI(userId) {\n  return axios.get(`/user/${userId}/followers`, {\n    withCredentials: true\n  }); //▲post인 경우 데이터 없더라도 빈 객체라도 보내야 한다.\n}\n\nfunction* loadFollowers(action) {\n  try {\n    const result = yield call(loadFollowersAPI, action.data);\n    yield put({\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeLatest(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction* loadFollowingsAPI(userId) {\n  return axios.get(`/user/${userId}/followings`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowings(action) {\n  try {\n    const result = yield call(loadFollowingsAPI, action.data);\n    yield put({\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowings() {\n  yield takeLatest(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction* watchRemoveFollower() {}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser), //fork(watchHello),\n  fork(watchSignUp), fork(watchFollowUser), fork(watchUnFollowUser), fork(watchLoadFollowers), fork(watchLoadFollowings), fork(watchRemoveFollower)]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","delay","takeEvery","take","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","LOG_OUT_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","axios","HELLO_SAGA","loginAPI","loginData","post","withCredentials","signUpAPI","signUpData","logoutAPI","loadUserAPI","userId","get","followAPI","unFollowAPI","delete","watchLogin","login","watchSignUp","signUp","watchLogout","logout","watchLoadUser","loadUser","watchFollowUser","follow","watchUnFollowUser","unFollow","action","result","data","loginInfo","then","resolve","type","e","console","error","me","log","followInfo","unFollowInfo","hello","watchHello","loadFollowersAPI","loadFollowers","watchLoadFollowers","loadFollowingsAPI","loadFollowings","watchLoadFollowings","watchRemoveFollower","userSaga"],"mappings":"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","sourcesContent":["import {all ,fork, takeLatest, call, put, delay,takeEvery,take }from 'redux-saga/effects'; \r\n//이 외에도\r\n// race, cancel, select, throttle, debounce 등 도 있다. \r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, FOLLOW_USER_FAILURE, UNFOLLOW_USER_SUCCESS, UNFOLLOW_USER_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_FAILURE } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\n//call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\r\n//fort : 함수 비동기적 호출  \r\n//---------------------------둘 다 함수를 실행시켜준다.\r\n\r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\n\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\n\r\n//-----------------------------------API\r\nfunction* loginAPI(loginData){\r\n//서버에 요청하는 부분 \r\n    return axios.post('/user/login',loginData,{withCredentials:true}); \r\n}\r\n                                                                                          //▲백엔드와 프론트간에 쿠키를 주고 받을 수 있다.\r\n                                                                               \r\nfunction* signUpAPI(signUpData){\r\n    \r\n    return axios.post('/user/signUp',signUpData,{withCredentials:true}); \r\n}        \r\n\r\n\r\nfunction* logoutAPI(){\r\n\r\n    return axios.post('/user/logout',{},{withCredentials:true});\r\n                                    //▲POST로 보낼 때, 데이터 없더라도 빈 객체라도 보내야 한다.\r\n}\r\n\r\n// function* loadUserAPI(userId){\r\n    \r\n//     return axios.get(userId? `/user/${userId}`:'/user/',{withCredentials:true}); \r\n// }\r\n\r\nfunction loadUserAPI(userId) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\r\n    withCredentials: true,\r\n  });\r\n  }\r\n\r\nfunction* followAPI(userId){\r\n\r\n    return axios.post(`/user/${userId}/follow`,{},{withCredentials:true});\r\n                                             //▲post인 경우 데이터 없더라도 빈 객체라도 보내야 한다.\r\n}\r\n\r\nfunction* unFollowAPI(userId){\r\n\r\n    return axios.delete(`/user/${userId}/follow`, {\r\n        withCredentials: true,\r\n      });}\r\n//-----------------------------------END API\r\n\r\n\r\n//-----------------------------------WATCH\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOG_IN_REQUEST,login); \r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST,signUp)\r\n}\r\n\r\nfunction* watchLogout(){\r\n    yield takeEvery(LOG_OUT_REQUEST,logout); \r\n}\r\n\r\nfunction* watchLoadUser(){\r\n    yield takeEvery(LOAD_USER_REQUEST,loadUser); \r\n    \r\n}\r\n\r\n\r\nfunction* watchFollowUser(){\r\n\r\n    yield takeEvery(FOLLOW_USER_REQUEST,follow); \r\n}\r\n\r\nfunction* watchUnFollowUser(){\r\n    yield takeLatest(UNFOLLOW_USER_REQUEST,unFollow); \r\n}\r\n\r\n\r\n//-----------------------------------END WATCH \r\n\r\nfunction* login(action){\r\n   \r\n  \r\n    try{\r\n        \r\n         const result    = yield call(loginAPI,action.data);  \r\n         const loginInfo = yield result.then((resolve)=>{\r\n            \r\n            return resolve.data; \r\n            \r\n         }); \r\n\r\n       \r\n        yield  put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: loginInfo,\r\n        });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* signUp(action){\r\n\r\n    try{\r\n    \r\n       const result =  yield call(signUpAPI,action.data); \r\n        yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* logout(){\r\n\r\n    try{\r\n\r\n        yield call(logoutAPI); \r\n        yield put({\r\n            type:LOG_OUT_SUCCESS, \r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_OUT_FAILURE, \r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* loadUser(action){\r\n\r\n    try{\r\n   \r\n        const result   = yield call(loadUserAPI,action.data);  \r\n\r\n        yield put({\r\n                type: LOAD_USER_SUCCESS,\r\n                data: result.data,\r\n                me: !action.data,\r\n            })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n\r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n            error:e,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction* follow(action){\r\n\r\n    try{\r\n\r\n      \r\n        const result   = yield call(followAPI,action.data);  \r\n\r\n        console.log('result==>',result); \r\n        const followInfo = yield result.then((resolve)=>{\r\n            \r\n            return resolve.data; \r\n         }); \r\n\r\n            console.log('followInfo==>',followInfo); \r\n        yield put({\r\n                type: FOLLOW_USER_SUCCESS,\r\n                data: followInfo, \r\n\r\n            })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n\r\n        yield put({\r\n            type:FOLLOW_USER_FAILURE,\r\n            error:e,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction* unFollow(action){\r\n\r\n    try{\r\n\r\n      \r\n        const result   = yield call(unFollowAPI,action.data);  \r\n        const unFollowInfo = yield result.then((resolve)=>{\r\n            \r\n            return resolve.data; \r\n         }); \r\n\r\n        yield put({\r\n                type: UNFOLLOW_USER_SUCCESS,\r\n                data: unFollowInfo, \r\n\r\n            })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n\r\n        yield put({\r\n            type:UNFOLLOW_USER_FAILURE,\r\n            error:e,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction* hello(){\r\n\r\n    yield delay(1000); \r\n    yield put({\r\n        type:'Bye Saga'\r\n    })\r\n}\r\n\r\nfunction* watchHello(){\r\n     yield takeLatest(HELLO_SAGA, hello); \r\n}\r\n//이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \r\n// function* watchHello(){\r\n//     console.log('before saga'); \r\n//     while(true){\r\n//         yield take(HELLO_SAGA); \r\n//         console.log('hello saga'); \r\n//     }\r\n// }\r\n\r\nfunction* loadFollowersAPI(userId){\r\n\r\n    return axios.get(`/user/${userId}/followers`,{withCredentials:true});\r\n                                             //▲post인 경우 데이터 없더라도 빈 객체라도 보내야 한다.\r\n}\r\n\r\n\r\n\r\n\r\nfunction* loadFollowers(action){\r\n\r\n    try{\r\n\r\n      \r\n        const result   = yield call(loadFollowersAPI,action.data);  \r\n\r\n        yield put({\r\n                type: LOAD_FOLLOWERS_SUCCESS,\r\n                data: result.data, \r\n\r\n            })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n\r\n        yield put({\r\n            type:LOAD_FOLLOWERS_FAILURE,\r\n            error:e,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction* watchLoadFollowers(){\r\n\r\n    yield takeLatest(LOAD_FOLLOWERS_REQUEST,loadFollowers)\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction* loadFollowingsAPI(userId){\r\n\r\n\r\n    return axios.get(`/user/${userId}/followings`, {\r\n    withCredentials: true,\r\n    });\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction* loadFollowings(action){\r\n\r\n    try{\r\n        const result   = yield call(loadFollowingsAPI,action.data);  \r\n        yield put({\r\n                type: LOAD_FOLLOWINGS_SUCCESS,\r\n                data: result.data, \r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_FOLLOWINGS_FAILURE,\r\n            error:e,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction* watchLoadFollowings(){\r\n\r\n    yield takeLatest(LOAD_FOLLOWINGS_REQUEST,loadFollowings); \r\n    \r\n}\r\n\r\n\r\nfunction* watchRemoveFollower(){\r\n\r\n}\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        fork(watchLogin), \r\n        fork(watchLogout),\r\n        fork(watchLoadUser), \r\n        //fork(watchHello),\r\n        fork(watchSignUp),\r\n        fork(watchFollowUser), \r\n        fork(watchUnFollowUser), \r\n        fork(watchLoadFollowers), \r\n        fork(watchLoadFollowings), \r\n        fork(watchRemoveFollower), \r\n        \r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}