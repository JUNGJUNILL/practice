{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginAPI),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(logoutAPI),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(signUpAPI),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(hello),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchHello),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, call, put, delay, takeEvery, take } from 'redux-saga/effects'; //이 외에도\n// race, cancel, select, throttle, debounce 등 도 있다. \n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE } from '../reducers/user';\nimport axios from 'axios'; //call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\n//fort : 함수 비동기적 호출  \n//---------------------------둘 다 함수를 실행시켜준다.\n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n\naxios.defaults.baseURL = 'http://captainryan.gonetis.com:3065/api';\nexport var HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI(loginData) {\n  return _regeneratorRuntime.wrap(function loginAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", axios.post('/user/login', loginData, {\n            withCredentials: true\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} //▲백엔드와 프론트간에 쿠키를 주고 받을 수 있다.\n\n\nfunction login(action) {\n  var result, loginInfo;\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return result.then(function (resolve) {\n            return resolve.data;\n          });\n\n        case 6:\n          loginInfo = _context2.sent;\n          _context2.next = 9;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: loginInfo\n          });\n\n        case 9:\n          _context2.next = 16;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 16;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 11]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('watchLogin');\n          _context3.next = 3;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction logoutAPI() {\n  return _regeneratorRuntime.wrap(function logoutAPI$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", axios.post('/user/logout'));\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 8;\n          break;\n\n        case 3:\n          _context5.prev = 3;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 8;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 3]]);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          console.log('watchLogout');\n          _context6.next = 3;\n          return takeEvery(LOG_OUT_REQUEST, logout);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction signUpAPI(signUpData) {\n  return _regeneratorRuntime.wrap(function signUpAPI$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          console.log('signUpData ==>', signUpData);\n          return _context7.abrupt(\"return\", axios.post('/api/user/', signUpData));\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          console.log('action.data-->' + action.data); //  yield call(signUpAPI);\n\n          _context8.next = 4;\n          return call(signUpAPI, action.data);\n\n        case 4:\n          _context8.next = 6;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 6:\n          _context8.next = 13;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction hello() {\n  return _regeneratorRuntime.wrap(function hello$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return delay(1000);\n\n        case 2:\n          _context10.next = 4;\n          return put({\n            type: 'Bye Saga'\n          });\n\n        case 4:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(HELLO_SAGA, hello);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n} //이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \n// function* watchHello(){\n//     console.log('before saga'); \n//     while(true){\n//         yield take(HELLO_SAGA); \n//         console.log('hello saga'); \n//     }\n// }\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), //fork(watchHello),\n          fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/user.js"],"names":["loginAPI","login","watchLogin","logoutAPI","logout","watchLogout","signUpAPI","signUp","watchSignUp","hello","watchHello","userSaga","all","fork","takeLatest","call","put","delay","takeEvery","take","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","LOG_OUT_REQUEST","LOG_OUT_FAILURE","axios","defaults","baseURL","HELLO_SAGA","loginData","post","withCredentials","action","data","result","then","resolve","loginInfo","type","console","error","log","signUpData"],"mappings":"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","sourcesContent":["import {all ,fork, takeLatest, call, put, delay,takeEvery,take }from 'redux-saga/effects'; \r\n//이 외에도\r\n// race, cancel, select, throttle, debounce 등 도 있다. \r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\n//call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\r\n//fort : 함수 비동기적 호출  \r\n//---------------------------둘 다 함수를 실행시켜준다.\r\n\r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\n axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api';\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\n\r\n\r\nfunction* loginAPI(loginData){\r\n//서버에 요청하는 부분 \r\n    return axios.post('/user/login',loginData,{withCredentials:true}); \r\n}                                                                                          //▲백엔드와 프론트간에 쿠키를 주고 받을 수 있다.\r\n\r\nfunction* login(action){\r\n   \r\n  \r\n    try{\r\n        \r\n         const result    = yield call(loginAPI,action.data);  \r\n         const loginInfo = yield result.then((resolve)=>{\r\n            \r\n            return resolve.data; \r\n            \r\n         }); \r\n\r\n       \r\n        yield  put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: loginInfo,\r\n        });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogin(){\r\n    console.log('watchLogin'); \r\n    yield takeEvery(LOG_IN_REQUEST,login); \r\n}\r\n\r\nfunction* logoutAPI(){\r\n\r\n    return axios.post('/user/logout');\r\n}\r\n\r\nfunction* logout(){\r\n\r\n    try{\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_OUT_FAILURE, \r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogout(){\r\n    console.log('watchLogout'); \r\n    yield takeEvery(LOG_OUT_REQUEST,logout); \r\n}\r\n\r\n\r\n\r\n\r\nfunction* signUpAPI(signUpData){\r\n    console.log('signUpData ==>' ,signUpData)\r\n    return axios.post('/api/user/',signUpData); \r\n}\r\n\r\nfunction* signUp(action){\r\n\r\n    try{\r\n        console.log('action.data-->' + action.data); \r\n      //  yield call(signUpAPI);\r\n        yield call(signUpAPI,action.data);  \r\n\r\n        yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST,signUp)\r\n}\r\n\r\n\r\nfunction* hello(){\r\n\r\n    yield delay(1000); \r\n    yield put({\r\n        type:'Bye Saga'\r\n    })\r\n}\r\n\r\nfunction* watchHello(){\r\n     yield takeLatest(HELLO_SAGA, hello); \r\n}\r\n//이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \r\n// function* watchHello(){\r\n//     console.log('before saga'); \r\n//     while(true){\r\n//         yield take(HELLO_SAGA); \r\n//         console.log('hello saga'); \r\n//     }\r\n// }\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        fork(watchLogin), \r\n        fork(watchLogout),\r\n        //fork(watchHello),\r\n        fork(watchSignUp),\r\n        \r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}