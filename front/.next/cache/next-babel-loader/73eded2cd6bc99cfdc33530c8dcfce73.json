{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostCard from '../components/PostCard';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\n\nvar Hashtag = function Hashtag(_ref) {\n  var tag = _ref.tag;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePost = _useSelector.hasMorePost;\n\n  var onScroll = useCallback(function () {\n    //window.scrollY + document.documentElement.clientHeight = document.documentElement.scrollHeight\n    console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n    if (hasMorePost) {\n      //스크롤 할 때 마다 서버로 요청보내면 서버 뒤질 수 도 있음 방지\n      //reducer 잘 보면 이해가 가능할 것이다. \n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        dispatch({\n          type: LOAD_MAIN_POSTS_REQUEST,\n          lastId: mainPosts[mainPosts.length - 1].id\n        });\n      }\n    }\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(function () {\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, mainPosts.map(function (v, i) {\n    return __jsx(PostCard, {\n      key: i,\n      post: v\n    });\n  }));\n};\n\nHashtag.propTypes = {\n  tag: PropTypes.string.isRequired\n}; //next에서 제공하는 기능\n//_app.js에서 NodeBird.getInitialProps 추가 되어야 가능(_app.js에서 가장 먼저 선행 되어야 한다.)\n//_app.js에서 context가 이 Hashtag의 실행 문맥이 된다.\n\nHashtag.getInitialProps = function _callee(context) {\n  var tag;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          tag = context.query.tag;\n          console.log(context.query.tag);\n          context.store.dispatch({\n            type: LOAD_HASHTAG_POSTS_REQUEST,\n            data: tag\n          });\n          return _context.abrupt(\"return\", {\n            tag: tag\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Hashtag;","map":{"version":3,"sources":["D:/git Repository/practice/front/pages/hashtag.js"],"names":["PropTypes","useEffect","useDispatch","useSelector","PostCard","LOAD_HASHTAG_POSTS_REQUEST","Hashtag","tag","dispatch","state","post","mainPosts","hasMorePost","onScroll","useCallback","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","LOAD_MAIN_POSTS_REQUEST","lastId","length","id","addEventListener","removeEventListener","map","v","i","propTypes","string","isRequired","getInitialProps","context","query","store","data"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,0BAAT,QAA2C,kBAA3C;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAS;AAAA,MAAPC,GAAO,QAAPA,GAAO;AAErB,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AAFqB,qBAGWC,WAAW,CAAC,UAAAM,KAAK;AAAA,WAAEA,KAAK,CAACC,IAAR;AAAA,GAAN,CAHtB;AAAA,MAGdC,SAHc,gBAGdA,SAHc;AAAA,MAGJC,WAHI,gBAGJA,WAHI;;AAKrB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,YAAK;AAC9B;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F;;AAEA,QAAGV,WAAH,EAAe;AAAC;AACA;AACZ,UAAGK,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAsC,GAAlG,EAAsG;AAClGd,QAAAA,QAAQ,CAAC;AACLe,UAAAA,IAAI,EAACC,uBADA;AAELC,UAAAA,MAAM,EAAGd,SAAS,CAACA,SAAS,CAACe,MAAV,GAAmB,CAApB,CAAT,CAAgCC;AAFpC,SAAD,CAAR;AAIH;AACJ;AACJ,GAb+B,EAa9B,CAACf,WAAD,EAAeD,SAAS,CAACe,MAAzB,CAb8B,CAA5B;AAeAzB,EAAAA,SAAS,CAAC,YAAI;AACNgB,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAiCf,QAAjC;AAEA,WAAO,YAAI;AACPI,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAoChB,QAApC;AACH,KAFD;AAGP,GANQ,EAMP,CAACF,SAAS,CAACe,MAAX,CANO,CAAT;AASA,SACI,mBACKf,SAAS,CAACmB,GAAV,CAAc,UAACC,CAAD,EAAGC,CAAH;AAAA,WACX,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAkB,MAAA,IAAI,EAAED;AAAxB,MADW;AAAA,GAAd,CADL,CADJ;AAOH,CApCD;;AAsCAzB,OAAO,CAAC2B,SAAR,GAAoB;AAChB1B,EAAAA,GAAG,EAAGP,SAAS,CAACkC,MAAV,CAAiBC;AADP,CAApB,C,CAIQ;AACA;AACA;;AACR7B,OAAO,CAAC8B,eAAR,GAA0B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhB9B,UAAAA,GAFgB,GAEV8B,OAAO,CAACC,KAAR,CAAc/B,GAFJ;AAGtBQ,UAAAA,OAAO,CAACC,GAAR,CAAYqB,OAAO,CAACC,KAAR,CAAc/B,GAA1B;AAEA8B,UAAAA,OAAO,CAACE,KAAR,CAAc/B,QAAd,CAAuB;AACnBe,YAAAA,IAAI,EAAClB,0BADc;AAEnBmC,YAAAA,IAAI,EAACjC;AAFc,WAAvB;AALsB,2CAUf;AAAEA,YAAAA,GAAG,EAAHA;AAAF,WAVe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAaA,eAAeD,OAAf","sourcesContent":["import PropTypes from 'prop-types'\r\nimport {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport PostCard from '../components/PostCard'\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Hashtag = ({tag})=>{\r\n\r\n    const dispatch = useDispatch(); \r\n    const {mainPosts,hasMorePost} = useSelector(state=>state.post); \r\n\r\n    const onScroll = useCallback(() =>{\r\n        //window.scrollY + document.documentElement.clientHeight = document.documentElement.scrollHeight\r\n    console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight); \r\n\r\n    if(hasMorePost){//스크롤 할 때 마다 서버로 요청보내면 서버 뒤질 수 도 있음 방지\r\n                    //reducer 잘 보면 이해가 가능할 것이다. \r\n        if(window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight-300){\r\n            dispatch({\r\n                type:LOAD_MAIN_POSTS_REQUEST,\r\n                lastId : mainPosts[mainPosts.length - 1].id,\r\n            }); \r\n        }\r\n    }         \r\n},[hasMorePost , mainPosts.length]); \r\n\r\n    useEffect(()=>{\r\n            window.addEventListener('scroll',onScroll); \r\n\r\n            return ()=>{\r\n                window.removeEventListener('scroll',onScroll);\r\n            }\r\n    },[mainPosts.length])\r\n\r\n\r\n    return(\r\n        <div>\r\n            {mainPosts.map((v,i)=>(\r\n                <PostCard key={i} post={v} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nHashtag.propTypes = {\r\n    tag : PropTypes.string.isRequired, \r\n}\r\n\r\n        //next에서 제공하는 기능\r\n        //_app.js에서 NodeBird.getInitialProps 추가 되어야 가능(_app.js에서 가장 먼저 선행 되어야 한다.)\r\n        //_app.js에서 context가 이 Hashtag의 실행 문맥이 된다.\r\nHashtag.getInitialProps = async (context) =>{\r\n    \r\n    const tag = context.query.tag; \r\n    console.log(context.query.tag);\r\n\r\n    context.store.dispatch({\r\n        type:LOAD_HASHTAG_POSTS_REQUEST,\r\n        data:tag,\r\n    }); \r\n\r\n    return { tag }; \r\n}\r\n\r\nexport default Hashtag; "]},"metadata":{},"sourceType":"module"}