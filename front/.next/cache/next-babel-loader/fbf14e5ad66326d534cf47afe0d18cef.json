{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//user의 store \nconst dummyUser = {}; //초기 state\n\nexport const initialState = {\n  isLoggedIn: false,\n  nickname: '정준일',\n  Post: ['정', '준'],\n  Followings: ['정', '준'],\n  Followers: ['정', '준'],\n  isLoggedIn: false\n};\nexport const SIGN_UP = 'SIGN_UP';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const LOG_IN = 'LOG_IN';\nexport const LOG_OUT = 'LOG_OUT'; //실제 액션 \n\nexport const signUpAction = data => {\n  //action에 넣을 데이터가 동적인 경우에는 action을 함수르 만들어야 한다. \n  return {\n    type: SIGN_UP,\n    data: data\n  };\n};\nexport const loginAction = {\n  type: LOG_IN,\n  data: {\n    nickname: '주닐정'\n  }\n};\nexport const logOutAction = {\n  type: LOG_OUT\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: action.data\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/git Repository/practice/front/reducers/user.js"],"names":["dummyUser","initialState","isLoggedIn","nickname","Post","Followings","Followers","SIGN_UP","SIGN_UP_SUCCESS","LOG_IN","LOG_OUT","signUpAction","data","type","loginAction","logOutAction","reducer","state","action","user","signUpData"],"mappings":";;;;;;AAAA;AAEA,MAAMA,SAAS,GAAG,EAAlB,C,CAIA;;AACA,OAAO,MAAMC,YAAY,GAAG;AAExBC,EAAAA,UAAU,EAAG,KAFW;AAGxBC,EAAAA,QAAQ,EAAC,KAHe;AAIxBC,EAAAA,IAAI,EAAC,CAAC,GAAD,EAAK,GAAL,CAJmB;AAKxBC,EAAAA,UAAU,EAAC,CAAC,GAAD,EAAK,GAAL,CALa;AAMxBC,EAAAA,SAAS,EAAC,CAAC,GAAD,EAAK,GAAL,CANc;AAOxBJ,EAAAA,UAAU,EAAE;AAPY,CAArB;AAYP,OAAO,MAAMK,OAAO,GAAC,SAAd;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,MAAM,GAAG,QAAf;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB,C,CAEP;;AACA,OAAO,MAAMC,YAAY,GAAGC,IAAD,IAAS;AACpC;AAEI,SAAO;AACHC,IAAAA,IAAI,EAACN,OADF;AAEHK,IAAAA,IAAI,EAACA;AAFF,GAAP;AAKH,CARM;AAWP,OAAO,MAAME,WAAW,GAAG;AACvBD,EAAAA,IAAI,EAACJ,MADkB;AAEvBG,EAAAA,IAAI,EAAC;AACDT,IAAAA,QAAQ,EAAC;AADR;AAFkB,CAApB;AAOP,OAAO,MAAMY,YAAY,GAAG;AACxBF,EAAAA,IAAI,EAACH;AADmB,CAArB;;AAIP,MAAMM,OAAO,GAAG,CAACC,KAAK,GAAGhB,YAAT,EAAwBiB,MAAxB,KAAiC;AAE7C,UAAOA,MAAM,CAACL,IAAd;AAEI,SAAKJ,MAAL;AAAY;AACR,iCACOQ,KADP;AAEIf,UAAAA,UAAU,EAAC,IAFf;AAGIiB,UAAAA,IAAI,EAACD,MAAM,CAACN;AAHhB;AAKH;;AACD,SAAKF,OAAL;AAAa;AACT,iCACOO,KADP;AAEIf,UAAAA,UAAU,EAAC,KAFf;AAGIiB,UAAAA,IAAI,EAAC;AAHT;AAKH;;AACD,SAAKZ,OAAL;AAAa;AACT,iCACOU,KADP;AAEIG,UAAAA,UAAU,EAACF,MAAM,CAACN;AAFtB;AAIH;;AAGD;AAAU;AACN,iCACOK,KADP;AAGH;AA5BL;AAiCH,CAnCD;;AAuCA,eAAeD,OAAf","sourcesContent":["//user의 store \r\n\r\nconst dummyUser = {\r\n\r\n}\r\n\r\n//초기 state\r\nexport const initialState = {\r\n\r\n    isLoggedIn : false, \r\n    nickname:'정준일', \r\n    Post:['정','준'],\r\n    Followings:['정','준'],\r\n    Followers:['정','준'],\r\n    isLoggedIn: false, \r\n\r\n\r\n};\r\n\r\nexport const SIGN_UP='SIGN_UP'; \r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS'; \r\nexport const LOG_IN = 'LOG_IN'; \r\nexport const LOG_OUT = 'LOG_OUT'; \r\n\r\n//실제 액션 \r\nexport const signUpAction =(data)=> {\r\n//action에 넣을 데이터가 동적인 경우에는 action을 함수르 만들어야 한다. \r\n\r\n    return {\r\n        type:SIGN_UP,\r\n        data:data,\r\n    }; \r\n\r\n}\r\n\r\n\r\nexport const loginAction = {\r\n    type:LOG_IN,\r\n    data:{\r\n        nickname:'주닐정', \r\n    }, \r\n}\r\n\r\nexport const logOutAction = {\r\n    type:LOG_OUT,\r\n}\r\n\r\nconst reducer = (state = initialState , action)=>{\r\n\r\n    switch(action.type){\r\n        \r\n        case LOG_IN:{\r\n            return {\r\n                ...state,\r\n                isLoggedIn:true,\r\n                user:action.data,\r\n            };\r\n        }\r\n        case LOG_OUT:{\r\n            return {\r\n                ...state,\r\n                isLoggedIn:false,\r\n                user:null,\r\n            }\r\n        }\r\n        case SIGN_UP:{\r\n            return{\r\n                ...state,\r\n                signUpData:action.data,\r\n            }\r\n        }\r\n\r\n\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default reducer; "]},"metadata":{},"sourceType":"module"}