{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginAPI),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signUpAPI),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(hello),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchHello),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, call, put, delay, takeEvery, take } from 'redux-saga/effects'; //이 외에도\n// race, cancel, select, throttle, debounce 등 도 있다. \n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios'; //call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\n//fort : 함수 비동기적 호출  \n//---------------------------둘 다 함수를 실행시켜준다.\n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n\nexport var HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {\n  return _regeneratorRuntime.wrap(function loginAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: SIGN_UP_REQUEST\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signUpAPI() {\n  return _regeneratorRuntime.wrap(function signUpAPI$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", axios.post('/'));\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(signUpAPI);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: SIGN_UP_REQUEST\n          });\n\n        case 5:\n          _context4.next = 12;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.log('watchLogin');\n          _context5.next = 3;\n          return take(LOG_IN);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction hello() {\n  return _regeneratorRuntime.wrap(function hello$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return delay(1000);\n\n        case 2:\n          _context7.next = 4;\n          return put({\n            type: 'Bye Saga'\n          });\n\n        case 4:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(HELLO_SAGA, hello);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} //이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \n// function* watchHello(){\n//     console.log('before saga'); \n//     while(true){\n//         yield take(HELLO_SAGA); \n//         console.log('hello saga'); \n//     }\n// }\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchHello), fork(watchSignUp), fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/git Repository/practice/front/sagas/user.js"],"names":["loginAPI","login","signUpAPI","signUp","watchLogin","watchSignUp","hello","watchHello","userSaga","all","fork","takeLatest","call","put","delay","takeEvery","take","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","axios","HELLO_SAGA","type","console","error","post","log","LOG_IN"],"mappings":"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","sourcesContent":["import {all ,fork, takeLatest, call, put, delay,takeEvery,take }from 'redux-saga/effects'; \r\n//이 외에도\r\n// race, cancel, select, throttle, debounce 등 도 있다. \r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\n//call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\r\n//fort : 함수 비동기적 호출  \r\n//---------------------------둘 다 함수를 실행시켜준다.\r\n\r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\nfunction* loginAPI(){\r\n//서버에 요청하는 부분 \r\n\r\n}\r\n\r\nfunction* login(){\r\n\r\n    try{\r\n        \r\n        yield call(loginAPI);\r\n        yield put({\r\n            type: SIGN_UP_REQUEST,\r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* signUpAPI(){\r\n\r\n    return axios.post('/'); \r\n}\r\n\r\nfunction* signUp(){\r\n\r\n    try{\r\n        \r\n        yield call(signUpAPI);\r\n        yield put({\r\n            type: SIGN_UP_REQUEST,\r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction* watchLogin(){\r\n    console.log('watchLogin'); \r\n    yield take(LOG_IN);\r\n          //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \r\n          // dispatch될 때 login 제너레이터를 호출한다. \r\n\r\n    yield put({\r\n        type:LOG_IN_SUCCESS,\r\n    });\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST,signUp)\r\n}\r\n\r\n\r\nfunction* hello(){\r\n\r\n    yield delay(1000); \r\n    yield put({\r\n        type:'Bye Saga'\r\n    })\r\n}\r\n\r\nfunction* watchHello(){\r\n     yield takeLatest(HELLO_SAGA, hello); \r\n}\r\n//이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \r\n// function* watchHello(){\r\n//     console.log('before saga'); \r\n//     while(true){\r\n//         yield take(HELLO_SAGA); \r\n//         console.log('hello saga'); \r\n//     }\r\n// }\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        fork(watchHello),\r\n        fork(watchSignUp),\r\n        fork(watchLogin), \r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}