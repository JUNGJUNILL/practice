{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \n//axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  console.log('postData===>', postData);\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    console.log('posts==>', result.data);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI);\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error('ADD_POST_FAILURE==>', e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* whatchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    console.log('action.data.postId==>', action.data.postId);\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        poSstId: action.data.postId\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* whatchAddComment() {\n  console.log('whatchAddComment');\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadHashtagPosts() {\n  console.log('watchLoadHashtagPosts');\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  console.log('watchLoadUserPosts');\n  yield;\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(whatchAddPost), fork(whatchAddComment), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","addPostAPI","postData","console","log","post","withCredentials","loadMainPostsAPI","get","loadMainPosts","action","result","data","type","e","error","loadHashtagPostsAPI","loadHashtagPosts","addPost","whatchAddPost","watchLoadMainPosts","addCommentAPI","addComment","postId","poSstId","whatchAddComment","watchLoadHashtagPosts","watchLoadUserPosts","postSaga"],"mappings":"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","sourcesContent":["import {all,fork,takeLatest, put, delay,call} from 'redux-saga/effects'; \r\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \r\n                           //axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \r\n\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\r\n\r\n\r\nfunction addPostAPI(postData){\r\n    console.log('postData===>' , postData); \r\n    return axios.post('/post',postData,{withCredentials:true}); \r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n\r\n    return axios.get('/posts'); \r\n}\r\n\r\n\r\nfunction* loadMainPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadMainPostsAPI);       \r\n            console.log('posts==>',result.data); \r\n            yield put({\r\n                type:LOAD_MAIN_POSTS_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadHashtagPostsAPI(){\r\n\r\n    return axios.get('/posts'); \r\n}\r\n\r\n\r\nfunction* loadHashtagPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadHashtagPostsAPI);       \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction* addPost(action){\r\n\r\n    try{\r\n            const result = yield call(addPostAPI,action.data);\r\n \r\n            yield put({\r\n                type:ADD_POST_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error('ADD_POST_FAILURE==>' ,e); \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction* whatchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost); \r\n\r\n}\r\n\r\nfunction* watchLoadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts); \r\n}\r\n\r\n\r\n\r\n\r\nfunction addCommentAPI(){\r\n\r\n}\r\n\r\nfunction* addComment(action){\r\n\r\n    try{\r\n        console.log('action.data.postId==>' , action.data.postId); \r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                poSstId:action.data.postId,\r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:ADD_COMMENT_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\nfunction* whatchAddComment(){\r\n    console.log('whatchAddComment'); \r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); \r\n    \r\n}\r\n\r\nfunction* watchLoadHashtagPosts(){\r\n    console.log('watchLoadHashtagPosts'); \r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts); \r\n}\r\n\r\nfunction* watchLoadUserPosts(){\r\n    console.log('watchLoadUserPosts');\r\n    yield\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n\r\n yield all([\r\n     fork(watchLoadMainPosts),\r\n     fork(whatchAddPost), \r\n     fork(whatchAddComment), \r\n     fork(watchLoadHashtagPosts),\r\n     fork(watchLoadUserPosts),\r\n ]); \r\n\r\n}"]},"metadata":{},"sourceType":"module"}