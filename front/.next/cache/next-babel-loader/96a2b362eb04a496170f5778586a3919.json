{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay, takeEvery, take } from 'redux-saga/effects'; //이 외에도\n// race, cancel, select, throttle, debounce 등 도 있다. \n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user';\nimport axios from 'axios'; //call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\n//fort : 함수 비동기적 호출  \n//---------------------------둘 다 함수를 실행시켜준다.\n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n// axios.defaults.baseURL='http://localhost:3065/api';\n\nexport const HELLO_SAGA = 'HELLO_SAGA';\n\nfunction* loginAPI(loginData) {\n  //서버에 요청하는 부분 \n  return axios.post('http://localhost:3065/api/user/login', loginData);\n}\n\nfunction* login(action) {\n  console.log('login data =>', action.data);\n  const result = yield call(loginAPI, action.data);\n\n  try {\n    console.log('sagas result==>', result.data);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  console.log('watchLogin');\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* signUpAPI(signUpData) {\n  console.log('signUpData ==>', signUpData);\n  return axios.post('http://captainryan.gonetis.com:3065/api/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    console.log('action.data-->' + action.data); //  yield call(signUpAPI);\n\n    yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  console.log('뭐여 왜 안되는겨???');\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* hello() {\n  yield delay(1000);\n  yield put({\n    type: 'Bye Saga'\n  });\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, hello);\n} //이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \n// function* watchHello(){\n//     console.log('before saga'); \n//     while(true){\n//         yield take(HELLO_SAGA); \n//         console.log('hello saga'); \n//     }\n// }\n\n\nexport default function* userSaga() {\n  yield all([fork(watchHello), fork(watchSignUp), fork(watchLogin)]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","delay","takeEvery","take","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","axios","HELLO_SAGA","loginAPI","loginData","post","login","action","console","log","data","result","type","e","error","watchLogin","signUpAPI","signUpData","signUp","watchSignUp","hello","watchHello","userSaga"],"mappings":"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","sourcesContent":["import {all ,fork, takeLatest, call, put, delay,takeEvery,take }from 'redux-saga/effects'; \r\n//이 외에도\r\n// race, cancel, select, throttle, debounce 등 도 있다. \r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\n//call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\r\n//fort : 함수 비동기적 호출  \r\n//---------------------------둘 다 함수를 실행시켜준다.\r\n\r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\n// axios.defaults.baseURL='http://localhost:3065/api';\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\n\r\n\r\nfunction* loginAPI(loginData){\r\n//서버에 요청하는 부분 \r\n    return axios.post('http://localhost:3065/api/user/login',loginData); \r\n}\r\n\r\nfunction* login(action){\r\n    console.log('login data =>' , action.data);\r\n   const result =  yield call(loginAPI,action.data);  \r\n    try{\r\n            console.log('sagas result==>' , result.data); \r\n      \r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogin(){\r\n    console.log('watchLogin'); \r\n    yield takeEvery(LOG_IN_REQUEST,login); \r\n}\r\n\r\n\r\n\r\n\r\nfunction* signUpAPI(signUpData){\r\n    console.log('signUpData ==>' ,signUpData)\r\n    return axios.post('http://captainryan.gonetis.com:3065/api/user/',signUpData); \r\n}\r\n\r\nfunction* signUp(action){\r\n\r\n    try{\r\n        console.log('action.data-->' + action.data); \r\n      //  yield call(signUpAPI);\r\n        yield call(signUpAPI,action.data);  \r\n\r\n        yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchSignUp(){\r\n    console.log('뭐여 왜 안되는겨???'); \r\n    yield takeEvery(SIGN_UP_REQUEST,signUp)\r\n}\r\n\r\n\r\nfunction* hello(){\r\n\r\n    yield delay(1000); \r\n    yield put({\r\n        type:'Bye Saga'\r\n    })\r\n}\r\n\r\nfunction* watchHello(){\r\n     yield takeLatest(HELLO_SAGA, hello); \r\n}\r\n//이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \r\n// function* watchHello(){\r\n//     console.log('before saga'); \r\n//     while(true){\r\n//         yield take(HELLO_SAGA); \r\n//         console.log('hello saga'); \r\n//     }\r\n// }\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        fork(watchHello),\r\n        fork(watchSignUp),\r\n        fork(watchLogin), \r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}