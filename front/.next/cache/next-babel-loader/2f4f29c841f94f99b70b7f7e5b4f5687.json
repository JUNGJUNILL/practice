{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadMainPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(whatchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(loadComments),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(upLoadImages),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(whatchAddComment),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadComments),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \n//axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  console.log('postData===>', postData);\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction loadMainPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          result = _context.sent;\n          console.log('posts==>', result.data);\n          _context.next = 7;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 14;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context2.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error('ADD_POST_FAILURE==>', _context4.t0);\n          _context4.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context4.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction whatchAddPost() {\n  return _regeneratorRuntime.wrap(function whatchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context7.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction loadCommentstAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(loadCommentstAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context8.next = 13;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.log(_context8.t0);\n          _context8.next = 13;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context8.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction upLoadImagesAPI(formData) {\n  return axios.post('/post/images', formData);\n}\n\nfunction upLoadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function upLoadImages$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(upLoadImagesAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: {}\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.log(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context9.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction whatchAddComment() {\n  return _regeneratorRuntime.wrap(function whatchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          console.log('whatchAddComment');\n          _context10.next = 3;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 3:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          console.log('watchLoadHashtagPosts');\n          _context11.next = 3;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 3:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          console.log('watchLoadUserPosts');\n          _context12.next = 3;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 3:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          console.log('watchLoadComments');\n          _context13.next = 3;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 3:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          console.log('watchUploadImages');\n          _context14.next = 3;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, upLoadImages);\n\n        case 3:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return all([fork(watchLoadMainPosts), fork(whatchAddPost), fork(whatchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages)]);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/post.js"],"names":["loadMainPosts","loadHashtagPosts","loadUserPosts","addPost","whatchAddPost","watchLoadMainPosts","addComment","loadComments","upLoadImages","whatchAddComment","watchLoadHashtagPosts","watchLoadUserPosts","watchLoadComments","watchUploadImages","postSaga","all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_REQUEST","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","addPostAPI","postData","console","log","post","withCredentials","loadMainPostsAPI","get","action","result","data","type","error","loadHashtagPostsAPI","tag","loadUserPostsAPI","id","addCommentAPI","postId","content","comment","loadCommentstAPI","comments","upLoadImagesAPI","formData"],"mappings":"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","sourcesContent":["import {all,fork,takeLatest, put, delay,call} from 'redux-saga/effects'; \r\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \r\n                           //axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \r\n\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from '../reducers/post';\r\n\r\n\r\nfunction addPostAPI(postData){\r\n    console.log('postData===>' , postData); \r\n    return axios.post('/post',postData,{withCredentials:true}); \r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n\r\n    return axios.get('/posts'); \r\n}\r\n\r\n\r\nfunction* loadMainPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadMainPostsAPI);       \r\n            console.log('posts==>',result.data); \r\n            yield put({\r\n                type:LOAD_MAIN_POSTS_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadHashtagPostsAPI(tag){\r\n\r\n    return axios.get(`/hashtag/${tag}`); \r\n}\r\n\r\n\r\nfunction* loadHashtagPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadHashtagPostsAPI,action.data);     \r\n           yield put({\r\n               type:LOAD_HASHTAG_POSTS_SUCCESS,\r\n               data: result.data,\r\n           })  \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadUserPostsAPI(id){\r\n\r\n    return axios.get(`/user/${id}/posts`); \r\n}\r\n\r\n\r\nfunction* loadUserPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadUserPostsAPI,action.data);    \r\n           yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })  \r\n          \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction* addPost(action){\r\n\r\n    try{\r\n            const result = yield call(addPostAPI,action.data);\r\n \r\n            yield put({\r\n                type:ADD_POST_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error('ADD_POST_FAILURE==>' ,e); \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction* whatchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost); \r\n\r\n}\r\n\r\nfunction* watchLoadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts); \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n\r\n  function* addComment(action) {\r\n    try {\r\n      const result = yield call(addCommentAPI, action.data);\r\n      yield put({\r\n        type: ADD_COMMENT_SUCCESS,\r\n        data: {\r\n          postId: action.data.postId,\r\n          comment: result.data,\r\n        },\r\n      });\r\n    } catch (e) {\r\n      \r\n      console.error(e);\r\n      yield put({\r\n        type: ADD_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\nfunction loadCommentstAPI(postId){\r\n\r\n    return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action){\r\n\r\n    try{\r\n        const result = yield call(loadCommentstAPI,action.data);\r\n        yield put({\r\n            type:LOAD_COMMENTS_SUCCESS,\r\n            data:{\r\n                postId:action.data,\r\n                comments:result.data,\r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:LOAD_COMMENTS_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction upLoadImagesAPI(formData){\r\n\r\n    return axios.post('/post/images',formData); \r\n}\r\n\r\nfunction* upLoadImages(action){\r\n\r\n    try{\r\n        const result = yield call(upLoadImagesAPI,action.data);\r\n        yield put({\r\n            type:UPLOAD_IMAGES_SUCCESS,\r\n            data:{\r\n            \r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:UPLOAD_IMAGES_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\n\r\nfunction* whatchAddComment(){\r\n    console.log('whatchAddComment'); \r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); \r\n    \r\n}\r\n\r\nfunction* watchLoadHashtagPosts(){\r\n    console.log('watchLoadHashtagPosts'); \r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts); \r\n}\r\n\r\nfunction* watchLoadUserPosts(){\r\n    console.log('watchLoadUserPosts');\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST,loadUserPosts); \r\n}\r\n\r\nfunction* watchLoadComments(){\r\n    console.log('watchLoadComments'); \r\n    yield takeLatest(LOAD_COMMENTS_REQUEST,loadComments);\r\n}\r\n\r\nfunction* watchUploadImages(){\r\n    console.log('watchUploadImages'); \r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST,upLoadImages);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n\r\n yield all([\r\n     fork(watchLoadMainPosts),\r\n     fork(whatchAddPost), \r\n     fork(whatchAddComment), \r\n     fork(watchLoadComments),\r\n     fork(watchLoadHashtagPosts),\r\n     fork(watchLoadUserPosts),\r\n     fork(watchUploadImages),\r\n ]); \r\n\r\n}"]},"metadata":{},"sourceType":"module"}