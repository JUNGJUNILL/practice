{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\practice\\\\front\\\\components\\\\PostCard.js\";\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, Input, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpend = _useState[0],\n      setCommentFormOpend = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      commentAdded = _useSelector2.commentAdded;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpend(function (preve) {\n      return !preve;\n    });\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]); //댓글을 쓰고 새로 load해야 할 터이니...\n\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      style: {\n        width: '100px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 32\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }), __jsx(HeartOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }), __jsx(MessageOutlined, {\n      onClick: onToggleComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }), __jsx(EllipsisOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    })],\n    extra: __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 20\n      }\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  })), commentFormOpend && __jsx(React.Fragment, null, __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, __jsx(Form.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\").concat(post.id),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comment || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 22\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 33\n          }\n        }, item.User.nickname[0]),\n        content: item.content,\n        datetime: item.createdAt,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 23\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  //shape을 써서 객체의 각 props의 상세 타입을 지정할 수 있다.\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["D:/git Repository/practice/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","Form","Input","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpend","setCommentFormOpend","commentText","setCommentText","state","user","me","commentAdded","dispatch","onToggleComment","preve","onSubmitComment","e","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","width","User","nickname","content","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["\r\nimport React,{useState,useCallback,useEffect}  from 'react'\r\nimport {Card , Button, Avatar,Form, Input, List, Comment}from 'antd'\r\nimport {RetweetOutlined ,\r\n        HeartOutlined ,\r\n        MessageOutlined,\r\n        EllipsisOutlined \r\n} from '@ant-design/icons';\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {useDispatch ,useSelector} from 'react-redux'\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({post}) =>{\r\n    \r\n    const [commentFormOpend,setCommentFormOpend] = useState(false); \r\n    const [commentText, setCommentText] = useState(''); \r\n    const { me } = useSelector(state=> state.user); \r\n    const {commentAdded}  = useSelector(state=>state.user); \r\n    const dispatch = useDispatch(); \r\n\r\n    const onToggleComment = useCallback(() =>{\r\n        setCommentFormOpend(preve => !preve); \r\n    },[]);\r\n\r\n    const onSubmitComment =useCallback((e)=>{\r\n        \r\n        if(!me){\r\n            return alert('로그인이 필요합니다.'); \r\n        }\r\n        \r\n        return dispatch({type:ADD_COMMENT_REQUEST,\r\n                         data:{\r\n                            postId:post.id,\r\n                         }\r\n        })\r\n\r\n    },[me && me.id]); \r\n\r\n        //댓글을 쓰고 새로 load해야 할 터이니...\r\n        useEffect(()=>{\r\n            setCommentText('');\r\n        },[commentAdded ===true]); \r\n\r\n    const onChangeCommentText = useCallback((e)=>{\r\n        setCommentText(e.target.value); \r\n    },[]); \r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <Card\r\n            key={+post.createdAt}\r\n            cover={post.img && <img alt=\"example\" src={post.img} style={{width:'100px'}}/>}\r\n            actions={[\r\n                <RetweetOutlined />,\r\n                <HeartOutlined />,\r\n                <MessageOutlined  onClick={onToggleComment} />,\r\n                <EllipsisOutlined />,\r\n            ]}\r\n            extra={<Button>팔로우</Button>}\r\n             >\r\n            <Card.Meta \r\n                avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title={post.User.nickname}\r\n                description={post.content}\r\n            />\r\n        </Card>\r\n        {commentFormOpend && (\r\n            <>\r\n            <Form onFinish={onSubmitComment}>\r\n                <Form.Item>\r\n                    <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText}/>\r\n                </Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">삐약</Button>\r\n            </Form>\r\n            <List \r\n                 header={`${post.Comments? post.Comments.length : 0 } 댓글${post.id}`}\r\n                 itemLayout=\"horizontal\"\r\n                 dataSource={post.Comment || []}\r\n                 renderItem={item=>(\r\n                     <li>\r\n                      <Comment \r\n                        author={item.User.nickname}\r\n                        avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                        content={item.content}\r\n                        datetime={item.createdAt}\r\n                      />\r\n                      </li>\r\n                 )}\r\n            />\r\n            </>\r\n\r\n        )}\r\n        </div>\r\n    )\r\n     \r\n}\r\n\r\nPostCard.propTypes = {\r\n                    //shape을 써서 객체의 각 props의 상세 타입을 지정할 수 있다.\r\n    post : PropTypes.shape({\r\n            User: PropTypes.object,\r\n            content : PropTypes.string,\r\n            img:PropTypes.string,\r\n            createdAt:PropTypes.object\r\n    })\r\n}\r\n\r\nexport default PostCard; "]},"metadata":{},"sourceType":"module"}