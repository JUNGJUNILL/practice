{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\n//next에서 제공하는 최상위 컴포넌트 파일 (_app.js로 직접 만들어야 한다. )\n//페이지들의 공통적인 부분기여주기 \nimport AppLayout from '../components/AppLayout';\nimport Head from 'next/head';\nimport React from 'react';\nimport PropTypes from 'prop-types'; // 모든 컴포넌트는 _app.js를 공유한다. \n// redux는 state의 중앙통제실 역할을 하므로 모든 컴포넌트의 state를 컨트롤 하기 위해\n// _app.js에다가 redux를 연결해 주는 작업이 필요하다. \n//--react, redux 연결하기 \n\nimport { Provider } from 'react-redux'; //redux state 제공, 이것으로 전체 컴포넌트의 state를 관리 할 수 있다. \n\nimport reducer from '../reducers';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport withRedux from 'next-redux-wrapper'; //리덕스 사가 \n\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\n\nvar NodeBird = function NodeBird(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store;\n  //▲ next에서 제공하는 props\n  return __jsx(Provider, {\n    store: store\n  }, \" \", __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.min.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, null))));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired\n};\n\nNodeBird.getInitialProps = function _callee(context) {\n  var ctx;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('context===>', context);\n          ctx = context.ctx;\n\n          if (!context.Component.getInitialProps) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(context.Component.getInitialProps(ctx));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}; //하이오더 컴포넌트 \n\n/*\r\nhello(Component); \r\nconst hello = (Component) => ()=>{\r\n    return (\r\n        <Component good=\"i'm a good person\"/>\r\n    )\r\n}\r\n*/\n//제로초가 그냥 외우라고함... \n\n\nvar configureStore = function configureStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(NodeBird);","map":{"version":3,"sources":["D:/git Repository/practice/front/pages/_app.js"],"names":["AppLayout","Head","React","PropTypes","Provider","reducer","createStore","compose","applyMiddleware","withRedux","createSagaMiddleware","rootSaga","NodeBird","Component","store","propTypes","elementType","isRequired","object","getInitialProps","context","console","log","ctx","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","run"],"mappings":";;AAAA;AACA;AAEA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;AAEA;;AACA,SAAQC,QAAR,QAAuB,aAAvB,C,CAAsC;;AACtC,OAAOC,OAAP,MAAoB,aAApB;AACA,SAAQC,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,OAAOC,SAAP,MAAsB,oBAAtB,C,CAGA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAsB;AAAA,MAApBC,SAAoB,QAApBA,SAAoB;AAAA,MAAVC,KAAU,QAAVA,KAAU;AACnB;AAEZ,SACA,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEA;AAAjB,UACI,mBACA,MAAC,IAAD,QACI,gCADJ,EAEI;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC;AAA5B,IAFJ,CADA,EAKA,MAAC,SAAD,QACI,MAAC,SAAD,OADJ,CALA,CADJ,CADA;AAeP,CAlBD;;AAmBAF,QAAQ,CAACG,SAAT,GAAqB;AACjBF,EAAAA,SAAS,EAAEV,SAAS,CAACa,WAAV,CAAsBC,UADhB;AAEjBH,EAAAA,KAAK,EAAMX,SAAS,CAACe,MAAV,CAAiBD;AAFX,CAArB;;AAKAL,QAAQ,CAACO,eAAT,GAA2B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BF,OAA1B;AACQG,UAAAA,GAFe,GAEPH,OAFO,CAEfG,GAFe;;AAAA,eAGpBH,OAAO,CAACP,SAAR,CAAkBM,eAHE;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAIbC,OAAO,CAACP,SAAR,CAAkBM,eAAlB,CAAkCI,GAAlC,CAJa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B,C,CAQA;;AACA;;;;;;;;AASA;;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,YAAD,EAAeC,OAAf,EAA2B;AAC9C,MAAMC,cAAc,GAAGjB,oBAAoB,EAA3C;AACA,MAAMkB,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,QAAQ,GAAG,QACbtB,OAAO,CAACC,eAAe,MAAf,SAAmBoB,WAAnB,CAAD,CADM,GAEbrB,OAAO,CACPC,eAAe,MAAf,SAAmBoB,WAAnB,CADO,EAEP,CAACF,OAAO,CAACI,QAAT,IAAqB,OAAOC,MAAM,CAACC,4BAAd,KAA+C,WAApE,GAAkFD,MAAM,CAACC,4BAAP,EAAlF,GAA0H,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAFpH,CAFX;AAMA,MAAMnB,KAAK,GAAGR,WAAW,CAACD,OAAD,EAAUoB,YAAV,EAAwBI,QAAxB,CAAzB;AACAF,EAAAA,cAAc,CAACO,GAAf,CAAmBvB,QAAnB;AACA,SAAOG,KAAP;AACD,CAZH;;AAcE,eAAeL,SAAS,CAACe,cAAD,CAAT,CAA0BZ,QAA1B,CAAf","sourcesContent":["//next에서 제공하는 최상위 컴포넌트 파일 (_app.js로 직접 만들어야 한다. )\r\n//페이지들의 공통적인 부분기여주기 \r\n\r\nimport AppLayout from '../components/AppLayout'; \r\nimport Head from 'next/head'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// 모든 컴포넌트는 _app.js를 공유한다. \r\n// redux는 state의 중앙통제실 역할을 하므로 모든 컴포넌트의 state를 컨트롤 하기 위해\r\n// _app.js에다가 redux를 연결해 주는 작업이 필요하다. \r\n\r\n//--react, redux 연결하기 \r\nimport {Provider} from 'react-redux'; //redux state 제공, 이것으로 전체 컴포넌트의 state를 관리 할 수 있다. \r\nimport reducer from '../reducers'; \r\nimport {createStore, compose, applyMiddleware} from 'redux'\r\nimport withRedux from 'next-redux-wrapper'\r\n\r\n\r\n//리덕스 사가 \r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\n\r\nconst NodeBird = ({Component,store}) =>{\r\n                    //▲ next에서 제공하는 props\r\n\r\n        return (\r\n        <Provider store={store}> {/*이 store가 redux state이다. 이 store가 전체 컴포넌트 state를 다 받는다. */}\r\n            <div>\r\n            <Head>\r\n                <title>NodeBird</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.min.css\"/>\r\n            </Head>\r\n            <AppLayout >\r\n                <Component />\r\n            </AppLayout>  \r\n            </div>\r\n        </Provider>\r\n\r\n        )\r\n\r\n}\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType.isRequired,\r\n    store    : PropTypes.object.isRequired, \r\n}\r\n\r\nNodeBird.getInitialProps = async (context)=>{\r\n    console.log('context===>',context); \r\n    const { ctx } = context; \r\n    if(context.Component.getInitialProps){\r\n        await context.Component.getInitialProps(ctx); \r\n    }\r\n    \r\n}\r\n//하이오더 컴포넌트 \r\n/*\r\nhello(Component); \r\nconst hello = (Component) => ()=>{\r\n    return (\r\n        <Component good=\"i'm a good person\"/>\r\n    )\r\n}\r\n*/\r\n\r\n//제로초가 그냥 외우라고함... \r\nconst configureStore = (initialState, options) => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n        applyMiddleware(...middlewares),\r\n        !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n      );\r\n    const store = createStore(reducer, initialState, enhancer);\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n  };\r\n  \r\n  export default withRedux(configureStore)(NodeBird);\r\n\r\n"]},"metadata":{},"sourceType":"module"}