{"ast":null,"code":"var __jsx = React.createElement;\n//next에서 제공하는 최상위 컴포넌트 파일 (_app.js로 직접 만들어야 한다. )\n//페이지들의 공통적인 부분기여주기 \nimport AppLayout from '../components/AppLayout';\nimport Head from 'next/head';\nimport React from 'react';\nimport PropTypes from 'prop-types'; // 모든 컴포넌트는 _app.js를 공유한다. \n// redux는 state의 중앙통제실 역할을 하므로 모든 컴포넌트의 state를 컨트롤 하기 위해\n// _app.js에다가 redux를 연결해 주는 작업이 필요하다. \n//--react, redux 연결하기 \n\nimport { Provider } from 'react-redux'; //redux state 제공, 이것으로 전체 컴포넌트의 state를 관리 할 수 있다. \n\nimport reducer from '../reducers';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga'; //next 용 redux saga\n//서버 사이드 랜더링을 위한 준비물\n//리덕스 사가 \n\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  //▲ next에서 제공하는 props\n  return __jsx(Provider, {\n    store: store\n  }, \" \", __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.min.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    charset: \"UTF-8\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps))));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n}; //next에서 제공하는 기능\n//해당 pages의 페이지들이 맨 처음에 실행될 때 서버에서도 실행된다고 한다.\n//그렇기 때문에 서버로부터 데이터를 받아 올 수 있다.\n\nNodeBird.getInitialProps = async context => {\n  //▲ next에서 제공해줌\n  console.log('context===>', context);\n  const {\n    ctx,\n    Component\n  } = context; //▲컴포넌트들(페이지들))\n\n  let pageProps = {}; //서버사이드 랜더링으로 로그인 여부 가져옴 \n\n  const state = ctx.store.getState();\n\n  if (!state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n}; //하이오더 컴포넌트 \n\n/*\r\nhello(Component); \r\nconst hello = (Component) => ()=>{\r\n    return (\r\n        <Component good=\"i'm a good person\"/>\r\n    )\r\n}\r\n*/\n//제로초가 그냥 외우라고함... \n\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));","map":{"version":3,"sources":["D:/git Repository/practice/front/pages/_app.js"],"names":["AppLayout","Head","React","PropTypes","Provider","reducer","createStore","compose","applyMiddleware","withRedux","withReduxSaga","createSagaMiddleware","rootSaga","LOAD_USER_REQUEST","NodeBird","Component","store","pageProps","propTypes","elementType","isRequired","object","getInitialProps","context","console","log","ctx","state","getState","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["//next에서 제공하는 최상위 컴포넌트 파일 (_app.js로 직접 만들어야 한다. )\r\n//페이지들의 공통적인 부분기여주기 \r\n\r\nimport AppLayout from '../components/AppLayout'; \r\nimport Head from 'next/head'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// 모든 컴포넌트는 _app.js를 공유한다. \r\n// redux는 state의 중앙통제실 역할을 하므로 모든 컴포넌트의 state를 컨트롤 하기 위해\r\n// _app.js에다가 redux를 연결해 주는 작업이 필요하다. \r\n\r\n//--react, redux 연결하기 \r\nimport {Provider} from 'react-redux'; //redux state 제공, 이것으로 전체 컴포넌트의 state를 관리 할 수 있다. \r\nimport reducer from '../reducers'; \r\nimport {createStore, compose, applyMiddleware} from 'redux'\r\nimport withRedux from 'next-redux-wrapper'\r\n\r\nimport withReduxSaga from 'next-redux-saga' //next 용 redux saga\r\n                                            //서버 사이드 랜더링을 위한 준비물\r\n\r\n//리덕스 사가 \r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\n\r\nconst NodeBird = ({Component,store,pageProps}) =>{\r\n                    //▲ next에서 제공하는 props\r\n\r\n        return (\r\n        <Provider store={store}> {/*이 store가 redux state이다. 이 store가 전체 컴포넌트 state를 다 받는다. */}\r\n            <div>\r\n            <Head>\r\n                <title>NodeBird</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.min.css\"/>\r\n                <link rel=\"stylesheet\" type=\"text/css\" charset=\"UTF-8\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\" />\r\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\" />\r\n            </Head>\r\n            <AppLayout >\r\n                <Component {...pageProps} />\r\n            </AppLayout>  \r\n            </div>\r\n        </Provider>\r\n\r\n        )\r\n\r\n}\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType.isRequired,\r\n    store    : PropTypes.object.isRequired, \r\n    pageProps: PropTypes.object.isRequired,\r\n}\r\n        //next에서 제공하는 기능\r\n\r\n        //해당 pages의 페이지들이 맨 처음에 실행될 때 서버에서도 실행된다고 한다.\r\n        //그렇기 때문에 서버로부터 데이터를 받아 올 수 있다.\r\nNodeBird.getInitialProps = async (context)=>{\r\n                                  //▲ next에서 제공해줌\r\n    console.log('context===>',context); \r\n    const { ctx,Component } = context; \r\n                //▲컴포넌트들(페이지들))\r\n    let pageProps ={}; \r\n\r\n    //서버사이드 랜더링으로 로그인 여부 가져옴 \r\n    const state  = ctx.store.getState(); \r\n    if(!state.user.me){\r\n        ctx.store.dispatch({\r\n            type: LOAD_USER_REQUEST\r\n        }); \r\n    }\r\n\r\n    if(Component.getInitialProps){\r\n        pageProps =  await Component.getInitialProps(ctx); \r\n    }\r\n \r\n\r\n    return {pageProps}; \r\n    \r\n}\r\n//하이오더 컴포넌트 \r\n/*\r\nhello(Component); \r\nconst hello = (Component) => ()=>{\r\n    return (\r\n        <Component good=\"i'm a good person\"/>\r\n    )\r\n}\r\n*/\r\n\r\n//제로초가 그냥 외우라고함... \r\nconst configureStore = (initialState, options) => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n        applyMiddleware(...middlewares),\r\n        !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n      );\r\n    const store = createStore(reducer, initialState, enhancer);\r\n    store.sagaTask =  sagaMiddleware.run(rootSaga);   \r\n    return store;\r\n  };\r\n  \r\n  export default withRedux(configureStore)(withReduxSaga(NodeBird));\r\n\r\n"]},"metadata":{},"sourceType":"module"}