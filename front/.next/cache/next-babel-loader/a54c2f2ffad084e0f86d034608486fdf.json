{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadMainPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(whatchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(whatchAddComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \n//axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  console.log('postData===>', postData);\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction loadMainPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          result = _context.sent;\n          console.log('posts==>', result.data);\n          _context.next = 7;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 14;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 11;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 11;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context2.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 6]]);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error('ADD_POST_FAILURE==>', _context3.t0);\n          _context3.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction whatchAddPost() {\n  return _regeneratorRuntime.wrap(function whatchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction addCommentAPI() {}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          console.log('action.data.postId==>', action.data.postId);\n          _context6.next = 4;\n          return delay(2000);\n\n        case 4:\n          _context6.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              poSstId: action.data.postId\n            }\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.log(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context6.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction whatchAddComment() {\n  return _regeneratorRuntime.wrap(function whatchAddComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          console.log('whatchAddComment');\n          _context7.next = 3;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          console.log('watchLoadHashtagPosts');\n          _context8.next = 3;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 3:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          console.log('watchLoadUserPosts');\n          _context9.next = 3;\n          return;\n\n        case 3:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return all([fork(watchLoadMainPosts), fork(whatchAddPost), fork(whatchAddComment), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/post.js"],"names":["loadMainPosts","loadHashtagPosts","addPost","whatchAddPost","watchLoadMainPosts","addComment","whatchAddComment","watchLoadHashtagPosts","watchLoadUserPosts","postSaga","all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","addPostAPI","postData","console","log","post","withCredentials","loadMainPostsAPI","get","action","result","data","type","error","loadHashtagPostsAPI","tag","addCommentAPI","postId","poSstId"],"mappings":"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","sourcesContent":["import {all,fork,takeLatest, put, delay,call} from 'redux-saga/effects'; \r\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \r\n                           //axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \r\n\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\r\n\r\n\r\nfunction addPostAPI(postData){\r\n    console.log('postData===>' , postData); \r\n    return axios.post('/post',postData,{withCredentials:true}); \r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n\r\n    return axios.get('/posts'); \r\n}\r\n\r\n\r\nfunction* loadMainPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadMainPostsAPI);       \r\n            console.log('posts==>',result.data); \r\n            yield put({\r\n                type:LOAD_MAIN_POSTS_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadHashtagPostsAPI(tag){\r\n\r\n    return axios.get(`/hashtag/${tag}`); \r\n}\r\n\r\n\r\nfunction* loadHashtagPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadHashtagPostsAPI,action.data);       \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction* addPost(action){\r\n\r\n    try{\r\n            const result = yield call(addPostAPI,action.data);\r\n \r\n            yield put({\r\n                type:ADD_POST_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error('ADD_POST_FAILURE==>' ,e); \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction* whatchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost); \r\n\r\n}\r\n\r\nfunction* watchLoadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts); \r\n}\r\n\r\n\r\n\r\n\r\nfunction addCommentAPI(){\r\n\r\n}\r\n\r\nfunction* addComment(action){\r\n\r\n    try{\r\n        console.log('action.data.postId==>' , action.data.postId); \r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                poSstId:action.data.postId,\r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:ADD_COMMENT_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\nfunction* whatchAddComment(){\r\n    console.log('whatchAddComment'); \r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); \r\n    \r\n}\r\n\r\nfunction* watchLoadHashtagPosts(){\r\n    console.log('watchLoadHashtagPosts'); \r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts); \r\n}\r\n\r\nfunction* watchLoadUserPosts(){\r\n    console.log('watchLoadUserPosts');\r\n    yield\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n\r\n yield all([\r\n     fork(watchLoadMainPosts),\r\n     fork(whatchAddPost), \r\n     fork(whatchAddComment), \r\n     fork(watchLoadHashtagPosts),\r\n     fork(watchLoadUserPosts),\r\n ]); \r\n\r\n}"]},"metadata":{},"sourceType":"module"}