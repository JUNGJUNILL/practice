{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay, takeEvery, take } from 'redux-saga/effects'; //이 외에도\n// race, cancel, select, throttle, debounce 등 도 있다. \n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE } from '../reducers/user'; //call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\n//fort : 함수 비동기적 호출  \n//---------------------------둘 다 함수를 실행시켜준다.\n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n\nexport const HELLO_SAGA = 'HELLO_SAGA';\n\nfunction* loginAPI() {//서버에 요청하는 부분 \n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      type: SIGN_UP_REQUEST\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* signUpAPI() {\n  return axios.post('/');\n}\n\nfunction* signUp() {\n  try {\n    yield call(signUpAPI);\n    yield put({\n      type: SIGN_UP_REQUEST\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  console.log('watchLogin');\n  yield take(LOG_IN); //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \n  // dispatch될 때 login 제너레이터를 호출한다. \n\n  yield put({\n    type: LOG_IN_SUCCESS\n  });\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* hello() {\n  yield delay(1000);\n  yield put({\n    type: 'Bye Saga'\n  });\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, hello);\n} //이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \n// function* watchHello(){\n//     console.log('before saga'); \n//     while(true){\n//         yield take(HELLO_SAGA); \n//         console.log('hello saga'); \n//     }\n// }\n\n\nexport default function* userSaga() {\n  yield all([fork(watchHello), fork(watchSignUp), fork(watchLogin)]);\n}","map":{"version":3,"sources":["C:/git Repository/practice/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","delay","takeEvery","take","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","HELLO_SAGA","loginAPI","login","type","e","console","error","signUpAPI","axios","post","signUp","watchLogin","log","LOG_IN","watchSignUp","hello","watchHello","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,KAA1C,EAAgDC,SAAhD,EAA0DC,IAA1D,QAAqE,oBAArE,C,CACA;AACA;;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,QAAiG,kBAAjG,C,CAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAG,YAAnB;;AAEP,UAAUC,QAAV,GAAoB,CACpB;AAEC;;AAED,UAAUC,KAAV,GAAiB;AAEb,MAAG;AAEC,UAAMZ,IAAI,CAACW,QAAD,CAAV;AACA,UAAMV,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMM,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMb,GAAG,CAAC;AACNY,MAAAA,IAAI,EAACN;AADC,KAAD,CAAT;AAGH;AAEJ;;AAED,UAAUU,SAAV,GAAqB;AAEjB,SAAOC,KAAK,CAACC,IAAN,CAAW,GAAX,CAAP;AACH;;AAED,UAAUC,MAAV,GAAkB;AAEd,MAAG;AAEC,UAAMpB,IAAI,CAACiB,SAAD,CAAV;AACA,UAAMhB,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMM,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMb,GAAG,CAAC;AACNY,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT;AAGH;AAEJ;;AAGD,UAAUY,UAAV,GAAsB;AAClBN,EAAAA,OAAO,CAACO,GAAR,CAAY,YAAZ;AACA,QAAMlB,IAAI,CAACmB,MAAD,CAAV,CAFkB,CAGZ;AACA;;AAEN,QAAMtB,GAAG,CAAC;AACNY,IAAAA,IAAI,EAACP;AADC,GAAD,CAAT;AAGH;;AAED,UAAUkB,WAAV,GAAuB;AACnB,QAAMzB,UAAU,CAACS,eAAD,EAAiBY,MAAjB,CAAhB;AACH;;AAGD,UAAUK,KAAV,GAAiB;AAEb,QAAMvB,KAAK,CAAC,IAAD,CAAX;AACA,QAAMD,GAAG,CAAC;AACNY,IAAAA,IAAI,EAAC;AADC,GAAD,CAAT;AAGH;;AAED,UAAUa,UAAV,GAAsB;AACjB,QAAM3B,UAAU,CAACW,UAAD,EAAae,KAAb,CAAhB;AACJ,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA,eAAe,UAAUE,QAAV,GAAqB;AAEhC,QAAM9B,GAAG,CAAC,CACNC,IAAI,CAAC4B,UAAD,CADE,EAEN5B,IAAI,CAAC0B,WAAD,CAFE,EAGN1B,IAAI,CAACuB,UAAD,CAHE,CAAD,CAAT;AAMH","sourcesContent":["import {all ,fork, takeLatest, call, put, delay,takeEvery,take }from 'redux-saga/effects'; \r\n//이 외에도\r\n// race, cancel, select, throttle, debounce 등 도 있다. \r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE } from '../reducers/user';\r\n\r\n//call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\r\n//fort : 함수 비동기적 호출  \r\n//---------------------------둘 다 함수를 실행시켜준다.\r\n\r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\nfunction* loginAPI(){\r\n//서버에 요청하는 부분 \r\n\r\n}\r\n\r\nfunction* login(){\r\n\r\n    try{\r\n        \r\n        yield call(loginAPI);\r\n        yield put({\r\n            type: SIGN_UP_REQUEST,\r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* signUpAPI(){\r\n\r\n    return axios.post('/'); \r\n}\r\n\r\nfunction* signUp(){\r\n\r\n    try{\r\n        \r\n        yield call(signUpAPI);\r\n        yield put({\r\n            type: SIGN_UP_REQUEST,\r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction* watchLogin(){\r\n    console.log('watchLogin'); \r\n    yield take(LOG_IN);\r\n          //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \r\n          // dispatch될 때 login 제너레이터를 호출한다. \r\n\r\n    yield put({\r\n        type:LOG_IN_SUCCESS,\r\n    });\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST,signUp)\r\n}\r\n\r\n\r\nfunction* hello(){\r\n\r\n    yield delay(1000); \r\n    yield put({\r\n        type:'Bye Saga'\r\n    })\r\n}\r\n\r\nfunction* watchHello(){\r\n     yield takeLatest(HELLO_SAGA, hello); \r\n}\r\n//이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \r\n// function* watchHello(){\r\n//     console.log('before saga'); \r\n//     while(true){\r\n//         yield take(HELLO_SAGA); \r\n//         console.log('hello saga'); \r\n//     }\r\n// }\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        fork(watchHello),\r\n        fork(watchSignUp),\r\n        fork(watchLogin), \r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}