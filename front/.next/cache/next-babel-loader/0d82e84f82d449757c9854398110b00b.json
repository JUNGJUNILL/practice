{"ast":null,"code":"import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'; //call : 함수 동기적 호출 \n//fort : 함수 비동기적 호출 \n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n\nexport const HELLO_SAGA = 'HELLO_SAGA';\n\nfunction* loginAPI() {//서버에 요청하는 부분 \n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield take(LOG_IN); //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \n  // dispatch될 때 login 제너레이터를 호출한다. \n\n  yield put({\n    type: LOG_IN_SUCCESS\n  });\n}\n\nfunction* hello() {\n  try {\n    yield put({\n      type: 'HELLO_TWO'\n    });\n    console.log('hello');\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nfunction* watchHello() {\n  console.log('before saga');\n\n  while (true) {\n    yield take(HELLO_SAGA);\n    console.log('hello saga');\n  }\n}\n\nexport default function* userSaga() {\n  yield all([watchHello(), watchLogin()]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","login","type","e","console","error","watchLogin","hello","log","watchHello","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,IAA1C,QAAqD,oBAArD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAG,YAAnB;;AAEP,UAAUC,QAAV,GAAoB,CACpB;AAEC;;AAED,UAAUC,KAAV,GAAiB;AAEb,MAAG;AAEC,UAAMR,IAAI,CAACO,QAAD,CAAV;AACA,UAAMN,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMM,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT;AAGH;AAEJ;;AAED,UAAUQ,UAAV,GAAsB;AAClB,QAAMX,IAAI,CAACC,MAAD,CAAV,CADkB,CAEZ;AACA;;AAEN,QAAMF,GAAG,CAAC;AACNQ,IAAAA,IAAI,EAACL;AADC,GAAD,CAAT;AAGH;;AAED,UAAUU,KAAV,GAAiB;AACb,MAAG;AACC,UAAMb,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAC;AADC,KAAD,CAAT;AAGAE,IAAAA,OAAO,CAACI,GAAR,CAAY,OAAZ;AAEH,GAND,CAMC,OAAML,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH;AACJ;;AAED,UAAUM,UAAV,GAAsB;AAClBL,EAAAA,OAAO,CAACI,GAAR,CAAY,aAAZ;;AACA,SAAM,IAAN,EAAW;AACP,UAAMb,IAAI,CAACI,UAAD,CAAV;AACAK,IAAAA,OAAO,CAACI,GAAR,CAAY,YAAZ;AACH;AAGJ;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAEhC,QAAMpB,GAAG,CAAC,CACNmB,UAAU,EADJ,EAENH,UAAU,EAFJ,CAAD,CAAT;AAKH","sourcesContent":["import {all ,fork, takeLatest, call, put, take }from 'redux-saga/effects'; \r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\n//call : 함수 동기적 호출 \r\n//fort : 함수 비동기적 호출 \r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\nfunction* loginAPI(){\r\n//서버에 요청하는 부분 \r\n\r\n}\r\n\r\nfunction* login(){\r\n\r\n    try{\r\n        \r\n        yield call(loginAPI); \r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield take(LOG_IN);\r\n          //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \r\n          // dispatch될 때 login 제너레이터를 호출한다. \r\n\r\n    yield put({\r\n        type:LOG_IN_SUCCESS,\r\n    });\r\n}\r\n\r\nfunction* hello(){\r\n    try{\r\n        yield put({\r\n            type:'HELLO_TWO',\r\n        }); \r\n        console.log('hello'); \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n    }\r\n}\r\n\r\nfunction* watchHello(){\r\n    console.log('before saga'); \r\n    while(true){\r\n        yield take(HELLO_SAGA); \r\n        console.log('hello saga'); \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        watchHello(),\r\n        watchLogin(), \r\n    ]) \r\n\r\n}"]},"metadata":{},"sourceType":"module"}