{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//user의 store \nimport { UNLIKE_POST_SUCCESS } from \"./post\"; //초기 state\n\nconst dummyUser = {\n  nickname: '정준일일',\n  Post: ['정', '준'],\n  Followings: ['정', '준'],\n  Followers: ['정', '준'],\n  signUpData: {},\n  id: 1\n};\nexport const initialState = {\n  isLoggedIn: false,\n  //로그인 여부 \n  isLoggingOut: false,\n  //로그아웃 시도중, \n  isLoggingIn: false,\n  //로그인 시도중\n  logInErrorReason: '',\n  //로그인 에러 사유\n  signedUp: '',\n  //회원가입 성공 \n  isSigningUp: false,\n  //회원가입 시도중\n  signUpErrorReason: '',\n  //회원가입 실패 사유 \n  me: null,\n  //내 정보 \n  follwingList: [],\n  followerList: [],\n  userInfo: null,\n  //남의 정보 \n  successMesage: '',\n  isLoading: true,\n  isSignedUp: false //회원가입 성공여부 \n\n};\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: true,\n          logInErrorReason: ''\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          isLoggedIn: true,\n          me: action.data,\n          isLoading: false,\n          successMesage: '로그인에 성공하였습니다.'\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          isLoggedIn: false,\n          logInErrorReason: action.error,\n          me: null\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: true\n        });\n      }\n\n    case LOG_OUT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: false,\n          isLoggedIn: false,\n          me: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: true,\n          isSignedUp: false,\n          signUpErrorReason: ''\n        });\n      }\n\n    case SIGN_UP_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          isSignedUp: true\n        });\n      }\n\n    case SIGN_UP_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          signUpErrorReason: action.error\n        });\n      }\n\n    case LOAD_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_USER_SUCCESS:\n      {\n        if (action.me) {\n          return _objectSpread({}, state, {\n            me: action.data\n          });\n        }\n\n        return _objectSpread({}, state, {\n          userInfo: action.data\n        });\n      }\n\n    case LOAD_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //------------------------------------------------팔로우\n\n    case FOLLOW_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case FOLLOW_USER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Followings: [{\n              id: action.data\n            }, ...state.me.Followings]\n          })\n        });\n      }\n\n    case FOLLOW_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //------------------------------------------------팔로우\n    //------------------------------------------------언팔로우\n\n    case UNFOLLOW_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNFOLLOW_USER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Followings: state.me.Followings.filter(v => v.id !== action.data)\n          })\n        });\n      }\n\n    case UNFOLLOW_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //------------------------------------------------언팔로우\n\n    case ADD_POST_TO_ME:\n      {\n        // 포스트 추가 할 때 마다 숫자 변경되는거 \n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Posts: [{\n              id: action.data\n            }, ...state.me.Posts]\n          })\n        });\n      }\n    //------------------------------------------------날 팔로우 한 목록 가져오기 \n\n    case LOAD_FOLLOWERS_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWERS_SUCCESS:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWERS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //------------------------------------------------날 팔로우 한 목록 가져오기 \n    //------------------------------------------------내가 팔로잉 한 목록 가져오기 \n\n    case LOAD_FOLLOWINGS_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWINGS_SUCCESS:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWINGS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //------------------------------------------------내가 팔로잉 한 목록 가져오기 \n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/git Repository/practice/front/reducers/user.js"],"names":["UNLIKE_POST_SUCCESS","dummyUser","nickname","Post","Followings","Followers","signUpData","id","initialState","isLoggedIn","isLoggingOut","isLoggingIn","logInErrorReason","signedUp","isSigningUp","signUpErrorReason","me","follwingList","followerList","userInfo","successMesage","isLoading","isSignedUp","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","reducer","state","action","type","data","error","filter","v","Posts"],"mappings":"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","sourcesContent":["//user의 store \r\n\r\nimport { UNLIKE_POST_SUCCESS } from \"./post\";\r\n\r\n//초기 state\r\nconst dummyUser = {\r\n    nickname:'정준일일', \r\n    Post:['정','준'],\r\n    Followings:['정','준'],\r\n    Followers:['정','준'],\r\n    signUpData:{},\r\n    id:1,\r\n    \r\n}\r\nexport const initialState = {\r\n\r\n    isLoggedIn : false,    //로그인 여부 \r\n    isLoggingOut : false, //로그아웃 시도중, \r\n    isLoggingIn  : false, //로그인 시도중\r\n    logInErrorReason: '' , //로그인 에러 사유\r\n    signedUp : '',//회원가입 성공 \r\n    isSigningUp : false,  //회원가입 시도중\r\n    signUpErrorReason : '', //회원가입 실패 사유 \r\n    me: null,   //내 정보 \r\n    follwingList: [], \r\n    followerList: [], \r\n    userInfo : null, //남의 정보 \r\n    successMesage: '', \r\n    isLoading: true, \r\n    isSignedUp : false, //회원가입 성공여부 \r\n};\r\n\r\nexport const SIGN_UP_REQUEST ='SIGN_UP_REQUEST'; \r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS'; \r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; \r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; \r\nexport const LOG_IN_SUCCESS = 'LOGIN_SUCCESS'; \r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; \r\n\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST'; \r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS'; \r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; \r\n\r\n\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'\r\n\r\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\r\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\r\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\r\n\r\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\r\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\r\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\r\n\r\nconst reducer = (state = initialState , action)=>{\r\n\r\n    switch(action.type){\r\n        \r\n        case LOG_IN_REQUEST:{\r\n            return {\r\n                ...state,\r\n                isLoggingIn:true,\r\n               logInErrorReason:'',\r\n            };\r\n        }\r\n        \r\n        case LOG_IN_SUCCESS:{\r\n            return {\r\n                ...state,\r\n                isLoggingIn:false,\r\n                isLoggedIn:true,\r\n                me:action.data,\r\n                isLoading:false,\r\n                successMesage :'로그인에 성공하였습니다.', \r\n            }\r\n        }\r\n        case LOG_IN_FAILURE: {\r\n            return{\r\n                ...state,\r\n                isLoggingIn:false,\r\n                isLoggedIn: false, \r\n                logInErrorReason:action.error,\r\n                me:null,\r\n            }    \r\n        }\r\n        case LOG_OUT_REQUEST:{\r\n            return{\r\n                ...state,\r\n                isLoggingOut:true, \r\n            }; \r\n        }\r\n        case LOG_OUT_SUCCESS:{\r\n            return {\r\n                ...state,\r\n                isLoggingOut:false, \r\n                isLoggedIn:false,\r\n                me:null,\r\n            }\r\n        }\r\n        case SIGN_UP_REQUEST:{\r\n            return{\r\n                ...state,\r\n                isSigningUp:true,\r\n                isSignedUp:false,\r\n                signUpErrorReason:'', \r\n            }\r\n        }\r\n\r\n        case SIGN_UP_SUCCESS:{\r\n            return{\r\n                ...state,\r\n                isSigningUp:false,\r\n                isSignedUp: true,\r\n            }\r\n        }\r\n        case SIGN_UP_FAILURE:{\r\n            return{\r\n                ...state,\r\n                isSigningUp:false,\r\n                signUpErrorReason: action.error,\r\n            }\r\n        }\r\n\r\n        case LOAD_USER_REQUEST:{\r\n            return {\r\n                ...state, \r\n            }; \r\n        }\r\n\r\n        case LOAD_USER_SUCCESS: {\r\n            if (action.me) {\r\n              return {\r\n                ...state,\r\n                me: action.data,\r\n              };\r\n            }\r\n            return {\r\n              ...state,\r\n              userInfo: action.data,\r\n            };\r\n          }\r\n    \r\n\r\n        case LOAD_USER_FAILURE:{\r\n            return {\r\n                ...state, \r\n            }; \r\n        }\r\n\r\n\r\n//------------------------------------------------팔로우\r\n        case FOLLOW_USER_REQUEST:{\r\n            return {\r\n                ...state, \r\n            }; \r\n        }\r\n\r\n        case FOLLOW_USER_SUCCESS:{\r\n       \r\n                return {\r\n                    ...state, \r\n                    me:{\r\n                        ...state.me,\r\n                        Followings : [{id:action.data}, ...state.me.Followings], \r\n                    },\r\n                }; \r\n        \r\n        }\r\n\r\n        case FOLLOW_USER_FAILURE:{\r\n            return {\r\n                ...state, \r\n            }; \r\n        }\r\n\r\n//------------------------------------------------팔로우\r\n\r\n\r\n\r\n//------------------------------------------------언팔로우\r\ncase UNFOLLOW_USER_REQUEST:{\r\n    return {\r\n        ...state, \r\n    }; \r\n}\r\n\r\ncase UNFOLLOW_USER_SUCCESS:{\r\n\r\n        return {\r\n            ...state, \r\n            me:{\r\n                ...state.me,\r\n                Followings: state.me.Followings.filter(v => v.id !== action.data),            },\r\n        }; \r\n\r\n        \r\n    \r\n}\r\n\r\ncase UNFOLLOW_USER_FAILURE:{\r\n    return {\r\n        ...state, \r\n    }; \r\n}\r\n\r\n//------------------------------------------------언팔로우\r\n\r\ncase ADD_POST_TO_ME: {\r\n    // 포스트 추가 할 때 마다 숫자 변경되는거 \r\n\r\n    return {\r\n        ...state,\r\n        me: {\r\n            ...state.me,\r\n            Posts:[{id:action.data}, ...state.me.Posts]\r\n        },\r\n    };\r\n\r\n}\r\n\r\n//------------------------------------------------날 팔로우 한 목록 가져오기 \r\n\r\ncase LOAD_FOLLOWERS_REQUEST:{\r\n    return {\r\n        ...state,\r\n\r\n    }\r\n}\r\ncase LOAD_FOLLOWERS_SUCCESS: {\r\n    return{\r\n        ...state,\r\n\r\n    }    \r\n}\r\ncase LOAD_FOLLOWERS_FAILURE:{\r\n    return{\r\n        ...state,\r\n\r\n    }; \r\n}\r\n\r\n//------------------------------------------------날 팔로우 한 목록 가져오기 \r\n\r\n\r\n\r\n//------------------------------------------------내가 팔로잉 한 목록 가져오기 \r\ncase LOAD_FOLLOWINGS_REQUEST:{\r\n    return {\r\n        ...state,\r\n\r\n    }\r\n}\r\ncase LOAD_FOLLOWINGS_SUCCESS: {\r\n    return{\r\n        ...state,\r\n\r\n    }    \r\n}\r\ncase LOAD_FOLLOWINGS_FAILURE:{\r\n    return{\r\n        ...state,\r\n\r\n    }; \r\n}\r\n\r\n//------------------------------------------------내가 팔로잉 한 목록 가져오기 \r\n\r\n\r\n\r\n\r\n\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default reducer; "]},"metadata":{},"sourceType":"module"}