{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//user의 store \nimport { UNLIKE_POST_SUCCESS } from \"./post\";\nexport var initialState = {\n  isLoggedIn: false,\n  //로그인 여부 \n  isLoggingOut: false,\n  //로그아웃 시도중, \n  isLoggingIn: false,\n  //로그인 시도중\n  logInErrorReason: '',\n  //로그인 에러 사유\n  signedUp: '',\n  //회원가입 성공 \n  isSigningUp: false,\n  //회원가입 시도중\n  signUpErrorReason: '',\n  //회원가입 실패 사유 \n  me: null,\n  //내 정보 \n  followingList: [],\n  followerList: [],\n  userInfo: null,\n  //남의 정보 \n  successMesage: '',\n  isLoading: true,\n  isSignedUp: false,\n  //회원가입 성공여부 \n  isEditingNickName: false,\n  //닉네임 변경 중 \n  editNickNameErrorReason: '',\n  //이름변경 실패사유 \n  hasMoreFollower: false,\n  hasMoreFollowing: false\n};\nexport var SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport var LOG_IN_SUCCESS = 'LOGIN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport var LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport var LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport var LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport var FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport var FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport var FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\nexport var UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport var UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport var UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\nexport var REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport var REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport var REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport var ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport var REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport var LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport var LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport var LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\nexport var LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport var LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport var LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\nexport var EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\nexport var EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\nexport var EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE';\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: true,\n          logInErrorReason: ''\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          isLoggedIn: true,\n          me: action.data,\n          isLoading: false,\n          successMesage: '로그인에 성공하였습니다.'\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          isLoggedIn: false,\n          logInErrorReason: action.error,\n          me: null\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: true\n        });\n      }\n\n    case LOG_OUT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: false,\n          isLoggedIn: false,\n          me: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: true,\n          isSignedUp: false,\n          signUpErrorReason: ''\n        });\n      }\n\n    case SIGN_UP_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          isSignedUp: true\n        });\n      }\n\n    case SIGN_UP_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          signUpErrorReason: action.error\n        });\n      }\n\n    case LOAD_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_USER_SUCCESS:\n      {\n        if (action.me) {\n          return _objectSpread({}, state, {\n            me: action.data\n          });\n        }\n\n        return _objectSpread({}, state, {\n          userInfo: action.data\n        });\n      }\n\n    case LOAD_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //------------------------------------------------팔로우\n\n    case FOLLOW_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case FOLLOW_USER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Followings: [{\n              id: action.data\n            }].concat(_toConsumableArray(state.me.Followings))\n          })\n        });\n      }\n\n    case FOLLOW_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //------------------------------------------------팔로우\n    //------------------------------------------------언팔로우\n\n    case UNFOLLOW_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNFOLLOW_USER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Followings: state.me.Followings.filter(function (v) {\n              return v.id !== action.data;\n            })\n          }),\n          followingList: state.followingList.filter(function (v) {\n            return v.id !== action.data;\n          })\n        });\n      }\n\n    case UNFOLLOW_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //------------------------------------------------언팔로우\n\n    case ADD_POST_TO_ME:\n      {\n        // 포스트 추가 할 때 마다 숫자 변경되는거 \n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Posts: [{\n              id: action.data\n            }].concat(_toConsumableArray(state.me.Posts))\n          })\n        });\n      }\n    //------------------------------------------------날 팔로우 한 목록 가져오기 \n    //------------------------------------------------ 게시글 삭제시 게시글 갯수 변경 리듀서 \n\n    case REMOVE_POST_OF_ME:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Posts: state.me.Posts.filter(function (v) {\n              return v.id !== action.data;\n            })\n          })\n        });\n      }\n    //------------------------------------------------ 게시글 삭제시 게시글 갯수 변경 리듀서 \n\n    case LOAD_FOLLOWERS_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWERS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          followerList: action.data\n        });\n      }\n\n    case LOAD_FOLLOWERS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //------------------------------------------------날 팔로우 한 목록 가져오기 \n    //------------------------------------------------내가 팔로잉 한 목록 가져오기 \n\n    case LOAD_FOLLOWINGS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          hasMoreFollowing: action.offset ? state.hasMoreFollowing : true //처음 데이터를 가져올 때는 더보기 버튼을 보여주는걸로\n\n        });\n      }\n\n    case LOAD_FOLLOWINGS_SUCCESS:\n      {\n        console.log('LOAD_FOLLOWINGS_SUCCESS', action.data);\n        return _objectSpread({}, state, {\n          followingList: state.followingList.concat(action.data),\n          hasMoreFollowing: action.data.length === 1\n        });\n      }\n\n    case LOAD_FOLLOWINGS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //------------------------------------------------내가 팔로잉 한 목록 가져오기 \n    //------------------------------------------------팔로워 제거 \n\n    case REMOVE_FOLLOWER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_FOLLOWER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Followers: state.me.Followers.filter(function (v) {\n              return v.id !== action.data;\n            })\n          }),\n          followerList: state.followerList.filter(function (v) {\n            return v.id !== action.data;\n          })\n        });\n      }\n\n    case REMOVE_FOLLOWER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //------------------------------------------------팔로워 제거 \n    //------------------------------------------------닉네임 수정\n\n    case EDIT_NICKNAME_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isEditingNickName: true,\n          editNickNameErrorReason: ''\n        });\n      }\n\n    case EDIT_NICKNAME_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isEditingNickName: false,\n          me: _objectSpread({}, state.me, {\n            nickname: action.data\n          })\n        });\n      }\n\n    case EDIT_NICKNAME_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isEditingNickName: false,\n          editNickNameErrorReason: action.error\n        });\n      }\n    //------------------------------------------------닉네임 수정\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/git Repository/practice/front/reducers/user.js"],"names":["UNLIKE_POST_SUCCESS","initialState","isLoggedIn","isLoggingOut","isLoggingIn","logInErrorReason","signedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","successMesage","isLoading","isSignedUp","isEditingNickName","editNickNameErrorReason","hasMoreFollower","hasMoreFollowing","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","EDIT_NICKNAME_FAILURE","reducer","state","action","type","data","error","Followings","id","filter","v","Posts","offset","console","log","concat","length","Followers","nickname"],"mappings":"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","sourcesContent":["//user의 store \r\n\r\nimport { UNLIKE_POST_SUCCESS } from \"./post\";\r\n\r\nexport const initialState = {\r\n\r\n    isLoggedIn : false,    //로그인 여부 \r\n    isLoggingOut : false, //로그아웃 시도중, \r\n    isLoggingIn  : false, //로그인 시도중\r\n    logInErrorReason: '' , //로그인 에러 사유\r\n    signedUp : '',//회원가입 성공 \r\n    isSigningUp : false,  //회원가입 시도중\r\n    signUpErrorReason : '', //회원가입 실패 사유 \r\n    me: null,   //내 정보 \r\n    followingList: [], \r\n    followerList: [], \r\n    userInfo : null, //남의 정보 \r\n    successMesage: '', \r\n    isLoading: true, \r\n    isSignedUp : false, //회원가입 성공여부 \r\n    isEditingNickName : false,  //닉네임 변경 중 \r\n    editNickNameErrorReason:'', //이름변경 실패사유 \r\n    hasMoreFollower : false, \r\n    hasMoreFollowing : false,\r\n};\r\n\r\nexport const SIGN_UP_REQUEST ='SIGN_UP_REQUEST'; \r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS'; \r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; \r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; \r\nexport const LOG_IN_SUCCESS = 'LOGIN_SUCCESS'; \r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; \r\n\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST'; \r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS'; \r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; \r\n\r\n\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME'\r\n\r\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\r\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\r\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\r\n\r\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\r\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\r\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\r\n\r\nexport const EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST'; \r\nexport const EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS'; \r\nexport const EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE'; \r\n\r\n\r\n\r\nconst reducer = (state = initialState , action)=>{\r\n\r\n    switch(action.type){\r\n        \r\n        case LOG_IN_REQUEST:{\r\n            return {\r\n                ...state,\r\n                isLoggingIn:true,\r\n               logInErrorReason:'',\r\n            };\r\n        }\r\n        \r\n        case LOG_IN_SUCCESS:{\r\n            return {\r\n                ...state,\r\n                isLoggingIn:false,\r\n                isLoggedIn:true,\r\n                me:action.data,\r\n                isLoading:false,\r\n                successMesage :'로그인에 성공하였습니다.', \r\n            }\r\n        }\r\n        case LOG_IN_FAILURE: {\r\n            return{\r\n                ...state,\r\n                isLoggingIn:false,\r\n                isLoggedIn: false, \r\n                logInErrorReason:action.error,\r\n                me:null,\r\n            }    \r\n        }\r\n        case LOG_OUT_REQUEST:{\r\n            return{\r\n                ...state,\r\n                isLoggingOut:true, \r\n            }; \r\n        }\r\n        case LOG_OUT_SUCCESS:{\r\n            return {\r\n                ...state,\r\n                isLoggingOut:false, \r\n                isLoggedIn:false,\r\n                me:null,\r\n            }\r\n        }\r\n        case SIGN_UP_REQUEST:{\r\n            return{\r\n                ...state,\r\n                isSigningUp:true,\r\n                isSignedUp:false,\r\n                signUpErrorReason:'', \r\n            }\r\n        }\r\n\r\n        case SIGN_UP_SUCCESS:{\r\n            return{\r\n                ...state,\r\n                isSigningUp:false,\r\n                isSignedUp: true,\r\n            }\r\n        }\r\n        case SIGN_UP_FAILURE:{\r\n            return{\r\n                ...state,\r\n                isSigningUp:false,\r\n                signUpErrorReason: action.error,\r\n            }\r\n        }\r\n\r\n        case LOAD_USER_REQUEST:{\r\n            return {\r\n                ...state, \r\n            }; \r\n        }\r\n\r\n        case LOAD_USER_SUCCESS: {\r\n            if (action.me) {\r\n              return {\r\n                ...state,\r\n                me: action.data,\r\n              };\r\n            }\r\n            return {\r\n              ...state,\r\n              userInfo: action.data,\r\n            };\r\n          }\r\n    \r\n\r\n        case LOAD_USER_FAILURE:{\r\n            return {\r\n                ...state, \r\n            }; \r\n        }\r\n\r\n\r\n//------------------------------------------------팔로우\r\n        case FOLLOW_USER_REQUEST:{\r\n            return {\r\n                ...state, \r\n            }; \r\n        }\r\n\r\n        case FOLLOW_USER_SUCCESS:{\r\n       \r\n                return {\r\n                    ...state, \r\n                    me:{\r\n                        ...state.me,\r\n                        Followings : [{id:action.data}, ...state.me.Followings], \r\n                    },\r\n                }; \r\n        \r\n        }\r\n\r\n        case FOLLOW_USER_FAILURE:{\r\n            return {\r\n                ...state, \r\n            }; \r\n        }\r\n\r\n//------------------------------------------------팔로우\r\n\r\n\r\n\r\n//------------------------------------------------언팔로우\r\ncase UNFOLLOW_USER_REQUEST:{\r\n    return {\r\n        ...state, \r\n    }; \r\n}\r\n\r\ncase UNFOLLOW_USER_SUCCESS:{\r\n\r\n        return {\r\n            ...state, \r\n            me:{\r\n                ...state.me,\r\n                Followings: state.me.Followings.filter(v => v.id !== action.data),            \r\n            },\r\n            followingList : state.followingList.filter(v => v.id !== action.data),\r\n        }; \r\n\r\n        \r\n    \r\n}\r\n\r\ncase UNFOLLOW_USER_FAILURE:{\r\n    return {\r\n        ...state, \r\n    }; \r\n}\r\n\r\n//------------------------------------------------언팔로우\r\n\r\ncase ADD_POST_TO_ME: {\r\n    // 포스트 추가 할 때 마다 숫자 변경되는거 \r\n\r\n    return {\r\n        ...state,\r\n        me: {\r\n            ...state.me,\r\n            Posts:[{id:action.data}, ...state.me.Posts]\r\n        },\r\n    };\r\n\r\n}\r\n\r\n//------------------------------------------------날 팔로우 한 목록 가져오기 \r\n\r\n\r\n//------------------------------------------------ 게시글 삭제시 게시글 갯수 변경 리듀서 \r\n\r\ncase REMOVE_POST_OF_ME :{\r\n\r\n    return {\r\n        ...state,\r\n        me :{\r\n            ...state.me,\r\n            Posts : state.me.Posts.filter(v=>v.id !== action.data),\r\n        },\r\n    }\r\n}\r\n\r\n//------------------------------------------------ 게시글 삭제시 게시글 갯수 변경 리듀서 \r\n\r\ncase LOAD_FOLLOWERS_REQUEST:{\r\n    return {\r\n        ...state,\r\n\r\n    }\r\n}\r\ncase LOAD_FOLLOWERS_SUCCESS: {\r\n\r\n    return{\r\n        ...state,\r\n        followerList:action.data,\r\n            \r\n    }    \r\n\r\n}\r\ncase LOAD_FOLLOWERS_FAILURE:{\r\n    return{\r\n        ...state,\r\n\r\n    }; \r\n}\r\n\r\n//------------------------------------------------날 팔로우 한 목록 가져오기 \r\n\r\n\r\n\r\n//------------------------------------------------내가 팔로잉 한 목록 가져오기 \r\ncase LOAD_FOLLOWINGS_REQUEST:{\r\n    return {\r\n        ...state,\r\n        hasMoreFollowing : action.offset ?  state.hasMoreFollowing : true, //처음 데이터를 가져올 때는 더보기 버튼을 보여주는걸로\r\n\r\n    }\r\n}\r\ncase LOAD_FOLLOWINGS_SUCCESS: {\r\n\r\n    console.log('LOAD_FOLLOWINGS_SUCCESS',action.data)\r\n    return{\r\n        ...state,\r\n        followingList : state.followingList.concat(action.data), \r\n        hasMoreFollowing : action.data.length === 1,\r\n\r\n    }    \r\n}\r\ncase LOAD_FOLLOWINGS_FAILURE:{\r\n    return{\r\n        ...state,\r\n\r\n    }; \r\n}\r\n\r\n//------------------------------------------------내가 팔로잉 한 목록 가져오기 \r\n\r\n\r\n\r\n//------------------------------------------------팔로워 제거 \r\ncase REMOVE_FOLLOWER_REQUEST:{\r\n    return {\r\n        ...state,\r\n\r\n    }\r\n}\r\ncase REMOVE_FOLLOWER_SUCCESS: {\r\n    return {\r\n      ...state,\r\n      me: {\r\n        ...state.me,\r\n        Followers: state.me.Followers.filter(v => v.id !== action.data),\r\n      },\r\n      followerList: state.followerList.filter(v => v.id !== action.data),\r\n    };\r\n  }\r\ncase REMOVE_FOLLOWER_FAILURE:{\r\n    return{\r\n        ...state,\r\n\r\n    }; \r\n}\r\n\r\n//------------------------------------------------팔로워 제거 \r\n\r\n\r\n\r\n\r\n\r\n//------------------------------------------------닉네임 수정\r\ncase EDIT_NICKNAME_REQUEST:{\r\n    return {\r\n        ...state,\r\n        isEditingNickName : true, \r\n        editNickNameErrorReason : '',\r\n    };\r\n}\r\ncase EDIT_NICKNAME_SUCCESS: {\r\n    return {\r\n      ...state,\r\n      isEditingNickName : false, \r\n    me : {\r\n        ...state.me,\r\n        nickname: action.data, \r\n    },\r\n  };\r\n}\r\ncase EDIT_NICKNAME_FAILURE:{\r\n    return{\r\n        ...state,\r\n        isEditingNickName : false, \r\n        editNickNameErrorReason : action.error, \r\n    }; \r\n}\r\n\r\n//------------------------------------------------닉네임 수정\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default reducer; "]},"metadata":{},"sourceType":"module"}