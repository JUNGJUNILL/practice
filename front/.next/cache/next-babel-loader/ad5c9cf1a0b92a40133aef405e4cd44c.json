{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay, takeEvery, take } from 'redux-saga/effects'; //이 외에도\n// race, cancel, select, throttle, debounce 등 도 있다. \n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user';\nimport axios from 'axios'; //axios에서 제공하는 기능\n\naxios.defaults.baseURL = 'http://captainryan.gonetis.com:3065/api'; //call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\n//fort : 함수 비동기적 호출  \n//---------------------------둘 다 함수를 실행시켜준다.\n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n\nexport const HELLO_SAGA = 'HELLO_SAGA';\n\nfunction* loginAPI(loginData) {\n  //서버에 요청하는 부분 \n  return axios.post('/user/login', loginData);\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    console.log('result==>', result);\n    yield delay(2000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* signUpAPI(signUpData) {\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    console.log('action.data-->' + action.data); //  yield call(signUpAPI);\n\n    yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  console.log('뭐여 왜 안되는겨???');\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* hello() {\n  yield delay(1000);\n  yield put({\n    type: 'Bye Saga'\n  });\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, hello);\n} //이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \n// function* watchHello(){\n//     console.log('before saga'); \n//     while(true){\n//         yield take(HELLO_SAGA); \n//         console.log('hello saga'); \n//     }\n// }\n\n\nexport default function* userSaga() {\n  yield all([fork(watchHello), fork(watchSignUp), fork(watchLogin)]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","delay","takeEvery","take","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","axios","defaults","baseURL","HELLO_SAGA","loginAPI","loginData","post","login","action","result","data","console","log","type","e","error","watchLogin","signUpAPI","signUpData","signUp","watchSignUp","hello","watchHello","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,KAA1C,EAAgDC,SAAhD,EAA0DC,IAA1D,QAAqE,oBAArE,C,CACA;AACA;;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,QAAkH,kBAAlH;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,yCAAzB,C,CAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAG,YAAnB;;AAIP,UAAUC,QAAV,CAAmBC,SAAnB,EAA6B;AAC7B;AACA,SAAOL,KAAK,CAACM,IAAN,CAAW,aAAX,EAA0BD,SAA1B,CAAP;AAEC;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AAEC,UAAMC,MAAM,GAAG,MAAMpB,IAAI,CAACe,QAAD,EAAUI,MAAM,CAACE,IAAjB,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAA0BH,MAA1B;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAElB,cADA;AAENe,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAKH,GAVD,CAUC,OAAMI,CAAN,EAAQ;AACLH,IAAAA,OAAO,CAACI,KAAR,CAAcD,CAAd;AACA,UAAMxB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAACjB;AADC,KAAD,CAAT;AAGH;AAEJ;;AAED,UAAUoB,UAAV,GAAsB;AAClB,QAAMxB,SAAS,CAACE,cAAD,EAAgBa,KAAhB,CAAf;AACH;;AAKD,UAAUU,SAAV,CAAoBC,UAApB,EAA+B;AAC3B,SAAOlB,KAAK,CAACM,IAAN,CAAW,QAAX,EAAoBY,UAApB,CAAP;AACH;;AAED,UAAUC,MAAV,CAAiBX,MAAjB,EAAwB;AAEpB,MAAG;AACCG,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBJ,MAAM,CAACE,IAAtC,EADD,CAED;;AACE,UAAMrB,IAAI,CAAC4B,SAAD,EAAWT,MAAM,CAACE,IAAlB,CAAV;AAEA,UAAMpB,GAAG,CAAC;AACFuB,MAAAA,IAAI,EAAEd;AADJ,KAAD,CAAT;AAIH,GATD,CASC,OAAMe,CAAN,EAAQ;AACLH,IAAAA,OAAO,CAACI,KAAR,CAAcD,CAAd;AACA,UAAMxB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAACf;AADC,KAAD,CAAT;AAGH;AAEJ;;AAID,UAAUsB,WAAV,GAAuB;AACnBT,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAMpB,SAAS,CAACK,eAAD,EAAiBsB,MAAjB,CAAf;AACH;;AAGD,UAAUE,KAAV,GAAiB;AAEb,QAAM9B,KAAK,CAAC,IAAD,CAAX;AACA,QAAMD,GAAG,CAAC;AACNuB,IAAAA,IAAI,EAAC;AADC,GAAD,CAAT;AAGH;;AAED,UAAUS,UAAV,GAAsB;AACjB,QAAMlC,UAAU,CAACe,UAAD,EAAakB,KAAb,CAAhB;AACJ,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA,eAAe,UAAUE,QAAV,GAAqB;AAEhC,QAAMrC,GAAG,CAAC,CACNC,IAAI,CAACmC,UAAD,CADE,EAENnC,IAAI,CAACiC,WAAD,CAFE,EAGNjC,IAAI,CAAC6B,UAAD,CAHE,CAAD,CAAT;AAMH","sourcesContent":["import {all ,fork, takeLatest, call, put, delay,takeEvery,take }from 'redux-saga/effects'; \r\n//이 외에도\r\n// race, cancel, select, throttle, debounce 등 도 있다. \r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\n//axios에서 제공하는 기능\r\naxios.defaults.baseURL = 'http://captainryan.gonetis.com:3065/api'; \r\n\r\n//call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\r\n//fort : 함수 비동기적 호출  \r\n//---------------------------둘 다 함수를 실행시켜준다.\r\n\r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\n\r\n\r\nfunction* loginAPI(loginData){\r\n//서버에 요청하는 부분 \r\nreturn axios.post('/user/login', loginData); \r\n\r\n}\r\n\r\nfunction* login(action){\r\n    try{\r\n        \r\n        const result = yield call(loginAPI,action.data);\r\n        console.log('result==>' , result); \r\n        yield delay(2000); \r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data, \r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOG_IN_REQUEST,login); \r\n}\r\n\r\n\r\n\r\n\r\nfunction* signUpAPI(signUpData){\r\n    return axios.post('/user/',signUpData); \r\n}\r\n\r\nfunction* signUp(action){\r\n\r\n    try{\r\n        console.log('action.data-->' + action.data); \r\n      //  yield call(signUpAPI);\r\n        yield call(signUpAPI,action.data);  \r\n\r\n        yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchSignUp(){\r\n    console.log('뭐여 왜 안되는겨???'); \r\n    yield takeEvery(SIGN_UP_REQUEST,signUp)\r\n}\r\n\r\n\r\nfunction* hello(){\r\n\r\n    yield delay(1000); \r\n    yield put({\r\n        type:'Bye Saga'\r\n    })\r\n}\r\n\r\nfunction* watchHello(){\r\n     yield takeLatest(HELLO_SAGA, hello); \r\n}\r\n//이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \r\n// function* watchHello(){\r\n//     console.log('before saga'); \r\n//     while(true){\r\n//         yield take(HELLO_SAGA); \r\n//         console.log('hello saga'); \r\n//     }\r\n// }\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        fork(watchHello),\r\n        fork(watchSignUp),\r\n        fork(watchLogin), \r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}