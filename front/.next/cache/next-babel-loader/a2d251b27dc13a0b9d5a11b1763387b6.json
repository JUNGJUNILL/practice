{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Button, List, Card } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { StopOutlined } from '@ant-design/icons';\nimport NicknameEditForm from '../components/NicknameEditForm';\nimport { LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST, REMOVE_FOLLOWER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../components/PostCard';\n\nconst Profile = () => {\n  const dispatch = useDispatch();\n  const {\n    me,\n    followingList,\n    followerList\n  } = useSelector(state => state.user);\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  const onUnfollow = useCallback(userId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onRemoveFollower = useCallback(userId => () => {\n    dispatch({\n      type: REMOVE_FOLLOWER_REQUEST,\n      data: userId\n    });\n  }, []);\n  return __jsx(\"div\", null, __jsx(NicknameEditForm, null), __jsx(List, {\n    style: {\n      marginBottom: '20px'\n    },\n    grid: {\n      gutter: 4,\n      xs: 2,\n      md: 3\n    },\n    size: \"small\",\n    header: __jsx(\"div\", null, \"\\uD314\\uB85C\\uC789 \\uBAA9\\uB85D\"),\n    loadMore: __jsx(Button, {\n      style: {\n        width: '100%'\n      }\n    }, \"\\uB354 \\uBCF4\\uAE30\"),\n    bordered: true,\n    dataSource: followingList,\n    renderItem: item => __jsx(List.Item, {\n      style: {\n        marginTop: '20px'\n      }\n    }, __jsx(Card, {\n      actions: [__jsx(StopOutlined, {\n        onClick: onUnfollow(item.id)\n      })]\n    }, __jsx(Card.Meta, {\n      description: item.nickname\n    })))\n  }), __jsx(List, {\n    style: {\n      marginBottom: '20px'\n    },\n    grid: {\n      gutter: 4,\n      xs: 2,\n      md: 3\n    },\n    size: \"small\",\n    header: __jsx(\"div\", null, \"\\uD314\\uB85C\\uC6CC \\uBAA9\\uB85D\"),\n    loadMore: __jsx(Button, {\n      style: {\n        width: '100%'\n      }\n    }, \"\\uB354 \\uBCF4\\uAE30\"),\n    bordered: true,\n    dataSource: followerList,\n    renderItem: item => __jsx(List.Item, {\n      style: {\n        marginTop: '20px'\n      }\n    }, __jsx(Card, {\n      actions: [__jsx(StopOutlined, {\n        onClick: onRemoveFollower(item.id)\n      })]\n    }, __jsx(Card.Meta, {\n      description: item.nickname\n    })))\n  }), __jsx(\"div\", null, mainPosts.map(c => __jsx(PostCard, {\n    key: +c.createdAt,\n    post: c\n  }))));\n};\n\nProfile.getInitialProps = async context => {\n  const state = context.store.getState(); //이 직전에 LOAD_USERS_REQUEST -> LOAD_USERS_SUCCESS 해야만 me가 생성되므로.. \n\n  context.store.dispatch({\n    type: LOAD_FOLLOWERS_REQUEST,\n    data: state.user.me && state.user.me.id // 이부분은 null 일 것이다.\n\n  });\n  context.store.dispatch({\n    type: LOAD_FOLLOWINGS_REQUEST,\n    data: state.user.me && state.user.me.id // 이부분은 null 일 것이다.\n\n  });\n  context.store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: state.user.me && state.user.me.id // 이부분은 null 일 것이다.\n\n  }); //저 부분이 null 인 이유 , \n  //__app.js에서    \n\n  /*\r\n  const state  = ctx.store.getState(); \r\n  if(!state.user.me){\r\n    ctx.store.dispatch({\r\n        type: LOAD_USER_REQUEST\r\n    });\r\n   }\r\n    에서 me를 먼저 load 한 후에 me가 생성되기 때문에 id default 값을 0으로 설정하여 \r\n    0인 경우는 내 정보 이므로, 해당 파라메터를 서버로 넘거 0인 경우는 내 프로필을 조회 한 것이다\r\n    라고 약속을 정해서 0인 경우는 내 정보 보기 이다. 라고 약속 해 놓은 것이다.\r\n      */\n};\n\nexport default Profile;","map":{"version":3,"sources":["D:/git Repository/practice/front/pages/profile.js"],"names":["React","useEffect","useCallback","useState","Button","List","Card","useDispatch","useSelector","StopOutlined","NicknameEditForm","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWINGS_REQUEST","REMOVE_FOLLOWER_REQUEST","UNFOLLOW_USER_REQUEST","LOAD_USER_POSTS_REQUEST","PostCard","Profile","dispatch","me","followingList","followerList","state","user","mainPosts","post","onUnfollow","userId","type","data","onRemoveFollower","marginBottom","gutter","xs","md","width","item","marginTop","id","nickname","map","c","createdAt","getInitialProps","context","store","getState"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback,useState } from 'react';\r\nimport { Button, List, Card } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {StopOutlined } from '@ant-design/icons';\r\nimport NicknameEditForm from '../components/NicknameEditForm';\r\nimport {\r\n  LOAD_FOLLOWERS_REQUEST,\r\n  LOAD_FOLLOWINGS_REQUEST,\r\n  REMOVE_FOLLOWER_REQUEST,\r\n  UNFOLLOW_USER_REQUEST,\r\n} from '../reducers/user';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\r\nimport PostCard from '../components/PostCard';\r\n\r\nconst Profile = () => {\r\n  const dispatch = useDispatch();\r\n  const { me, followingList, followerList } = useSelector(state => state.user);\r\n  const { mainPosts } = useSelector(state => state.post);\r\n\r\n  const onUnfollow = useCallback(userId => () => {\r\n    dispatch({\r\n      type: UNFOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n\r\n  const onRemoveFollower = useCallback(userId => () => {\r\n    dispatch({\r\n      type: REMOVE_FOLLOWER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <NicknameEditForm />\r\n      <List\r\n        style={{ marginBottom: '20px' }}\r\n        grid={{ gutter: 4, xs: 2, md: 3 }}\r\n        size=\"small\"\r\n        header={<div>팔로잉 목록</div>}\r\n        loadMore={<Button style={{ width: '100%' }}>더 보기</Button>}\r\n        bordered\r\n        dataSource={followingList}\r\n        renderItem={item => (\r\n          <List.Item style={{ marginTop: '20px' }}>\r\n            <Card actions={[<StopOutlined onClick={onUnfollow(item.id)} />]}>\r\n              <Card.Meta description={item.nickname} />\r\n            </Card>\r\n          </List.Item>\r\n        )}\r\n      />\r\n      <List\r\n        style={{ marginBottom: '20px' }}\r\n        grid={{ gutter: 4, xs: 2, md: 3 }}\r\n        size=\"small\"\r\n        header={<div>팔로워 목록</div>}\r\n        loadMore={<Button style={{ width: '100%' }}>더 보기</Button>}\r\n        bordered\r\n        dataSource={followerList}\r\n        renderItem={item => (\r\n          <List.Item style={{ marginTop: '20px' }}>\r\n            <Card actions={[<StopOutlined onClick={onRemoveFollower(item.id)} />]}>\r\n              <Card.Meta description={item.nickname} />\r\n            </Card>\r\n          </List.Item>\r\n        )}\r\n      />\r\n      <div>\r\n        {mainPosts.map(c => (\r\n          <PostCard key={+c.createdAt} post={c} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nProfile.getInitialProps = async (context) =>{\r\n\r\n  const state = context.store.getState(); \r\n\r\n    //이 직전에 LOAD_USERS_REQUEST -> LOAD_USERS_SUCCESS 해야만 me가 생성되므로.. \r\n    context.store.dispatch({\r\n      type: LOAD_FOLLOWERS_REQUEST,\r\n      data: state.user.me && state.user.me.id, // 이부분은 null 일 것이다.\r\n    });\r\n\r\n    context.store.dispatch({\r\n      type: LOAD_FOLLOWINGS_REQUEST,\r\n      data: state.user.me && state.user.me.id, // 이부분은 null 일 것이다.\r\n    });\r\n\r\n    context.store.dispatch({\r\n      type: LOAD_USER_POSTS_REQUEST,\r\n      data: state.user.me && state.user.me.id, // 이부분은 null 일 것이다.\r\n    });\r\n\r\n\r\n    //저 부분이 null 인 이유 , \r\n    //__app.js에서    \r\n    \r\n    /*\r\n    const state  = ctx.store.getState(); \r\n    if(!state.user.me){\r\n      ctx.store.dispatch({\r\n          type: LOAD_USER_REQUEST\r\n      });\r\n     }\r\n      에서 me를 먼저 load 한 후에 me가 생성되기 때문에 id default 값을 0으로 설정하여 \r\n      0인 경우는 내 정보 이므로, 해당 파라메터를 서버로 넘거 0인 경우는 내 프로필을 조회 한 것이다\r\n      라고 약속을 정해서 0인 경우는 내 정보 보기 이다. 라고 약속 해 놓은 것이다.\r\n  \r\n    */\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}