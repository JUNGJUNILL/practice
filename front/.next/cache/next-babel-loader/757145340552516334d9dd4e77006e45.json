{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\git Repository\\\\practice\\\\front\\\\components\\\\PostForm.js\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Form, Button, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_POST_REQUEST } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost;\n\n  var onSubmitForm = useCallback(function () {\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: {\n        text: text\n      }\n    });\n  }, []);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmitForm,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4\\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    value: text,\n    onChange: onChangeText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 29\n    }\n  }), __jsx(Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": 'right'\n    },\n    htmlType: \"submit\",\n    isLoading: isAddingPost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 29\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }\n  }, imagePaths.map(function (v, i) {\n    return __jsx(\"div\", {\n      key: i,\n      style: {\n        display: 'inline-block'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 33\n      }\n    }, __jsx(\"img\", {\n      src: v,\n      style: {\n        width: '200px'\n      },\n      alt: v,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 33\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 33\n      }\n    }, __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 37\n      }\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/git Repository/practice/front/components/PostForm.js"],"names":["React","useEffect","useCallback","useState","Form","Button","Input","useDispatch","useSelector","ADD_POST_REQUEST","PostForm","dispatch","text","setText","state","post","imagePaths","isAddingPost","onSubmitForm","type","data","onChangeText","e","target","value","margin","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React,{useEffect, useCallback, useState} from 'react'\r\nimport {Form, Button,Input}from 'antd'\r\n\r\nimport {useDispatch ,useSelector} from 'react-redux'\r\nimport { ADD_POST_REQUEST } from '../reducers/post';\r\n\r\n\r\n\r\nconst PostForm = () =>{\r\n\r\n    const dispatch=useDispatch();\r\n    const [text,setText] = useState(''); \r\n    const {imagePaths, isAddingPost} = useSelector(state=>state.post);\r\n\r\n    const onSubmitForm = useCallback(()=>{\r\n\r\n        dispatch({\r\n                type:ADD_POST_REQUEST,\r\n                data: {\r\n                    text,\r\n                },\r\n            });\r\n\r\n    },[])\r\n    \r\n\r\n\r\n    const onChangeText =useCallback( (e)=>{\r\n        setText(e.target.value); \r\n    },[]); \r\n\r\n    return(\r\n                <Form style={{margin:'10px 0 20px'}} encType=\"multipart/form-data\" onFinish={onSubmitForm}>               \r\n                        <Input.TextArea maxLength={140} placeholder=\"어떤일이 있었나요?\" value={text} onChange={onChangeText} />\r\n                        <div>\r\n                            <input type=\"file\" multiple hidden />\r\n                            <Button>이미지 업로드</Button>\r\n                            <Button type=\"primary\" style={{float:'right'}} htmlType=\"submit\" isLoading={isAddingPost}>짹짹</Button>\r\n                        </div>\r\n                        <div>\r\n                        {imagePaths.map((v,i)=>{\r\n                            return (\r\n\r\n                                <div key={i} style={{display:'inline-block'}}>\r\n                                <img src={v} style={{width:'200px' }} alt={v} />\r\n                                <div>\r\n                                    <Button>제거</Button>\r\n                                </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                        </div>\r\n                </Form>\r\n            )\r\n}\r\nexport default PostForm; "]},"metadata":{},"sourceType":"module"}