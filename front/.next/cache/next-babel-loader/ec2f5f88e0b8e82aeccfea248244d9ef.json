{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostCard from '../components/PostCard';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\n\nvar Hashtag = function Hashtag(_ref) {\n  var tag = _ref.tag;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts;\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_HASHTAG_POSTS_REQUEST,\n      data: tag\n    });\n  }, []);\n  return __jsx(\"div\", null, mainPosts.map(function (v, i) {\n    return __jsx(PostCard, {\n      key: i,\n      post: v\n    });\n  }));\n};\n\nHashtag.propTypes = {\n  tag: PropTypes.string.isRequired\n}; //next에서 제공하는 기능\n//_app.js에서 NodeBird.getInitialProps 추가 되어야 가능(_app.js에서 가장 먼저 선행 되어야 한다.)\n//_app.js에서 context가 이 Hashtag의 실행 문맥이 된다.\n\nHashtag.getInitialProps = function _callee(context) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(context.query.tag);\n          return _context.abrupt(\"return\", {\n            tag: context.query.tag\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Hashtag;","map":{"version":3,"sources":["D:/git Repository/practice/front/pages/hashtag.js"],"names":["PropTypes","useEffect","useDispatch","useSelector","PostCard","LOAD_HASHTAG_POSTS_REQUEST","Hashtag","tag","dispatch","state","post","mainPosts","type","data","map","v","i","propTypes","string","isRequired","getInitialProps","context","console","log","query"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,0BAAT,QAA2C,kBAA3C;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAS;AAAA,MAAPC,GAAO,QAAPA,GAAO;AAErB,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AAFqB,qBAGDC,WAAW,CAAC,UAAAM,KAAK;AAAA,WAAEA,KAAK,CAACC,IAAR;AAAA,GAAN,CAHV;AAAA,MAGdC,SAHc,gBAGdA,SAHc;;AAKrBV,EAAAA,SAAS,CAAC,YAAI;AAEVO,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAACP,0BADA;AAELQ,MAAAA,IAAI,EAACN;AAFA,KAAD,CAAR;AAKH,GAPQ,EAOP,EAPO,CAAT;AASA,SACI,mBACKI,SAAS,CAACG,GAAV,CAAc,UAACC,CAAD,EAAGC,CAAH;AAAA,WACX,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAkB,MAAA,IAAI,EAAED;AAAxB,MADW;AAAA,GAAd,CADL,CADJ;AAOH,CArBD;;AAuBAT,OAAO,CAACW,SAAR,GAAoB;AAChBV,EAAAA,GAAG,EAAGP,SAAS,CAACkB,MAAV,CAAiBC;AADP,CAApB,C,CAIQ;AACA;AACA;;AACRb,OAAO,CAACc,eAAR,GAA0B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAEtBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,KAAR,CAAcjB,GAA1B;AAFsB,2CAGf;AAACA,YAAAA,GAAG,EAACc,OAAO,CAACG,KAAR,CAAcjB;AAAnB,WAHe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAMA,eAAeD,OAAf","sourcesContent":["import PropTypes from 'prop-types'\r\nimport {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport PostCard from '../components/PostCard'\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Hashtag = ({tag})=>{\r\n\r\n    const dispatch = useDispatch(); \r\n    const {mainPosts} = useSelector(state=>state.post); \r\n\r\n    useEffect(()=>{\r\n\r\n        dispatch({\r\n            type:LOAD_HASHTAG_POSTS_REQUEST,\r\n            data:tag,\r\n        }); \r\n        \r\n    },[])\r\n\r\n    return(\r\n        <div>\r\n            {mainPosts.map((v,i)=>(\r\n                <PostCard key={i} post={v} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nHashtag.propTypes = {\r\n    tag : PropTypes.string.isRequired, \r\n}\r\n\r\n        //next에서 제공하는 기능\r\n        //_app.js에서 NodeBird.getInitialProps 추가 되어야 가능(_app.js에서 가장 먼저 선행 되어야 한다.)\r\n        //_app.js에서 context가 이 Hashtag의 실행 문맥이 된다.\r\nHashtag.getInitialProps = async (context) =>{\r\n    \r\n    console.log(context.query.tag);\r\n    return {tag:context.query.tag}; \r\n}\r\n\r\nexport default Hashtag; "]},"metadata":{},"sourceType":"module"}