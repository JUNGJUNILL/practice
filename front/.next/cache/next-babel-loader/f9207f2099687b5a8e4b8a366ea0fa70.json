{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, Input, List, Comment, Popover } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\nimport { useDispatch, useSelector, memo } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST, REMOVE_FOLLOWER_REQUEST } from '../reducers/user';\nvar PostCard = memo(function (_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpend = _useState[0],\n      setCommentFormOpend = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  console.log('힝힝힝');\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpend(function (preve) {\n      return !preve;\n    });\n\n    if (!commentFormOpend) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]); //댓글을 쓰고 새로 load해야 할 터이니...\n\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []); //게시글 삭제\n\n  var onRemovePost = useCallback(function (postId) {\n    return function () {\n      console.log('postId===>', postId);\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: postId\n      });\n    };\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card //key={post.}\n  , {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      onClick: onRetweet\n    }), __jsx(HeartOutlined, {\n      onClick: onToggleLike\n    }), __jsx(MessageOutlined, {\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, null, me && post.User.id === me.id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(EllipsisOutlined, null))],\n    title: post.RetweetId && post.Retweet ? \"\".concat(post.User.nickname, \" \\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : '',\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(function (v) {\n      return v.id === post.User.id;\n    }) ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id)\n    }, \"\\uC5B8\\uD314\\uB85C\\uC6B0\") : __jsx(Button, {\n      onClick: onFollow(post.User.id)\n    }, \"\\uD314\\uB85C\\uC6B0\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"user/\".concat(post.User.id)\n      /*href={`/user/${post.User.id}`}*/\n\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    }) //next 사용시 <a> 태그 말고 Link 를 사용해야 한다.\n\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"user/\".concat(post.User.id)\n      /*href={`/user/${post.User.id}`}*/\n\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    }) //next 사용시 <a> 태그 말고 Link 를 사용해야 한다.\n\n  })), commentFormOpend && __jsx(React.Fragment, null, __jsx(Form, {\n    onFinish: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\\uB313\\uAE00 \".concat(post.Comments ? post.Comments.length : 0),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n});\nPostCard.propTypes = {\n  //shape을 써서 객체의 각 props의 상세 타입을 지정할 수 있다.\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    images: PropTypes.array // createdAt:PropTypes.object\n\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["D:/git Repository/practice/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","Form","Input","List","Comment","Popover","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","PropTypes","Link","PostImages","PostCardContent","useDispatch","useSelector","memo","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","REMOVE_FOLLOWER_REQUEST","PostCard","post","commentFormOpend","setCommentFormOpend","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","console","log","liked","Likers","find","v","id","onToggleComment","preve","type","data","onSubmitComment","e","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","onUnfollow","userId","onFollow","onRemovePost","Images","User","RetweetId","Retweet","nickname","Followings","pathname","query","Comments","length","item","propTypes","shape","object","string","images","array"],"mappings":"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","sourcesContent":["\r\nimport React,{useState,useCallback,useEffect}  from 'react'\r\nimport {Card , Button, Avatar,Form, Input, List, Comment , Popover}from 'antd'\r\nimport {\r\n    RetweetOutlined, \r\n    HeartOutlined,\r\n    MessageOutlined  ,\r\n    EllipsisOutlined ,\r\n} from '@ant-design/icons';\r\n\r\nimport PropTypes from 'prop-types'\r\nimport Link from 'next/link'\r\nimport PostImages from './PostImages'; \r\nimport PostCardContent from './PostCardContent'; \r\n\r\n\r\nimport {useDispatch ,useSelector,memo} from 'react-redux'\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\r\nimport {FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST, REMOVE_FOLLOWER_REQUEST} from '../reducers/user';\r\n\r\nconst PostCard = memo(({post}) =>{\r\n    \r\n    const [commentFormOpend,setCommentFormOpend] = useState(false); \r\n    const [commentText, setCommentText] = useState(''); \r\n    const { me } = useSelector(state=> state.user); \r\n    const {commentAdded, isAddingComment}  = useSelector(state=>state.post); \r\n    const dispatch = useDispatch(); \r\n    console.log('힝힝힝'); \r\n    const liked =me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n    \r\n    const onToggleComment = useCallback(() =>{\r\n        setCommentFormOpend(preve => !preve); \r\n        if(!commentFormOpend){\r\n            dispatch({\r\n                type:LOAD_COMMENTS_REQUEST,\r\n                data:post.id,\r\n            });\r\n        }\r\n    },[]);\r\n\r\n    const onSubmitComment =useCallback((e)=>{\r\n        \r\n        if(!me){\r\n            return alert('로그인이 필요합니다.'); \r\n        }\r\n        \r\n        return dispatch({type:ADD_COMMENT_REQUEST,\r\n                         data:{\r\n                            postId:post.id,\r\n                            content:commentText,\r\n                         }\r\n        })\r\n\r\n    },[me && me.id,commentText]); \r\n    \r\n        //댓글을 쓰고 새로 load해야 할 터이니...\r\n        useEffect(()=>{\r\n            setCommentText('');\r\n        },[commentAdded ===true]); \r\n\r\n    const onChangeCommentText = useCallback((e)=>{\r\n        setCommentText(e.target.value); \r\n    },[]); \r\n\r\n\r\n    const onToggleLike = useCallback(() => {\r\n        if (!me) {\r\n          return alert('로그인이 필요합니다!');\r\n        }\r\n\r\n        if (liked) { // 좋아요 누른 상태\r\n          dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id,\r\n          });\r\n\r\n        } else { // 좋아요 안 누른 상태\r\n          dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n          });\r\n        }\r\n      }, [me && me.id, post && post.id, liked]);\r\n\r\n\r\n      const onRetweet = useCallback(()=>{\r\n\r\n          if (!me) {\r\n            return alert('로그인이 필요합니다!');\r\n          }\r\n  \r\n\r\n        return  dispatch({\r\n            type : RETWEET_REQUEST,\r\n            data : post.id,\r\n        });\r\n\r\n\r\n      },[me && me.id , post && post.id]);\r\n\r\n\r\n      const onUnfollow = useCallback(userId=>()=>{\r\n            dispatch({\r\n                type : UNFOLLOW_USER_REQUEST,\r\n                data : userId,\r\n            })\r\n      },[])\r\n\r\n      const onFollow  = useCallback(userId=>()=>{\r\n\r\n        dispatch({\r\n            type : FOLLOW_USER_REQUEST,\r\n            data : userId,\r\n        })\r\n\r\n    },[])\r\n\r\n\r\n    //게시글 삭제\r\n    const onRemovePost = useCallback(postId=>()=>{\r\n\r\n      console.log('postId===>' , postId); \r\n        dispatch({\r\n            type:REMOVE_POST_REQUEST,\r\n            data:postId,\r\n        });\r\n\r\n    },[])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <Card\r\n            //key={post.}\r\n            cover={post.Images[0] && <PostImages images={post.Images} />}\r\n            actions={[\r\n                <RetweetOutlined onClick={onRetweet} />,\r\n                <HeartOutlined onClick={onToggleLike} />,\r\n                <MessageOutlined  onClick={onToggleComment} />,\r\n                <Popover\r\n                key=\"more\"\r\n                content={(\r\n                  <Button.Group>\r\n                    {me && post.User.id === me.id\r\n                      ? (\r\n                        <>\r\n                          <Button>수정</Button>\r\n                          <Button type=\"danger\"  onClick={onRemovePost(post.id)}>삭제</Button>\r\n                        </>\r\n                      )\r\n                      : <Button>신고</Button>}\r\n                  </Button.Group>\r\n                )}\r\n              >\r\n                <EllipsisOutlined />\r\n              </Popover>,\r\n            ]}\r\n            title={post.RetweetId && post.Retweet ? `${post.User.nickname} 님이 리트윗하셨습니다.` : ''}\r\n            extra={!me || post.User.id === me.id\r\n                ? null\r\n                : me.Followings && me.Followings.find(v => v.id === post.User.id)\r\n                  ? <Button onClick={onUnfollow(post.User.id)}>언팔로우</Button>\r\n                  : <Button onClick={onFollow(post.User.id)}>팔로우</Button>\r\n              }\r\n             >\r\n\r\n             {post.RetweetId && post.Retweet ?\r\n               ( \r\n                <Card\r\n                        cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n                >\r\n                    <Card.Meta \r\n                    \r\n                    avatar={<Link href={{pathname:'/user', query:{id : post.User.id} }} as={`user/${post.User.id}`}/*href={`/user/${post.User.id}`}*/><a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>}\r\n                    title={post.Retweet.User.nickname}\r\n                    description={<PostCardContent postData={post.Retweet.content}/>}\r\n                    //next 사용시 <a> 태그 말고 Link 를 사용해야 한다.\r\n                    />\r\n                </Card>\r\n               )\r\n\r\n            :( \r\n            <Card.Meta \r\n                avatar={<Link href={{pathname:'/user', query:{id : post.User.id} }} as={`user/${post.User.id}`}/*href={`/user/${post.User.id}`}*/><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                title={post.User.nickname}\r\n                description={<PostCardContent postData={post.content}/>}\r\n                //next 사용시 <a> 태그 말고 Link 를 사용해야 한다.\r\n            />\r\n            )}\r\n        </Card>\r\n        {commentFormOpend && (\r\n            <>\r\n            <Form onFinish={onSubmitComment}>\r\n                <Form.Item>\r\n                    <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText}/>\r\n                </Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n            </Form>\r\n            <List \r\n                 header={`댓글 ${post.Comments? post.Comments.length : 0 }`}\r\n                 itemLayout=\"horizontal\"\r\n                 dataSource={post.Comments || []}\r\n                 renderItem={item=>(\r\n                     <li>\r\n                      <Comment \r\n                        author={item.User.nickname}\r\n                        avatar={<Link href={{pathname:'/user', query:{id : item.User.id} }} as={`user/${item.User.id}` }><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                        content={item.content}\r\n                      />\r\n                      </li>\r\n                 )}\r\n            />\r\n            </>\r\n\r\n        )}\r\n        </div>\r\n    )\r\n     \r\n})\r\n\r\nPostCard.propTypes = {\r\n                    //shape을 써서 객체의 각 props의 상세 타입을 지정할 수 있다.\r\n    post : PropTypes.shape({\r\n            User: PropTypes.object,\r\n            content : PropTypes.string,\r\n            images:PropTypes.array,\r\n           // createdAt:PropTypes.object\r\n    })\r\n}\r\n\r\nexport default PostCard;    "]},"metadata":{},"sourceType":"module"}