{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\practice\\\\front\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n//next에서 제공하는 최상위 컴포넌트 파일 (_app.js로 직접 만들어야 한다. )\n//페이지들의 공통적인 부분기여주기 \nimport AppLayout from '../components/AppLayout';\nimport Head from 'next/head';\nimport React from 'react';\nimport PropTypes from 'prop-types'; // 모든 컴포넌트는 _app.js를 공유한다. \n// redux는 state의 중앙통제실 역할을 하므로 모든 컴포넌트의 state를 컨트롤 하기 위해\n// _app.js에다가 redux를 연결해 주는 작업이 필요하다. \n//--react, redux 연결하기 \n\nimport { Provider } from 'react-redux'; //redux state 제공, 이것으로 전체 컴포넌트의 state를 관리 할 수 있다. \n\nimport reducer from '../reducers';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport withRedux from 'next-redux-wrapper'; //리덕스 사가 \n\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\n\nconst NodeBird = ({\n  Component,\n  store\n}) => {\n  //▲ next에서 제공하는 props\n  return __jsx(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, \" \", __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.min.css\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  })), __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, __jsx(Component, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }))));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType,\n  store: PropTypes.object\n}; //제로초가 그냥 외우라고함... \n\nexport default withRedux((initialState, options) => {\n  const middleWares = [];\n  const enhancer = compose(applyMiddleware(...middleWares), !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f //브라우저에 REDUX DEVTOOLS 설치시 \n  //window객체애 해당 변수(__REDUX_DEVTOOLS_EXTENSION)가 생성됨, __REDUX_DEVTOOLS_EXTENSION__()해당 함수를 사용할 수 있게됨\n  );\n  const store = createStore(reducer, initialState, enhancer);\n  return store;\n})(NodeBird);","map":{"version":3,"sources":["D:/git Repository/practice/front/pages/_app.js"],"names":["AppLayout","Head","React","PropTypes","Provider","reducer","createStore","compose","applyMiddleware","withRedux","createSagaMiddleware","rootSaga","NodeBird","Component","store","propTypes","elementType","object","initialState","options","middleWares","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION","__REDUX_DEVTOOLS_EXTENSION__","f"],"mappings":";;AAAA;AACA;AAEA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;AAEA;;AACA,SAAQC,QAAR,QAAuB,aAAvB,C,CAAsC;;AACtC,OAAOC,OAAP,MAAoB,aAApB;AACA,SAAQC,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,OAAOC,SAAP,MAAsB,oBAAtB,C,CAGA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAWC,EAAAA;AAAX,CAAD,KAAsB;AACnB;AAEZ,SACA,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,iEAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADA,EAKA,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALA,CADJ,CADA;AAeP,CAlBD;;AAmBAF,QAAQ,CAACG,SAAT,GAAqB;AACjBF,EAAAA,SAAS,EAAEV,SAAS,CAACa,WADJ;AAEjBF,EAAAA,KAAK,EAAMX,SAAS,CAACc;AAFJ,CAArB,C,CAMA;;AACA,eAAeR,SAAS,CAAC,CAACS,YAAD,EAAcC,OAAd,KAAwB;AAC7C,QAAMC,WAAW,GAAG,EAApB;AAGA,QAAMC,QAAQ,GAAGd,OAAO,CACIC,eAAe,CAAC,GAAGY,WAAJ,CADnB,EAEI,CAACD,OAAO,CAACG,QAAT,IAAqBC,MAAM,CAACC,0BAAP,KAAsC,WAA3D,GAAwED,MAAM,CAACE,4BAAP,EAAxE,GAAiHC,CAAD,IAAKA,CAFzH,CAGI;AACA;AAJJ,GAAxB;AAOA,QAAMZ,KAAK,GAAGR,WAAW,CAACD,OAAD,EAASa,YAAT,EAAsBG,QAAtB,CAAzB;AAGI,SAAOP,KAAP;AACP,CAfuB,CAAT,CAeZF,QAfY,CAAf","sourcesContent":["//next에서 제공하는 최상위 컴포넌트 파일 (_app.js로 직접 만들어야 한다. )\r\n//페이지들의 공통적인 부분기여주기 \r\n\r\nimport AppLayout from '../components/AppLayout'; \r\nimport Head from 'next/head'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// 모든 컴포넌트는 _app.js를 공유한다. \r\n// redux는 state의 중앙통제실 역할을 하므로 모든 컴포넌트의 state를 컨트롤 하기 위해\r\n// _app.js에다가 redux를 연결해 주는 작업이 필요하다. \r\n\r\n//--react, redux 연결하기 \r\nimport {Provider} from 'react-redux'; //redux state 제공, 이것으로 전체 컴포넌트의 state를 관리 할 수 있다. \r\nimport reducer from '../reducers'; \r\nimport {createStore, compose, applyMiddleware} from 'redux'\r\nimport withRedux from 'next-redux-wrapper'\r\n\r\n\r\n//리덕스 사가 \r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\n\r\nconst NodeBird = ({Component,store}) =>{\r\n                    //▲ next에서 제공하는 props\r\n\r\n        return (\r\n        <Provider store={store}> {/*이 store가 redux state이다. 이 store가 전체 컴포넌트 state를 다 받는다. */}\r\n            <div>\r\n            <Head>\r\n                <title>NodeBird</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.min.css\"/>\r\n            </Head>\r\n            <AppLayout >\r\n                <Component />\r\n            </AppLayout>  \r\n            </div>\r\n        </Provider>\r\n\r\n        )\r\n\r\n}\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType,\r\n    store    : PropTypes.object, \r\n}\r\n\r\n\r\n//제로초가 그냥 외우라고함... \r\nexport default withRedux((initialState,options)=>{\r\n    const middleWares = [];\r\n                     \r\n                      \r\n    const enhancer = compose(\r\n                                applyMiddleware(...middleWares),\r\n                                !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION !== 'undefined'? window.__REDUX_DEVTOOLS_EXTENSION__() : (f)=>f,\r\n                                //브라우저에 REDUX DEVTOOLS 설치시 \r\n                                //window객체애 해당 변수(__REDUX_DEVTOOLS_EXTENSION)가 생성됨, __REDUX_DEVTOOLS_EXTENSION__()해당 함수를 사용할 수 있게됨\r\n\r\n                                );\r\n    const store = createStore(reducer,initialState,enhancer); \r\n\r\n    \r\n        return store; \r\n})(NodeBird); "]},"metadata":{},"sourceType":"module"}