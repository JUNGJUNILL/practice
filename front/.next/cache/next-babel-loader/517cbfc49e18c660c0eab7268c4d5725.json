{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ConsoleSqlOutlined } from \"@ant-design/icons\";\nexport const initialState = {\n  mainPosts: [],\n  //화면에 보일 POST들 \n  imagePaths: [],\n  //미리보기 이미지 경로 \n  addPostErrorReason: false,\n  // POST 업로드 실패 사유 \n  isAddingPost: false,\n  //post업로드중 \n  postAdded: false,\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false,\n  hasMorePost: false\n};\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nconst dummyPost = {\n  id: 4,\n  User: {\n    id: 1,\n    nickname: '주닐정'\n  },\n  content: '나는 더미 입니다.',\n  Comments: []\n};\nconst dummyComment = {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: '주닐정'\n  },\n  createdAt: new Date(),\n  content: '더미 댓글 입니다...'\n}; //const ADD_DUMMY = 'ADD_DUMMY'; \n\nconst addPost = {\n  type: ADD_POST_REQUEST\n}; // const addDummy ={\n//     type:ADD_DUMMY, \n//     data : {\n//         content : 'Hello', \n//         UserId : 1, \n//         User : {\n//             nickname:'정준일', \n//         },\n//     },\n// }\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          mainPosts: [action.data, ...state.mainPosts],\n          postAdded: true,\n          imagePaths: []\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n    //---------댓글 달기 액션    \n\n    case ADD_COMMENT_REQUEST:\n      {\n        console.log('ADD_COMMENT_REQUEST==>', ADD_COMMENT_REQUEST);\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          addCommentErrorReason: '',\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Comments = [...post.Comments, action.data.comment];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n    //---------댓글 달기 액션\n\n    case LOAD_COMMENTS_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Comments = action.data.comments;\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments\n        });\n        return _objectSpread({}, state, {\n          mainPosts\n        });\n      }\n\n    case LOAD_MAIN_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: action.lastId === 0 ? [] : state.mainPosts,\n          hasMorePost: action.lastId ? state.hasMorePost : true\n        });\n      }\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: state.mainPosts.concat(action.data),\n          hasMorePost: action.data.length === 3\n        });\n      }\n\n    case LOAD_MAIN_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //이미지 업로드------------------------------------------\n\n    case UPLOAD_IMAGES_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          imagePaths: [...state.imagePaths, ...action.data]\n        });\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_IMAGE:\n      {\n        return _objectSpread({}, state, {\n          imagePaths: state.imagePaths.filter((v, i) => i !== action.index)\n        });\n      }\n    //이미지 업로드------------------------------------------\n    //게시글 좋아요------------------------------------------\n\n    case LIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Likers = [{\n          id: action.data.userId\n        }, ...post.Likers];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Likers\n        });\n        return _objectSpread({}, state, {\n          mainPosts\n        });\n      }\n\n    case LIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //게시글 좋아요------------------------------------------\n    //게시글 좋아요 취소------------------------------------------\n\n    case UNLIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Likers = post.Likers.filter(v => v.id !== action.data.userId);\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Likers\n        });\n        return _objectSpread({}, state, {\n          mainPosts\n        });\n      }\n\n    case UNLIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //게시글 좋아요 취소------------------------------------------\n    //리트윗------------------------------------------\n\n    case RETWEET_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case RETWEET_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: [action.data, ...state.mainPosts.PostId]\n        });\n      }\n\n    case RETWEET_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //리트윗------------------------------------------\n    //게시글 삭제------------------------------------------\n\n    case REMOVE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_POST_SUCCESS:\n      {\n        console.log('REMOVE_POST_SUCCESS===>', action.data);\n        return _objectSpread({}, state, {\n          mainPosts: state.mainPosts.filter(v => v.id !== action.data)\n        });\n      }\n\n    case REMOVE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //게시글 삭제------------------------------------------\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/git Repository/practice/front/reducers/post.js"],"names":["ConsoleSqlOutlined","initialState","mainPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","hasMorePost","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","dummyPost","id","User","nickname","content","Comments","dummyComment","createdAt","Date","addPost","type","reducer","state","action","data","error","console","log","postIndex","findIndex","v","postId","post","comment","comments","lastId","concat","length","filter","i","index","Likers","userId","PostId"],"mappings":"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","sourcesContent":["import { ConsoleSqlOutlined } from \"@ant-design/icons\";\r\n\r\nexport const initialState = {\r\n\r\n     mainPosts : [],  //화면에 보일 POST들 \r\n\r\n\r\n     imagePaths : [], //미리보기 이미지 경로 \r\n     addPostErrorReason : false, // POST 업로드 실패 사유 \r\n     isAddingPost : false, //post업로드중 \r\n     postAdded : false, \r\n     isAddingComment: false,\r\n     addCommentErrorReason:'',\r\n     commentAdded: false,\r\n     hasMorePost : false, \r\n\r\n\r\n};\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST'; \r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS'; \r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE'; \r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST'; \r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS'; \r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE'; \r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST'; \r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS'; \r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; \r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE'; \r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST'; \r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS'; \r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE'; \r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST'; \r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS'; \r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE'; \r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST'; \r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS'; \r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; \r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST ='RETWEET_REQUEST'; \r\nexport const RETWEET_SUCCESS ='RETWEET_SUCCESS'; \r\nexport const RETWEET_FAILURE ='RETWEET_FAILURE'; \r\n\r\nexport const REMOVE_POST_REQUEST='REMOVE_POST_REQUEST'; \r\nexport const REMOVE_POST_SUCCESS='REMOVE_POST_SUCCESS'; \r\nexport const REMOVE_POST_FAILURE='REMOVE_POST_FAILURE'; \r\n\r\n\r\nconst dummyPost = {\r\n    id:4,\r\n    User: {\r\n        id:1,\r\n        nickname:'주닐정', \r\n\r\n    }, \r\n    content:'나는 더미 입니다.', \r\n    Comments:[], \r\n}\r\n\r\nconst dummyComment = {\r\n                        id:1,\r\n                        User: {\r\n                            id:1,\r\n                            nickname:'주닐정',\r\n\r\n                        }, \r\n                        createdAt: new Date(),\r\n                        content : '더미 댓글 입니다...',\r\n\r\n}\r\n\r\n//const ADD_DUMMY = 'ADD_DUMMY'; \r\n\r\n\r\nconst addPost = {\r\n\r\n    type:ADD_POST_REQUEST,\r\n\r\n}\r\n\r\n// const addDummy ={\r\n//     type:ADD_DUMMY, \r\n//     data : {\r\n//         content : 'Hello', \r\n//         UserId : 1, \r\n//         User : {\r\n//             nickname:'정준일', \r\n//         },\r\n//     },\r\n// }\r\n\r\n\r\nconst reducer = (state = initialState , action) =>{\r\n\r\n    switch(action.type){\r\n        case ADD_POST_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isAddingPost:true, \r\n                addPostErrorReason:'', \r\n                postAdded: false, \r\n            }\r\n        }\r\n\r\n        case ADD_POST_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                isAddingPost:false,\r\n                mainPosts:[action.data, ...state.mainPosts],\r\n                postAdded:true, \r\n                imagePaths:[],\r\n            }\r\n        }\r\n        case ADD_POST_FAILURE : {\r\n            return {\r\n                ...state,\r\n                isAddingPost:false,\r\n                addPostErrorReason :action.error,\r\n            }\r\n        }\r\n\r\n //---------댓글 달기 액션    \r\n\r\n        case ADD_COMMENT_REQUEST : {\r\n            console.log('ADD_COMMENT_REQUEST==>' , ADD_COMMENT_REQUEST); \r\n            return {\r\n                ...state,\r\n                isAddingComment : true,\r\n                addCommentErrorReason:'',\r\n                commentAdded: false, \r\n\r\n            }\r\n        }\r\n\r\n        case ADD_COMMENT_SUCCESS : {\r\n            const postIndex = state.mainPosts.findIndex(v=>v.id===action.data.postId); \r\n            const post = state.mainPosts[postIndex]; \r\n            const Comments = [...post.Comments,action.data.comment]; \r\n            const mainPosts = [...state.mainPosts]; \r\n            mainPosts[postIndex] = {...post,Comments}; \r\n\r\n            return {\r\n                ...state,\r\n                isAddingComment : false, \r\n                mainPosts,\r\n                commentAdded: true, \r\n\r\n            }\r\n        }\r\n        case ADD_COMMENT_FAILURE : {\r\n            return {\r\n                ...state,\r\n                isAddingComment:false, \r\n                addCommentErrorReason:action.error,\r\n\r\n            }\r\n        }\r\n//---------댓글 달기 액션\r\n\r\n        case LOAD_COMMENTS_SUCCESS :{\r\n            const postIndex = state.mainPosts.findIndex(v=>v.id===action.data.postId); \r\n            const post = state.mainPosts[postIndex]; \r\n            const Comments  = action.data.comments; \r\n            const mainPosts = [...state.mainPosts]; \r\n            mainPosts[postIndex] = {...post,Comments}; \r\n            return{\r\n                ...state,\r\n                mainPosts,\r\n            };\r\n        }\r\n\r\n\r\n            case LOAD_MAIN_POSTS_REQUEST :\r\n            case LOAD_HASHTAG_POSTS_REQUEST :\r\n            case LOAD_USER_POSTS_REQUEST : {\r\n                return {\r\n                    ...state,\r\n                    mainPosts:action.lastId === 0 ? [] : state.mainPosts,\r\n                    hasMorePost : action.lastId ? state.hasMorePost : true,\r\n                }\r\n            }\r\n\r\n            case LOAD_MAIN_POSTS_SUCCESS :\r\n            case LOAD_HASHTAG_POSTS_SUCCESS :\r\n            case LOAD_USER_POSTS_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                mainPosts:state.mainPosts.concat(action.data),\r\n                hasMorePost : action.data.length === 3,\r\n\r\n            }\r\n        }\r\n\r\n            case LOAD_MAIN_POSTS_FAILURE :\r\n            case LOAD_HASHTAG_POSTS_FAILURE :\r\n            case LOAD_USER_POSTS_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n\r\n//이미지 업로드------------------------------------------\r\n        case UPLOAD_IMAGES_REQUEST : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n        case UPLOAD_IMAGES_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                imagePaths: [...state.imagePaths, ...action.data],\r\n            }\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE : {\r\n            return {\r\n                ...state,\r\n\r\n            }\r\n        }\r\n\r\n        case REMOVE_IMAGE : {\r\n            return{\r\n                ...state,\r\n                imagePaths:state.imagePaths.filter((v,i)=> i !== action.index),\r\n            }\r\n        }\r\n//이미지 업로드------------------------------------------\r\n\r\n//게시글 좋아요------------------------------------------\r\n        case LIKE_POST_REQUEST : {\r\n\r\n\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n        case LIKE_POST_SUCCESS : {\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Likers = [{ id: action.data.userId }, ...post.Likers];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Likers };\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n      };\r\n    }\r\n        case LIKE_POST_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n//게시글 좋아요------------------------------------------\r\n\r\n\r\n\r\n//게시글 좋아요 취소------------------------------------------\r\n        case UNLIKE_POST_REQUEST : {\r\n\r\n\r\n            return {\r\n                ...state,\r\n            \r\n            }\r\n        }\r\n\r\n        case UNLIKE_POST_SUCCESS : {\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Likers = post.Likers.filter(v => v.id !== action.data.userId);\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Likers };\r\n            return {\r\n              ...state,\r\n              mainPosts,\r\n            };\r\n          }\r\n        case UNLIKE_POST_FAILURE : {\r\n            return {\r\n                ...state,\r\n\r\n            }\r\n        }\r\n//게시글 좋아요 취소------------------------------------------\r\n\r\n\r\n\r\n\r\n//리트윗------------------------------------------\r\n        case RETWEET_REQUEST : {\r\n\r\n\r\n            return {\r\n                ...state,\r\n            \r\n            }\r\n        }\r\n\r\n        case RETWEET_SUCCESS : {\r\n\r\n            return {\r\n                ...state,\r\n                mainPosts : [action.data, ...state.mainPosts.PostId],\r\n            };\r\n        }\r\n        case RETWEET_FAILURE : {\r\n            return {\r\n                ...state,\r\n\r\n            }\r\n        }\r\n//리트윗------------------------------------------\r\n\r\n\r\n//게시글 삭제------------------------------------------\r\n        case REMOVE_POST_REQUEST : {\r\n\r\n\r\n            return {\r\n                ...state,\r\n            \r\n            }\r\n        }\r\n\r\n        case REMOVE_POST_SUCCESS : {\r\n            \r\n            console.log('REMOVE_POST_SUCCESS===>' , action.data);\r\n            return {\r\n                ...state,\r\n                mainPosts : state.mainPosts.filter((v)=>v.id !== action.data), \r\n            };\r\n        }\r\n        case REMOVE_POST_FAILURE : {\r\n            return {\r\n                ...state,\r\n\r\n            }\r\n        }\r\n//게시글 삭제------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n        default : {\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default reducer; "]},"metadata":{},"sourceType":"module"}