{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginAPI),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(hello),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchHello),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'; //call : 함수 동기적 호출 \n//fort : 함수 비동기적 호출 \n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n\nexport var HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {\n  return _regeneratorRuntime.wrap(function loginAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('watchLogin');\n          _context3.next = 3;\n          return take(LOG_IN);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction hello() {\n  return _regeneratorRuntime.wrap(function hello$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return put({\n            type: 'HELLO_TWO'\n          });\n\n        case 3:\n          console.log('hello');\n          _context4.next = 9;\n          break;\n\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 6]]);\n}\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.log('before saga');\n\n        case 1:\n          if (!true) {\n            _context5.next = 7;\n            break;\n          }\n\n          _context5.next = 4;\n          return take(HELLO_SAGA);\n\n        case 4:\n          console.log('hello saga');\n          _context5.next = 1;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([watchHello(), watchLogin()]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/user.js"],"names":["loginAPI","login","watchLogin","hello","watchHello","userSaga","all","fork","takeLatest","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","type","console","error","log"],"mappings":";;oDAWUA,Q;qDAKAC,K;qDAkBAC,U;qDAWAC,K;qDAYAC,U;qDAUeC,Q;;AAnEzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,IAA1C,QAAqD,oBAArD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,UAAU,GAAG,YAAnB;;AAEP,SAAUf,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQ,iBAAMQ,IAAI,CAACT,QAAD,CAAV;;AAJR;AAAA;AAKQ,iBAAMU,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUQI,UAAAA,OAAO,CAACC,KAAR;AAVR;AAWQ,iBAAMR,GAAG,CAAC;AACNM,YAAAA,IAAI,EAACF;AADC,WAAD,CAAT;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AACIe,UAAAA,OAAO,CAACE,GAAR,CAAY,YAAZ;AADJ;AAEI,iBAAMR,IAAI,CAACC,MAAD,CAAV;;AAFJ;AAAA;AAMI,iBAAMF,GAAG,CAAC;AACNM,YAAAA,IAAI,EAACH;AADC,WAAD,CAAT;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUV,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMO,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAC;AADC,WAAD,CAAT;;AAFR;AAKQC,UAAAA,OAAO,CAACE,GAAR,CAAY,OAAZ;AALR;AAAA;;AAAA;AAAA;AAAA;AAQQF,UAAAA,OAAO,CAACC,KAAR;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AACIa,UAAAA,OAAO,CAACE,GAAR,CAAY,aAAZ;;AADJ;AAAA,eAEU,IAFV;AAAA;AAAA;AAAA;;AAAA;AAGQ,iBAAMR,IAAI,CAACI,UAAD,CAAV;;AAHR;AAIQE,UAAAA,OAAO,CAACE,GAAR,CAAY,YAAZ;AAJR;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAe,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX,iBAAMC,GAAG,CAAC,CACNF,UAAU,EADJ,EAENF,UAAU,EAFJ,CAAD,CAAT;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all ,fork, takeLatest, call, put, take }from 'redux-saga/effects'; \r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\n//call : 함수 동기적 호출 \r\n//fort : 함수 비동기적 호출 \r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\nfunction* loginAPI(){\r\n//서버에 요청하는 부분 \r\n\r\n}\r\n\r\nfunction* login(){\r\n\r\n    try{\r\n        \r\n        yield call(loginAPI); \r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogin(){\r\n    console.log('watchLogin'); \r\n    yield take(LOG_IN);\r\n          //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \r\n          // dispatch될 때 login 제너레이터를 호출한다. \r\n\r\n    yield put({\r\n        type:LOG_IN_SUCCESS,\r\n    });\r\n}\r\n\r\nfunction* hello(){\r\n    try{\r\n        yield put({\r\n            type:'HELLO_TWO',\r\n        }); \r\n        console.log('hello'); \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n    }\r\n}\r\n\r\nfunction* watchHello(){\r\n    console.log('before saga'); \r\n    while(true){\r\n        yield take(HELLO_SAGA); \r\n        console.log('hello saga'); \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        watchHello(),\r\n        watchLogin(), \r\n    ]) \r\n\r\n}"]},"metadata":{},"sourceType":"module"}