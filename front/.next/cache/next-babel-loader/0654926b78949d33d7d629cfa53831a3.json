{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \n//axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  console.log('postData===>', postData);\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    console.log('posts==>', result.data);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error('ADD_POST_FAILURE==>', e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* whatchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.comment\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction loadCommentstAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = call(loadCommentstAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* whatchAddComment() {\n  console.log('whatchAddComment');\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadHashtagPosts() {\n  console.log('watchLoadHashtagPosts');\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  console.log('watchLoadUserPosts');\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadComments() {\n  console.log('watchLoadComments');\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(whatchAddPost), fork(whatchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_REQUEST","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","addPostAPI","postData","console","log","post","withCredentials","loadMainPostsAPI","get","loadMainPosts","action","result","data","type","e","error","loadHashtagPostsAPI","tag","loadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","addPost","whatchAddPost","watchLoadMainPosts","addCommentAPI","postId","content","comment","addComment","loadCommentstAPI","loadComments","whatchAddComment","watchLoadHashtagPosts","watchLoadUserPosts","watchLoadComments","postSaga"],"mappings":"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","sourcesContent":["import {all,fork,takeLatest, put, delay,call} from 'redux-saga/effects'; \r\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \r\n                           //axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \r\n\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from '../reducers/post';\r\n\r\n\r\nfunction addPostAPI(postData){\r\n    console.log('postData===>' , postData); \r\n    return axios.post('/post',postData,{withCredentials:true}); \r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n\r\n    return axios.get('/posts'); \r\n}\r\n\r\n\r\nfunction* loadMainPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadMainPostsAPI);       \r\n            console.log('posts==>',result.data); \r\n            yield put({\r\n                type:LOAD_MAIN_POSTS_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadHashtagPostsAPI(tag){\r\n\r\n    return axios.get(`/hashtag/${tag}`); \r\n}\r\n\r\n\r\nfunction* loadHashtagPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadHashtagPostsAPI,action.data);     \r\n           yield put({\r\n               type:LOAD_HASHTAG_POSTS_SUCCESS,\r\n               data: result.data,\r\n           })  \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadUserPostsAPI(id){\r\n\r\n    return axios.get(`/user/${id}/posts`); \r\n}\r\n\r\n\r\nfunction* loadUserPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadUserPostsAPI,action.data);    \r\n           yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })  \r\n          \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction* addPost(action){\r\n\r\n    try{\r\n            const result = yield call(addPostAPI,action.data);\r\n \r\n            yield put({\r\n                type:ADD_POST_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error('ADD_POST_FAILURE==>' ,e); \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction* whatchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost); \r\n\r\n}\r\n\r\nfunction* watchLoadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts); \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, {content: data.comment},{withCredentials:true});\r\n}\r\n\r\nfunction* addComment(action){\r\n\r\n    try{\r\n        const result = call(addCommentAPI,action.data);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                postId:action.data.postId,\r\n                comment:result.data,\r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:ADD_COMMENT_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction loadCommentstAPI(postId){\r\n\r\n    return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action){\r\n\r\n    try{\r\n        const result = call(loadCommentstAPI,action.data);\r\n        yield put({\r\n            type:LOAD_COMMENTS_SUCCESS,\r\n            data:{\r\n                postId:action.data,\r\n                comment:result.data,\r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:LOAD_COMMENTS_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\n\r\nfunction* whatchAddComment(){\r\n    console.log('whatchAddComment'); \r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); \r\n    \r\n}\r\n\r\nfunction* watchLoadHashtagPosts(){\r\n    console.log('watchLoadHashtagPosts'); \r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts); \r\n}\r\n\r\nfunction* watchLoadUserPosts(){\r\n    console.log('watchLoadUserPosts');\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST,loadUserPosts); \r\n}\r\n\r\nfunction* watchLoadComments(){\r\n    console.log('watchLoadComments'); \r\n    yield takeLatest(LOAD_COMMENTS_REQUEST,loadComments);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n\r\n yield all([\r\n     fork(watchLoadMainPosts),\r\n     fork(whatchAddPost), \r\n     fork(whatchAddComment), \r\n     fork(watchLoadComments),\r\n     fork(watchLoadHashtagPosts),\r\n     fork(watchLoadUserPosts),\r\n ]); \r\n\r\n}"]},"metadata":{},"sourceType":"module"}