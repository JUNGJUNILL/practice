{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(whatchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(whatchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\naxios.defaults.baseURL = 'http://captainryan.gonetis.com:3065/api';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction whatchAddPost() {\n  return _regeneratorRuntime.wrap(function whatchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI() {}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log('action.data.postId==>', action.data.postId);\n          _context3.next = 4;\n          return delay(2000);\n\n        case 4:\n          _context3.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              poSstId: action.data.postId\n            }\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction whatchAddComment() {\n  return _regeneratorRuntime.wrap(function whatchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          console.log('whatchAddComment');\n          _context4.next = 3;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(whatchAddPost), fork(whatchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/post.js"],"names":["addPost","whatchAddPost","addComment","whatchAddComment","postSaga","all","fork","takeLatest","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","defaults","baseURL","addPostAPI","postData","post","withCredentials","type","console","error","addCommentAPI","action","log","data","postId","poSstId"],"mappings":";;oDAUUA,O;qDAmBAC,a;qDAYAC,U;qDAwBAC,gB;qDAOeC,Q;;AAxEzB,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,UAAjB,EAA6BC,GAA7B,EAAkCC,KAAlC,QAA8C,oBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EAA+DC,mBAA/D,EAAoFC,mBAApF,EAAyGC,mBAAzG,QAAoI,kBAApI;AAEAN,KAAK,CAACO,QAAN,CAAeC,OAAf,GAAuB,yCAAvB;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA6B;AAEzB,SAAOV,KAAK,CAACW,IAAN,CAAW,OAAX,EAAmBD,QAAnB,EAA4B;AAACE,IAAAA,eAAe,EAAC;AAAjB,GAA5B,CAAP;AACH;;AACD,SAAUtB,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGY,iBAAMS,KAAK,CAAC,IAAD,CAAX;;AAHZ;AAAA;AAIY,iBAAMD,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACX;AADC,WAAD,CAAT;;AAJZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQY,UAAAA,OAAO,CAACC,KAAR;AATR;AAUQ,iBAAMjB,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACV,gBADC;AAENY,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAUxB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACI,gBAAD,EAAkBX,OAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAS0B,aAAT,GAAwB,CAEvB;;AAED,SAAUxB,UAAV,CAAqByB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQH,UAAAA,OAAO,CAACI,GAAR,CAAY,uBAAZ,EAAsCD,MAAM,CAACE,IAAP,CAAYC,MAAlD;AAHR;AAIQ,iBAAMrB,KAAK,CAAC,IAAD,CAAX;;AAJR;AAAA;AAKQ,iBAAMD,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACR,mBADC;AAENc,YAAAA,IAAI,EAAC;AACDE,cAAAA,OAAO,EAACJ,MAAM,CAACE,IAAP,CAAYC;AADnB;AAFC,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaIN,UAAAA,OAAO,CAACI,GAAR;AAbJ;AAcI,iBAAMpB,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACP,mBADC;AAENS,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBA,SAAUtB,gBAAV;AAAA;AAAA;AAAA;AAAA;AACIqB,UAAAA,OAAO,CAACI,GAAR,CAAY,kBAAZ;AADJ;AAEI,iBAAMrB,UAAU,CAACO,mBAAD,EAAsBZ,UAAtB,CAAhB;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEd,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACL,aAAD,CADE,EAENK,IAAI,CAACH,gBAAD,CAFE,CAAD,CAAT;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all,fork,takeLatest, put, delay} from 'redux-saga/effects'; \r\nimport axios from 'axios';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\r\n\r\naxios.defaults.baseURL='http://captainryan.gonetis.com:3065/api';\r\n\r\nfunction addPostAPI(postData){\r\n\r\n    return axios.post('/post',postData,{withCredentials:true}); \r\n}\r\nfunction* addPost(){\r\n\r\n    try{\r\n            yield delay(2000);\r\n            yield put({\r\n                type:ADD_POST_SUCCESS,\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\nfunction* whatchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost); \r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction addCommentAPI(){\r\n\r\n}\r\n\r\nfunction* addComment(action){\r\n\r\n    try{\r\n        console.log('action.data.postId==>' , action.data.postId); \r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                poSstId:action.data.postId,\r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:ADD_COMMENT_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\nfunction* whatchAddComment(){\r\n    console.log('whatchAddComment'); \r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); \r\n    \r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n\r\n yield all([\r\n     fork(whatchAddPost), \r\n     fork(whatchAddComment), \r\n ]); \r\n\r\n}"]},"metadata":{},"sourceType":"module"}