{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadMainPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(whatchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(whatchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \n//axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  console.log('postData===>', postData);\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction loadMainPosts(action) {\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: mainPostsData\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction addPost(action) {\n  var result, postData;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return result.then(function (resolve) {\n            return resolve.data;\n          });\n\n        case 6:\n          postData = _context2.sent;\n          console.log('postData===>', postData);\n          _context2.next = 10;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: postData\n          });\n\n        case 10:\n          _context2.next = 17;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 17;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context2.t0\n          });\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 12]]);\n}\n\nfunction whatchAddPost() {\n  return _regeneratorRuntime.wrap(function whatchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction addCommentAPI() {}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          console.log('action.data.postId==>', action.data.postId);\n          _context5.next = 4;\n          return delay(2000);\n\n        case 4:\n          _context5.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              poSstId: action.data.postId\n            }\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context5.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction whatchAddComment() {\n  return _regeneratorRuntime.wrap(function whatchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          console.log('whatchAddComment');\n          _context6.next = 3;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLoadMainPosts), fork(whatchAddPost), fork(whatchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/post.js"],"names":["loadMainPosts","addPost","whatchAddPost","watchLoadMainPosts","addComment","whatchAddComment","postSaga","all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","addPostAPI","postData","console","log","post","withCredentials","loadMainPostsAPI","get","action","type","data","mainPostsData","error","result","then","resolve","addCommentAPI","postId","poSstId"],"mappings":"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","sourcesContent":["import {all,fork,takeLatest, put, delay,call} from 'redux-saga/effects'; \r\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \r\n                           //axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \r\n\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\r\n\r\n\r\nfunction addPostAPI(postData){\r\n    console.log('postData===>' , postData); \r\n    return axios.post('/post',postData,{withCredentials:true}); \r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n\r\n    return axios.get('/posts'); \r\n}\r\n\r\n\r\nfunction* loadMainPosts(action){\r\n\r\n    try{\r\n           yield call(loadMainPostsAPI); \r\n        \r\n\r\n            yield put({\r\n                type:LOAD_MAIN_POSTS_SUCCESS,\r\n                data:mainPostsData,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\nfunction* addPost(action){\r\n\r\n    try{\r\n            const result = yield call(addPostAPI,action.data);\r\n            const postData = yield result.then((resolve)=>{\r\n                \r\n                return resolve.data; \r\n            }); \r\n            console.log('postData===>',postData); \r\n            yield put({\r\n                type:ADD_POST_SUCCESS,\r\n                data:postData,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction* whatchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost); \r\n\r\n}\r\n\r\nfunction* watchLoadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts); \r\n}\r\n\r\n\r\n\r\n\r\nfunction addCommentAPI(){\r\n\r\n}\r\n\r\nfunction* addComment(action){\r\n\r\n    try{\r\n        console.log('action.data.postId==>' , action.data.postId); \r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                poSstId:action.data.postId,\r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:ADD_COMMENT_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\nfunction* whatchAddComment(){\r\n    console.log('whatchAddComment'); \r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); \r\n    \r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n\r\n yield all([\r\n     fork(watchLoadMainPosts),\r\n     fork(whatchAddPost), \r\n     fork(whatchAddComment), \r\n ]); \r\n\r\n}"]},"metadata":{},"sourceType":"module"}