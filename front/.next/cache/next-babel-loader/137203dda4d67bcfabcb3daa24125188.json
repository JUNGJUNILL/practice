{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginAPI),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(signUpAPI),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logoutAPI),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserAPI),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUser),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(loadUser),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(hello),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchHello),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, call, put, delay, takeEvery, take } from 'redux-saga/effects'; //이 외에도\n// race, cancel, select, throttle, debounce 등 도 있다. \n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from '../reducers/user';\nimport axios from 'axios'; //call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\n//fort : 함수 비동기적 호출  \n//---------------------------둘 다 함수를 실행시켜준다.\n//put  : 액션 , 사가의 dispatch\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\n\naxios.defaults.baseURL = 'http://captainryan.gonetis.com:3065/api';\nexport var HELLO_SAGA = 'HELLO_SAGA'; //-----------------------------------API\n\nfunction loginAPI(loginData) {\n  return _regeneratorRuntime.wrap(function loginAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", axios.post('/user/login', loginData, {\n            withCredentials: true\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} //▲백엔드와 프론트간에 쿠키를 주고 받을 수 있다.\n\n\nfunction signUpAPI(signUpData) {\n  return _regeneratorRuntime.wrap(function signUpAPI$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", axios.post('/user/signUp', signUpData));\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction logoutAPI() {\n  return _regeneratorRuntime.wrap(function logoutAPI$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", axios.post('/user/logout', {}, {\n            withCredentials: true\n          }));\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction loadUserAPI() {\n  return _regeneratorRuntime.wrap(function loadUserAPI$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", axios.get('/user/', {}, {\n            withCredentials: true\n          }));\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //-----------------------------------END API\n//-----------------------------------WATCH\n\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.log('watchLogin');\n          _context5.next = 3;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          console.log('watchLogout');\n          _context7.next = 3;\n          return takeEvery(LOG_OUT_REQUEST, logout);\n\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} //-----------------------------------END WATCH \n\n\nfunction login(action) {\n  var result, loginInfo;\n  return _regeneratorRuntime.wrap(function login$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return result.then(function (resolve) {\n            return resolve.data;\n          });\n\n        case 6:\n          loginInfo = _context9.sent;\n          _context9.next = 9;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: loginInfo\n          });\n\n        case 9:\n          _context9.next = 16;\n          break;\n\n        case 11:\n          _context9.prev = 11;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 16;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 16:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 11]]);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          console.log('action.data-->' + action.data); //  yield call(signUpAPI);\n\n          _context10.next = 4;\n          return call(signUpAPI, action.data);\n\n        case 4:\n          _context10.next = 6;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 6:\n          _context10.next = 13;\n          break;\n\n        case 8:\n          _context10.prev = 8;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error(_context10.t0);\n          _context10.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 8]]);\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(logoutAPI);\n\n        case 3:\n          _context11.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context11.next = 12;\n          break;\n\n        case 7:\n          _context11.prev = 7;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 7]]);\n}\n\nfunction loadUser() {\n  var result, userData;\n  return _regeneratorRuntime.wrap(function loadUser$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.prev = 0;\n          _context12.next = 3;\n          return call(loadUserAPI);\n\n        case 3:\n          result = _context12.sent;\n          _context12.next = 6;\n          return result.then(function (resolve) {\n            return resolve.data;\n          });\n\n        case 6:\n          userData = _context12.sent;\n          console.log('userData==>', userData);\n          _context12.next = 10;\n          return put({\n            type: LOAD_USER_SUCCESS,\n            data: userData\n          });\n\n        case 10:\n          _context12.next = 18;\n          break;\n\n        case 12:\n          _context12.prev = 12;\n          _context12.t0 = _context12[\"catch\"](0);\n          console.log('eeee==>', _context12.t0);\n          console.error(_context12.t0);\n          _context12.next = 18;\n          return put({\n            type: LOAD_USER_FAILURE\n          });\n\n        case 18:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12, null, [[0, 12]]);\n}\n\nfunction hello() {\n  return _regeneratorRuntime.wrap(function hello$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return delay(1000);\n\n        case 2:\n          _context13.next = 4;\n          return put({\n            type: 'Bye Saga'\n          });\n\n        case 4:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(HELLO_SAGA, hello);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n} //이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \n// function* watchHello(){\n//     console.log('before saga'); \n//     while(true){\n//         yield take(HELLO_SAGA); \n//         console.log('hello saga'); \n//     }\n// }\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser), //fork(watchHello),\n          fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}","map":{"version":3,"sources":["D:/git Repository/practice/front/sagas/user.js"],"names":["loginAPI","signUpAPI","logoutAPI","loadUserAPI","watchLogin","watchSignUp","watchLogout","watchLoadUser","login","signUp","logout","loadUser","hello","watchHello","userSaga","all","fork","takeLatest","call","put","delay","takeEvery","take","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","LOG_OUT_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","axios","defaults","baseURL","HELLO_SAGA","loginData","post","withCredentials","signUpData","get","console","log","action","data","result","then","resolve","loginInfo","type","error","userData"],"mappings":"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","sourcesContent":["import {all ,fork, takeLatest, call, put, delay,takeEvery,take }from 'redux-saga/effects'; \r\n//이 외에도\r\n// race, cancel, select, throttle, debounce 등 도 있다. \r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\n//call : 함수 동기적 호출   (순서를 지켜서 실행해야 하는 경우)\r\n//fort : 함수 비동기적 호출  \r\n//---------------------------둘 다 함수를 실행시켜준다.\r\n\r\n//put  : 액션 , 사가의 dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n//all  : 여러 이펙트를 동시에 실행 할 수 있게 합니다.\r\n\r\n axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api';\r\nexport const HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\n\r\n//-----------------------------------API\r\nfunction* loginAPI(loginData){\r\n//서버에 요청하는 부분 \r\n    return axios.post('/user/login',loginData,{withCredentials:true}); \r\n}\r\n                                                                                          //▲백엔드와 프론트간에 쿠키를 주고 받을 수 있다.\r\n                                                                               \r\nfunction* signUpAPI(signUpData){\r\n    \r\n    return axios.post('/user/signUp',signUpData); \r\n}        \r\n\r\n\r\nfunction* logoutAPI(){\r\n\r\n    return axios.post('/user/logout',{},{withCredentials:true});\r\n                                    //▲데이터 없더라도 빈 객체라도 보내야 한다.\r\n}\r\n\r\nfunction* loadUserAPI(){\r\n\r\n    return axios.get('/user/',{},{withCredentials:true}); \r\n}\r\n//-----------------------------------END API\r\n\r\n\r\n//-----------------------------------WATCH\r\nfunction* watchLogin(){\r\n    console.log('watchLogin'); \r\n    yield takeEvery(LOG_IN_REQUEST,login); \r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST,signUp)\r\n}\r\n\r\nfunction* watchLogout(){\r\n    console.log('watchLogout'); \r\n    yield takeEvery(LOG_OUT_REQUEST,logout); \r\n}\r\n\r\nfunction* watchLoadUser(){\r\n    yield takeLatest(LOAD_USER_REQUEST,loadUser); \r\n}\r\n//-----------------------------------END WATCH \r\n\r\nfunction* login(action){\r\n   \r\n  \r\n    try{\r\n        \r\n         const result    = yield call(loginAPI,action.data);  \r\n         const loginInfo = yield result.then((resolve)=>{\r\n            \r\n            return resolve.data; \r\n            \r\n         }); \r\n\r\n       \r\n        yield  put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: loginInfo,\r\n        });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* signUp(action){\r\n\r\n    try{\r\n        console.log('action.data-->' + action.data); \r\n      //  yield call(signUpAPI);\r\n        yield call(signUpAPI,action.data);  \r\n\r\n        yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* logout(){\r\n\r\n    try{\r\n\r\n        yield call(logoutAPI); \r\n        yield put({\r\n            type:LOG_OUT_SUCCESS, \r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_OUT_FAILURE, \r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* loadUser(){\r\n\r\n    try{\r\n\r\n      \r\n        const result   = yield call(loadUserAPI);  \r\n        const userData = yield result.then((resolve)=>{\r\n            return resolve.data; \r\n        }); \r\n        console.log('userData==>' , userData); \r\n        yield put({\r\n                type: LOAD_USER_SUCCESS,\r\n                data: userData, \r\n            })\r\n\r\n    }catch(e){\r\n        console.log('eeee==>', e); \r\n        console.error(e); \r\n\r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction* hello(){\r\n\r\n    yield delay(1000); \r\n    yield put({\r\n        type:'Bye Saga'\r\n    })\r\n}\r\n\r\nfunction* watchHello(){\r\n     yield takeLatest(HELLO_SAGA, hello); \r\n}\r\n//이 기능을 takeLatest , takeEvery 로 대체할 수 있다. \r\n// function* watchHello(){\r\n//     console.log('before saga'); \r\n//     while(true){\r\n//         yield take(HELLO_SAGA); \r\n//         console.log('hello saga'); \r\n//     }\r\n// }\r\n\r\n\r\n\r\nexport default function* userSaga() {\r\n\r\n    yield all([\r\n        fork(watchLogin), \r\n        fork(watchLogout),\r\n        fork(watchLoadUser), \r\n        //fork(watchHello),\r\n        fork(watchSignUp),\r\n        \r\n    ]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}