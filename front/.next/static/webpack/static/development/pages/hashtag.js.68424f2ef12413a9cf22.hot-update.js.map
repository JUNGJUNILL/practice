{"version":3,"file":"static/webpack/static\\development\\pages\\hashtag.js.68424f2ef12413a9cf22.hot-update.js","sources":["webpack:///./pages/hashtag.js"],"sourcesContent":["import PropTypes from 'prop-types'\r\nimport {useEffect,useCallback} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport PostCard from '../components/PostCard'\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Hashtag = ({tag})=>{\r\n\r\n    const dispatch = useDispatch(); \r\n    const {mainPosts,hasMorePost} = useSelector(state=>state.post); \r\n\r\n    const onScroll = useCallback(() =>{\r\n        //window.scrollY + document.documentElement.clientHeight = document.documentElement.scrollHeight\r\n    console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight); \r\n\r\n    if(hasMorePost){//스크롤 할 때 마다 서버로 요청보내면 서버 뒤질 수 도 있음 방지\r\n                    //reducer 잘 보면 이해가 가능할 것이다. \r\n        if(window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight-300){\r\n            dispatch({\r\n                type:LOAD_HASHTAG_POSTS_REQUEST,\r\n                lastId : mainPosts[mainPosts.length - 1].id,\r\n                data : tag,\r\n            }); \r\n        }\r\n    }         \r\n},[hasMorePost , mainPosts.length]); \r\n\r\n    useEffect(()=>{\r\n            window.addEventListener('scroll',onScroll); \r\n\r\n            return ()=>{\r\n                window.removeEventListener('scroll',onScroll);\r\n            }\r\n    },[mainPosts.length])\r\n\r\n\r\n    return(\r\n        <div>\r\n            {mainPosts.map((v,i)=>(\r\n                <PostCard key={i} post={v} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nHashtag.propTypes = {\r\n    tag : PropTypes.string.isRequired, \r\n}\r\n\r\n        //next에서 제공하는 기능\r\n        //_app.js에서 NodeBird.getInitialProps 추가 되어야 가능(_app.js에서 가장 먼저 선행 되어야 한다.)\r\n        //_app.js에서 context가 이 Hashtag의 실행 문맥이 된다.\r\nHashtag.getInitialProps = async (context) =>{\r\n    \r\n    const tag = context.query.tag; \r\n    console.log(context.query.tag);\r\n\r\n    context.store.dispatch({\r\n        type:LOAD_HASHTAG_POSTS_REQUEST,\r\n        data:tag,\r\n    }); \r\n\r\n    return { tag }; \r\n}\r\n\r\nexport default Hashtag; "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAHA;AAGA;AAAA;AAHA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AACA;AADA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AALA;AAUA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;;;;A","sourceRoot":""}