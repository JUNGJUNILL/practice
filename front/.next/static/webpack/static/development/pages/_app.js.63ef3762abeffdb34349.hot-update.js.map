{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.63ef3762abeffdb34349.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import {all ,fork, takeLatest, call, put, take }from 'redux-saga/effects'; \r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\n//call : 함수 동기적 호출 \r\n//fort : 함수 비동기적 호출 \r\n//put  : 액션 , dispatch\r\n//take : 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트 \r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\nfunction* loginAPI(){\r\n//서버에 요청하는 부분 \r\n\r\n}\r\n\r\nfunction* login(){\r\n\r\n    try{\r\n        \r\n        yield call(loginAPI); \r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN,login); \r\n          //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \r\n          // dispatch될 때 login 제너레이터를 호출한다. \r\n\r\n}\r\n\r\nfunction* helloSaga(){\r\n    yield take(HELLO_SAGA); \r\n    console.log('hello saga'); \r\n \r\n\r\n}\r\n\r\nexport default function* userSaga() {\r\n\r\n yield all([\r\n     fork(watchLogin),\r\n     helloSaga(), \r\n ]); \r\n\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;AAUA;AAKA;AAkBA;AAOA;AAOA;AACA;AAhDA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AALA;AAAA;AAKA;AACA;AADA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AAVA;AAWA;AACA;AADA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}