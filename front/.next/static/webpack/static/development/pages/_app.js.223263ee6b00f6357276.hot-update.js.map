{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.223263ee6b00f6357276.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["//next에서 제공하는 최상위 컴포넌트 파일 (_app.js로 직접 만들어야 한다. )\r\n//페이지들의 공통적인 부분기여주기 \r\n\r\nimport AppLayout from '../components/AppLayout'; \r\nimport Head from 'next/head'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// 모든 컴포넌트는 _app.js를 공유한다. \r\n// redux는 state의 중앙통제실 역할을 하므로 모든 컴포넌트의 state를 컨트롤 하기 위해\r\n// _app.js에다가 redux를 연결해 주는 작업이 필요하다. \r\n\r\n//--react, redux 연결하기 \r\nimport {Provider} from 'react-redux'; //redux state 제공, 이것으로 전체 컴포넌트의 state를 관리 할 수 있다. \r\nimport reducer from '../reducers'; \r\nimport {createStore, compose, applyMiddleware} from 'redux'\r\nimport withRedux from 'next-redux-wrapper'\r\n\r\nimport withReduxSaga from 'next-redux-saga' //next 용 redux saga\r\n                                            //서버 사이드 랜더링을 위한 준비물\r\n\r\n//리덕스 사가 \r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\n\r\nconst NodeBird = ({Component,store,pageProps}) =>{\r\n                    //▲ next에서 제공하는 props\r\n\r\n        return (\r\n        <Provider store={store}> {/*이 store가 redux state이다. 이 store가 전체 컴포넌트 state를 다 받는다. */}\r\n            <div>\r\n            <Head>\r\n                <title>NodeBird</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.min.css\"/>\r\n                <link rel=\"stylesheet\" type=\"text/css\" charset=\"UTF-8\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\" />\r\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\" />\r\n            </Head>\r\n            <AppLayout >\r\n                <Component {...pageProps} />\r\n            </AppLayout>  \r\n            </div>\r\n        </Provider>\r\n\r\n        )\r\n\r\n}\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType.isRequired,\r\n    store    : PropTypes.object.isRequired, \r\n    pageProps: PropTypes.object.isRequired,\r\n}\r\n        //next에서 제공하는 기능\r\n\r\n        //해당 pages의 페이지들이 맨 처음에 실행될 때 서버에서도 실행된다고 한다.\r\n        //그렇기 때문에 서버로부터 데이터를 받아 올 수 있다.\r\nNodeBird.getInitialProps = async (context)=>{\r\n                                  //▲ next에서 제공해줌\r\n    console.log('context===>',context); \r\n    const { ctx,Component } = context; \r\n                //▲컴포넌트들(페이지들))\r\n    let pageProps ={}; \r\n\r\n    //서버사이드 랜더링으로 로그인 여부 가져옴 \r\n    const state  = ctx.store.getState(); \r\n    if(!state.user.me){\r\n        ctx.store.dispatch({\r\n            type: LOAD_USER_REQUEST\r\n        }); \r\n    }\r\n\r\n    if(Component.getInitialProps){\r\n        pageProps =  await Component.getInitialProps(ctx); \r\n    }\r\n \r\n\r\n    return {pageProps}; \r\n    \r\n}\r\n//하이오더 컴포넌트 \r\n/*\r\nhello(Component); \r\nconst hello = (Component) => ()=>{\r\n    return (\r\n        <Component good=\"i'm a good person\"/>\r\n    )\r\n}\r\n*/\r\n\r\n//제로초가 그냥 외우라고함... \r\nconst configureStore = (initialState, options) => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n        applyMiddleware(...middlewares),\r\n        !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n      );\r\n    const store = createStore(reducer, initialState, enhancer);\r\n    store.sagaTask =  sagaMiddleware.run(rootSaga);   \r\n    return store;\r\n  };\r\n  \r\n  export default withRedux(configureStore)(withReduxSaga(NodeBird));\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAgBA;AACA;AAjBA;AAAA;AAoBA;AAAA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuBA;;;;;;;;AASA;AACA;AACA;AADA;AACA;AACA;AACA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}