{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.a1e55782dd033ae09531.hot-update.js","sources":["webpack:///./node_modules/@redux-saga/core/dist/io-6de156f3.js","webpack:///./node_modules/@redux-saga/core/dist/redux-saga-core.esm.js","webpack:///./node_modules/@redux-saga/core/dist/redux-saga-effects.esm.js","webpack:///./node_modules/@redux-saga/deferred/dist/redux-saga-deferred.esm.js","webpack:///./node_modules/@redux-saga/delay-p/dist/redux-saga-delay-p.esm.js","webpack:///./node_modules/@redux-saga/is/dist/redux-saga-is.esm.js","webpack:///./node_modules/@redux-saga/symbols/dist/redux-saga-symbols.esm.js","webpack:///./node_modules/redux-saga/dist/redux-saga-core-npm-proxy.esm.js","webpack:///./node_modules/redux-saga/dist/redux-saga-effects-npm-proxy.esm.js","webpack:///./pages/_app.js","webpack:///./reducers/user.js","webpack:///./sagas/index.js","webpack:///./sagas/post.js","webpack:///./sagas/user.js"],"sourcesContent":["import { TASK_CANCEL, TERMINATE, SAGA_LOCATION, SAGA_ACTION, IO, SELF_CANCELLATION } from '@redux-saga/symbols';\r\nimport _extends from '@babel/runtime/helpers/esm/extends';\r\nimport { array, notUndef, pattern, multicast, channel, undef, effect, task, func, buffer, string, object } from '@redux-saga/is';\r\nimport delayP from '@redux-saga/delay-p';\r\n\r\nvar konst = function konst(v) {\r\n  return function () {\r\n    return v;\r\n  };\r\n};\r\nvar kTrue =\r\n/*#__PURE__*/\r\nkonst(true);\r\n\r\nvar noop = function noop() {};\r\n\r\nif (process.env.NODE_ENV !== 'production' && typeof Proxy !== 'undefined') {\r\n  noop =\r\n  /*#__PURE__*/\r\n  new Proxy(noop, {\r\n    set: function set() {\r\n      throw internalErr('There was an attempt to assign a property to internal `noop` function.');\r\n    }\r\n  });\r\n}\r\nvar identity = function identity(v) {\r\n  return v;\r\n};\r\nvar hasSymbol = typeof Symbol === 'function';\r\nvar asyncIteratorSymbol = hasSymbol && Symbol.asyncIterator ? Symbol.asyncIterator : '@@asyncIterator';\r\nfunction check(value, predicate, error) {\r\n  if (!predicate(value)) {\r\n    throw new Error(error);\r\n  }\r\n}\r\nvar assignWithSymbols = function assignWithSymbols(target, source) {\r\n  _extends(target, source);\r\n\r\n  if (Object.getOwnPropertySymbols) {\r\n    Object.getOwnPropertySymbols(source).forEach(function (s) {\r\n      target[s] = source[s];\r\n    });\r\n  }\r\n};\r\nvar flatMap = function flatMap(mapper, arr) {\r\n  var _ref;\r\n\r\n  return (_ref = []).concat.apply(_ref, arr.map(mapper));\r\n};\r\nfunction remove(array, item) {\r\n  var index = array.indexOf(item);\r\n\r\n  if (index >= 0) {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\nfunction once(fn) {\r\n  var called = false;\r\n  return function () {\r\n    if (called) {\r\n      return;\r\n    }\r\n\r\n    called = true;\r\n    fn();\r\n  };\r\n}\r\n\r\nvar kThrow = function kThrow(err) {\r\n  throw err;\r\n};\r\n\r\nvar kReturn = function kReturn(value) {\r\n  return {\r\n    value: value,\r\n    done: true\r\n  };\r\n};\r\n\r\nfunction makeIterator(next, thro, name) {\r\n  if (thro === void 0) {\r\n    thro = kThrow;\r\n  }\r\n\r\n  if (name === void 0) {\r\n    name = 'iterator';\r\n  }\r\n\r\n  var iterator = {\r\n    meta: {\r\n      name: name\r\n    },\r\n    next: next,\r\n    throw: thro,\r\n    return: kReturn,\r\n    isSagaIterator: true\r\n  };\r\n\r\n  if (typeof Symbol !== 'undefined') {\r\n    iterator[Symbol.iterator] = function () {\r\n      return iterator;\r\n    };\r\n  }\r\n\r\n  return iterator;\r\n}\r\nfunction logError(error, _ref2) {\r\n  var sagaStack = _ref2.sagaStack;\r\n\r\n  /*eslint-disable no-console*/\r\n  console.error(error);\r\n  console.error(sagaStack);\r\n}\r\nvar internalErr = function internalErr(err) {\r\n  return new Error(\"\\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\\n  Error: \" + err + \"\\n\");\r\n};\r\nvar createSetContextWarning = function createSetContextWarning(ctx, props) {\r\n  return (ctx ? ctx + '.' : '') + \"setContext(props): argument \" + props + \" is not a plain object\";\r\n};\r\nvar FROZEN_ACTION_ERROR = \"You can't put (a.k.a. dispatch from saga) frozen actions.\\nWe have to define a special non-enumerable property on those actions for scheduling purposes.\\nOtherwise you wouldn't be able to communicate properly between sagas & other subscribers (action ordering would become far less predictable).\\nIf you are using redux and you care about this behaviour (frozen actions),\\nthen you might want to switch to freezing actions in a middleware rather than in action creator.\\nExample implementation:\\n\\nconst freezeActions = store => next => action => next(Object.freeze(action))\\n\"; // creates empty, but not-holey array\r\n\r\nvar createEmptyArray = function createEmptyArray(n) {\r\n  return Array.apply(null, new Array(n));\r\n};\r\nvar wrapSagaDispatch = function wrapSagaDispatch(dispatch) {\r\n  return function (action) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      check(action, function (ac) {\r\n        return !Object.isFrozen(ac);\r\n      }, FROZEN_ACTION_ERROR);\r\n    }\r\n\r\n    return dispatch(Object.defineProperty(action, SAGA_ACTION, {\r\n      value: true\r\n    }));\r\n  };\r\n};\r\nvar shouldTerminate = function shouldTerminate(res) {\r\n  return res === TERMINATE;\r\n};\r\nvar shouldCancel = function shouldCancel(res) {\r\n  return res === TASK_CANCEL;\r\n};\r\nvar shouldComplete = function shouldComplete(res) {\r\n  return shouldTerminate(res) || shouldCancel(res);\r\n};\r\nfunction createAllStyleChildCallbacks(shape, parentCallback) {\r\n  var keys = Object.keys(shape);\r\n  var totalCount = keys.length;\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(totalCount, function (c) {\r\n      return c > 0;\r\n    }, 'createAllStyleChildCallbacks: get an empty array or object');\r\n  }\r\n\r\n  var completedCount = 0;\r\n  var completed;\r\n  var results = array(shape) ? createEmptyArray(totalCount) : {};\r\n  var childCallbacks = {};\r\n\r\n  function checkEnd() {\r\n    if (completedCount === totalCount) {\r\n      completed = true;\r\n      parentCallback(results);\r\n    }\r\n  }\r\n\r\n  keys.forEach(function (key) {\r\n    var chCbAtKey = function chCbAtKey(res, isErr) {\r\n      if (completed) {\r\n        return;\r\n      }\r\n\r\n      if (isErr || shouldComplete(res)) {\r\n        parentCallback.cancel();\r\n        parentCallback(res, isErr);\r\n      } else {\r\n        results[key] = res;\r\n        completedCount++;\r\n        checkEnd();\r\n      }\r\n    };\r\n\r\n    chCbAtKey.cancel = noop;\r\n    childCallbacks[key] = chCbAtKey;\r\n  });\r\n\r\n  parentCallback.cancel = function () {\r\n    if (!completed) {\r\n      completed = true;\r\n      keys.forEach(function (key) {\r\n        return childCallbacks[key].cancel();\r\n      });\r\n    }\r\n  };\r\n\r\n  return childCallbacks;\r\n}\r\nfunction getMetaInfo(fn) {\r\n  return {\r\n    name: fn.name || 'anonymous',\r\n    location: getLocation(fn)\r\n  };\r\n}\r\nfunction getLocation(instrumented) {\r\n  return instrumented[SAGA_LOCATION];\r\n}\r\n\r\nvar BUFFER_OVERFLOW = \"Channel's Buffer overflow!\";\r\nvar ON_OVERFLOW_THROW = 1;\r\nvar ON_OVERFLOW_DROP = 2;\r\nvar ON_OVERFLOW_SLIDE = 3;\r\nvar ON_OVERFLOW_EXPAND = 4;\r\nvar zeroBuffer = {\r\n  isEmpty: kTrue,\r\n  put: noop,\r\n  take: noop\r\n};\r\n\r\nfunction ringBuffer(limit, overflowAction) {\r\n  if (limit === void 0) {\r\n    limit = 10;\r\n  }\r\n\r\n  var arr = new Array(limit);\r\n  var length = 0;\r\n  var pushIndex = 0;\r\n  var popIndex = 0;\r\n\r\n  var push = function push(it) {\r\n    arr[pushIndex] = it;\r\n    pushIndex = (pushIndex + 1) % limit;\r\n    length++;\r\n  };\r\n\r\n  var take = function take() {\r\n    if (length != 0) {\r\n      var it = arr[popIndex];\r\n      arr[popIndex] = null;\r\n      length--;\r\n      popIndex = (popIndex + 1) % limit;\r\n      return it;\r\n    }\r\n  };\r\n\r\n  var flush = function flush() {\r\n    var items = [];\r\n\r\n    while (length) {\r\n      items.push(take());\r\n    }\r\n\r\n    return items;\r\n  };\r\n\r\n  return {\r\n    isEmpty: function isEmpty() {\r\n      return length == 0;\r\n    },\r\n    put: function put(it) {\r\n      if (length < limit) {\r\n        push(it);\r\n      } else {\r\n        var doubledLimit;\r\n\r\n        switch (overflowAction) {\r\n          case ON_OVERFLOW_THROW:\r\n            throw new Error(BUFFER_OVERFLOW);\r\n\r\n          case ON_OVERFLOW_SLIDE:\r\n            arr[pushIndex] = it;\r\n            pushIndex = (pushIndex + 1) % limit;\r\n            popIndex = pushIndex;\r\n            break;\r\n\r\n          case ON_OVERFLOW_EXPAND:\r\n            doubledLimit = 2 * limit;\r\n            arr = flush();\r\n            length = arr.length;\r\n            pushIndex = arr.length;\r\n            popIndex = 0;\r\n            arr.length = doubledLimit;\r\n            limit = doubledLimit;\r\n            push(it);\r\n            break;\r\n\r\n          default: // DROP\r\n\r\n        }\r\n      }\r\n    },\r\n    take: take,\r\n    flush: flush\r\n  };\r\n}\r\n\r\nvar none = function none() {\r\n  return zeroBuffer;\r\n};\r\nvar fixed = function fixed(limit) {\r\n  return ringBuffer(limit, ON_OVERFLOW_THROW);\r\n};\r\nvar dropping = function dropping(limit) {\r\n  return ringBuffer(limit, ON_OVERFLOW_DROP);\r\n};\r\nvar sliding = function sliding(limit) {\r\n  return ringBuffer(limit, ON_OVERFLOW_SLIDE);\r\n};\r\nvar expanding = function expanding(initialSize) {\r\n  return ringBuffer(initialSize, ON_OVERFLOW_EXPAND);\r\n};\r\n\r\nvar buffers = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  none: none,\r\n  fixed: fixed,\r\n  dropping: dropping,\r\n  sliding: sliding,\r\n  expanding: expanding\r\n});\r\n\r\nvar TAKE = 'TAKE';\r\nvar PUT = 'PUT';\r\nvar ALL = 'ALL';\r\nvar RACE = 'RACE';\r\nvar CALL = 'CALL';\r\nvar CPS = 'CPS';\r\nvar FORK = 'FORK';\r\nvar JOIN = 'JOIN';\r\nvar CANCEL = 'CANCEL';\r\nvar SELECT = 'SELECT';\r\nvar ACTION_CHANNEL = 'ACTION_CHANNEL';\r\nvar CANCELLED = 'CANCELLED';\r\nvar FLUSH = 'FLUSH';\r\nvar GET_CONTEXT = 'GET_CONTEXT';\r\nvar SET_CONTEXT = 'SET_CONTEXT';\r\n\r\nvar effectTypes = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  TAKE: TAKE,\r\n  PUT: PUT,\r\n  ALL: ALL,\r\n  RACE: RACE,\r\n  CALL: CALL,\r\n  CPS: CPS,\r\n  FORK: FORK,\r\n  JOIN: JOIN,\r\n  CANCEL: CANCEL,\r\n  SELECT: SELECT,\r\n  ACTION_CHANNEL: ACTION_CHANNEL,\r\n  CANCELLED: CANCELLED,\r\n  FLUSH: FLUSH,\r\n  GET_CONTEXT: GET_CONTEXT,\r\n  SET_CONTEXT: SET_CONTEXT\r\n});\r\n\r\nvar TEST_HINT = '\\n(HINT: if you are getting these errors in tests, consider using createMockTask from @redux-saga/testing-utils)';\r\n\r\nvar makeEffect = function makeEffect(type, payload) {\r\n  var _ref;\r\n\r\n  return _ref = {}, _ref[IO] = true, _ref.combinator = false, _ref.type = type, _ref.payload = payload, _ref;\r\n};\r\n\r\nvar isForkEffect = function isForkEffect(eff) {\r\n  return effect(eff) && eff.type === FORK;\r\n};\r\n\r\nvar detach = function detach(eff) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(eff, isForkEffect, 'detach(eff): argument must be a fork effect');\r\n  }\r\n\r\n  return makeEffect(FORK, _extends({}, eff.payload, {\r\n    detached: true\r\n  }));\r\n};\r\nfunction take(patternOrChannel, multicastPattern) {\r\n  if (patternOrChannel === void 0) {\r\n    patternOrChannel = '*';\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production' && arguments.length) {\r\n    check(arguments[0], notUndef, 'take(patternOrChannel): patternOrChannel is undefined');\r\n  }\r\n\r\n  if (pattern(patternOrChannel)) {\r\n    return makeEffect(TAKE, {\r\n      pattern: patternOrChannel\r\n    });\r\n  }\r\n\r\n  if (multicast(patternOrChannel) && notUndef(multicastPattern) && pattern(multicastPattern)) {\r\n    return makeEffect(TAKE, {\r\n      channel: patternOrChannel,\r\n      pattern: multicastPattern\r\n    });\r\n  }\r\n\r\n  if (channel(patternOrChannel)) {\r\n    return makeEffect(TAKE, {\r\n      channel: patternOrChannel\r\n    });\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    throw new Error(\"take(patternOrChannel): argument \" + patternOrChannel + \" is not valid channel or a valid pattern\");\r\n  }\r\n}\r\nvar takeMaybe = function takeMaybe() {\r\n  var eff = take.apply(void 0, arguments);\r\n  eff.payload.maybe = true;\r\n  return eff;\r\n};\r\nfunction put(channel$1, action) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (arguments.length > 1) {\r\n      check(channel$1, notUndef, 'put(channel, action): argument channel is undefined');\r\n      check(channel$1, channel, \"put(channel, action): argument \" + channel$1 + \" is not a valid channel\");\r\n      check(action, notUndef, 'put(channel, action): argument action is undefined');\r\n    } else {\r\n      check(channel$1, notUndef, 'put(action): argument action is undefined');\r\n    }\r\n  }\r\n\r\n  if (undef(action)) {\r\n    action = channel$1; // `undefined` instead of `null` to make default parameter work\r\n\r\n    channel$1 = undefined;\r\n  }\r\n\r\n  return makeEffect(PUT, {\r\n    channel: channel$1,\r\n    action: action\r\n  });\r\n}\r\nvar putResolve = function putResolve() {\r\n  var eff = put.apply(void 0, arguments);\r\n  eff.payload.resolve = true;\r\n  return eff;\r\n};\r\nfunction all(effects) {\r\n  var eff = makeEffect(ALL, effects);\r\n  eff.combinator = true;\r\n  return eff;\r\n}\r\nfunction race(effects) {\r\n  var eff = makeEffect(RACE, effects);\r\n  eff.combinator = true;\r\n  return eff;\r\n} // this match getFnCallDescriptor logic\r\n\r\nvar validateFnDescriptor = function validateFnDescriptor(effectName, fnDescriptor) {\r\n  check(fnDescriptor, notUndef, effectName + \": argument fn is undefined or null\");\r\n\r\n  if (func(fnDescriptor)) {\r\n    return;\r\n  }\r\n\r\n  var context = null;\r\n  var fn;\r\n\r\n  if (array(fnDescriptor)) {\r\n    context = fnDescriptor[0];\r\n    fn = fnDescriptor[1];\r\n    check(fn, notUndef, effectName + \": argument of type [context, fn] has undefined or null `fn`\");\r\n  } else if (object(fnDescriptor)) {\r\n    context = fnDescriptor.context;\r\n    fn = fnDescriptor.fn;\r\n    check(fn, notUndef, effectName + \": argument of type {context, fn} has undefined or null `fn`\");\r\n  } else {\r\n    check(fnDescriptor, func, effectName + \": argument fn is not function\");\r\n    return;\r\n  }\r\n\r\n  if (context && string(fn)) {\r\n    check(context[fn], func, effectName + \": context arguments has no such method - \\\"\" + fn + \"\\\"\");\r\n    return;\r\n  }\r\n\r\n  check(fn, func, effectName + \": unpacked fn argument (from [context, fn] or {context, fn}) is not a function\");\r\n};\r\n\r\nfunction getFnCallDescriptor(fnDescriptor, args) {\r\n  var context = null;\r\n  var fn;\r\n\r\n  if (func(fnDescriptor)) {\r\n    fn = fnDescriptor;\r\n  } else {\r\n    if (array(fnDescriptor)) {\r\n      context = fnDescriptor[0];\r\n      fn = fnDescriptor[1];\r\n    } else {\r\n      context = fnDescriptor.context;\r\n      fn = fnDescriptor.fn;\r\n    }\r\n\r\n    if (context && string(fn) && func(context[fn])) {\r\n      fn = context[fn];\r\n    }\r\n  }\r\n\r\n  return {\r\n    context: context,\r\n    fn: fn,\r\n    args: args\r\n  };\r\n}\r\n\r\nvar isNotDelayEffect = function isNotDelayEffect(fn) {\r\n  return fn !== delay;\r\n};\r\n\r\nfunction call(fnDescriptor) {\r\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n    args[_key - 1] = arguments[_key];\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    var arg0 = typeof args[0] === 'number' ? args[0] : 'ms';\r\n    check(fnDescriptor, isNotDelayEffect, \"instead of writing `yield call(delay, \" + arg0 + \")` where delay is an effect from `redux-saga/effects` you should write `yield delay(\" + arg0 + \")`\");\r\n    validateFnDescriptor('call', fnDescriptor);\r\n  }\r\n\r\n  return makeEffect(CALL, getFnCallDescriptor(fnDescriptor, args));\r\n}\r\nfunction apply(context, fn, args) {\r\n  if (args === void 0) {\r\n    args = [];\r\n  }\r\n\r\n  var fnDescriptor = [context, fn];\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    validateFnDescriptor('apply', fnDescriptor);\r\n  }\r\n\r\n  return makeEffect(CALL, getFnCallDescriptor([context, fn], args));\r\n}\r\nfunction cps(fnDescriptor) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    validateFnDescriptor('cps', fnDescriptor);\r\n  }\r\n\r\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\r\n    args[_key2 - 1] = arguments[_key2];\r\n  }\r\n\r\n  return makeEffect(CPS, getFnCallDescriptor(fnDescriptor, args));\r\n}\r\nfunction fork(fnDescriptor) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    validateFnDescriptor('fork', fnDescriptor);\r\n    check(fnDescriptor, function (arg) {\r\n      return !effect(arg);\r\n    }, 'fork: argument must not be an effect');\r\n  }\r\n\r\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\r\n    args[_key3 - 1] = arguments[_key3];\r\n  }\r\n\r\n  return makeEffect(FORK, getFnCallDescriptor(fnDescriptor, args));\r\n}\r\nfunction spawn(fnDescriptor) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    validateFnDescriptor('spawn', fnDescriptor);\r\n  }\r\n\r\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\r\n    args[_key4 - 1] = arguments[_key4];\r\n  }\r\n\r\n  return detach(fork.apply(void 0, [fnDescriptor].concat(args)));\r\n}\r\nfunction join(taskOrTasks) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (arguments.length > 1) {\r\n      throw new Error('join(...tasks) is not supported any more. Please use join([...tasks]) to join multiple tasks.');\r\n    }\r\n\r\n    if (array(taskOrTasks)) {\r\n      taskOrTasks.forEach(function (t) {\r\n        check(t, task, \"join([...tasks]): argument \" + t + \" is not a valid Task object \" + TEST_HINT);\r\n      });\r\n    } else {\r\n      check(taskOrTasks, task, \"join(task): argument \" + taskOrTasks + \" is not a valid Task object \" + TEST_HINT);\r\n    }\r\n  }\r\n\r\n  return makeEffect(JOIN, taskOrTasks);\r\n}\r\nfunction cancel(taskOrTasks) {\r\n  if (taskOrTasks === void 0) {\r\n    taskOrTasks = SELF_CANCELLATION;\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (arguments.length > 1) {\r\n      throw new Error('cancel(...tasks) is not supported any more. Please use cancel([...tasks]) to cancel multiple tasks.');\r\n    }\r\n\r\n    if (array(taskOrTasks)) {\r\n      taskOrTasks.forEach(function (t) {\r\n        check(t, task, \"cancel([...tasks]): argument \" + t + \" is not a valid Task object \" + TEST_HINT);\r\n      });\r\n    } else if (taskOrTasks !== SELF_CANCELLATION && notUndef(taskOrTasks)) {\r\n      check(taskOrTasks, task, \"cancel(task): argument \" + taskOrTasks + \" is not a valid Task object \" + TEST_HINT);\r\n    }\r\n  }\r\n\r\n  return makeEffect(CANCEL, taskOrTasks);\r\n}\r\nfunction select(selector) {\r\n  if (selector === void 0) {\r\n    selector = identity;\r\n  }\r\n\r\n  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\r\n    args[_key5 - 1] = arguments[_key5];\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production' && arguments.length) {\r\n    check(arguments[0], notUndef, 'select(selector, [...]): argument selector is undefined');\r\n    check(selector, func, \"select(selector, [...]): argument \" + selector + \" is not a function\");\r\n  }\r\n\r\n  return makeEffect(SELECT, {\r\n    selector: selector,\r\n    args: args\r\n  });\r\n}\r\n/**\r\n  channel(pattern, [buffer])    => creates a proxy channel for store actions\r\n**/\r\n\r\nfunction actionChannel(pattern$1, buffer$1) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(pattern$1, pattern, 'actionChannel(pattern,...): argument pattern is not valid');\r\n\r\n    if (arguments.length > 1) {\r\n      check(buffer$1, notUndef, 'actionChannel(pattern, buffer): argument buffer is undefined');\r\n      check(buffer$1, buffer, \"actionChannel(pattern, buffer): argument \" + buffer$1 + \" is not a valid buffer\");\r\n    }\r\n  }\r\n\r\n  return makeEffect(ACTION_CHANNEL, {\r\n    pattern: pattern$1,\r\n    buffer: buffer$1\r\n  });\r\n}\r\nfunction cancelled() {\r\n  return makeEffect(CANCELLED, {});\r\n}\r\nfunction flush(channel$1) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(channel$1, channel, \"flush(channel): argument \" + channel$1 + \" is not valid channel\");\r\n  }\r\n\r\n  return makeEffect(FLUSH, channel$1);\r\n}\r\nfunction getContext(prop) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(prop, string, \"getContext(prop): argument \" + prop + \" is not a string\");\r\n  }\r\n\r\n  return makeEffect(GET_CONTEXT, prop);\r\n}\r\nfunction setContext(props) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(props, object, createSetContextWarning(null, props));\r\n  }\r\n\r\n  return makeEffect(SET_CONTEXT, props);\r\n}\r\nvar delay =\r\n/*#__PURE__*/\r\ncall.bind(null, delayP);\r\n\r\nexport { apply as $, ALL as A, logError as B, CALL as C, wrapSagaDispatch as D, identity as E, FORK as F, GET_CONTEXT as G, buffers as H, detach as I, JOIN as J, take as K, fork as L, cancel as M, call as N, actionChannel as O, PUT as P, sliding as Q, RACE as R, SELECT as S, TAKE as T, delay as U, race as V, effectTypes as W, takeMaybe as X, put as Y, putResolve as Z, all as _, CPS as a, cps as a0, spawn as a1, join as a2, select as a3, cancelled as a4, flush as a5, getContext as a6, setContext as a7, CANCEL as b, check as c, ACTION_CHANNEL as d, expanding as e, CANCELLED as f, FLUSH as g, SET_CONTEXT as h, internalErr as i, getMetaInfo as j, kTrue as k, createAllStyleChildCallbacks as l, createEmptyArray as m, none as n, once as o, assignWithSymbols as p, makeIterator as q, remove as r, shouldComplete as s, noop as t, flatMap as u, getLocation as v, createSetContextWarning as w, asyncIteratorSymbol as x, shouldCancel as y, shouldTerminate as z };\r\n","import { CHANNEL_END_TYPE, MULTICAST, MATCH, SAGA_ACTION, CANCEL, SELF_CANCELLATION, TERMINATE, TASK, TASK_CANCEL, IO } from '@redux-saga/symbols';\r\nexport { CANCEL, SAGA_LOCATION } from '@redux-saga/symbols';\r\nimport _extends from '@babel/runtime/helpers/esm/extends';\r\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\r\nimport { string as string$1, array as array$1, stringableFunc, func, symbol as symbol$1, buffer, notUndef, promise, iterator, undef, object, channel as channel$1 } from '@redux-saga/is';\r\nimport { k as kTrue, e as expanding, c as check, o as once, r as remove, n as none, i as internalErr, T as TAKE, P as PUT, A as ALL, R as RACE, C as CALL, a as CPS, F as FORK, J as JOIN, b as CANCEL$1, S as SELECT, d as ACTION_CHANNEL, f as CANCELLED$1, g as FLUSH, G as GET_CONTEXT, h as SET_CONTEXT, j as getMetaInfo, l as createAllStyleChildCallbacks, m as createEmptyArray, p as assignWithSymbols, q as makeIterator, s as shouldComplete, t as noop, u as flatMap, v as getLocation, w as createSetContextWarning, x as asyncIteratorSymbol, y as shouldCancel, z as shouldTerminate, B as logError, D as wrapSagaDispatch, E as identity } from './io-6de156f3.js';\r\nexport { H as buffers, I as detach } from './io-6de156f3.js';\r\nimport { compose } from 'redux';\r\nimport deferred from '@redux-saga/deferred';\r\nimport '@redux-saga/delay-p';\r\n\r\nvar queue = [];\r\n/**\r\n  Variable to hold a counting semaphore\r\n  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not\r\n    already suspended)\r\n  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This\r\n    triggers flushing the queued tasks.\r\n**/\r\n\r\nvar semaphore = 0;\r\n/**\r\n  Executes a task 'atomically'. Tasks scheduled during this execution will be queued\r\n  and flushed after this task has finished (assuming the scheduler endup in a released\r\n  state).\r\n**/\r\n\r\nfunction exec(task) {\r\n  try {\r\n    suspend();\r\n    task();\r\n  } finally {\r\n    release();\r\n  }\r\n}\r\n/**\r\n  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)\r\n**/\r\n\r\n\r\nfunction asap(task) {\r\n  queue.push(task);\r\n\r\n  if (!semaphore) {\r\n    suspend();\r\n    flush();\r\n  }\r\n}\r\n/**\r\n * Puts the scheduler in a `suspended` state and executes a task immediately.\r\n */\r\n\r\nfunction immediately(task) {\r\n  try {\r\n    suspend();\r\n    return task();\r\n  } finally {\r\n    flush();\r\n  }\r\n}\r\n/**\r\n  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the\r\n  scheduler is released.\r\n**/\r\n\r\nfunction suspend() {\r\n  semaphore++;\r\n}\r\n/**\r\n  Puts the scheduler in a `released` state.\r\n**/\r\n\r\n\r\nfunction release() {\r\n  semaphore--;\r\n}\r\n/**\r\n  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.\r\n**/\r\n\r\n\r\nfunction flush() {\r\n  release();\r\n  var task;\r\n\r\n  while (!semaphore && (task = queue.shift()) !== undefined) {\r\n    exec(task);\r\n  }\r\n}\r\n\r\nvar array = function array(patterns) {\r\n  return function (input) {\r\n    return patterns.some(function (p) {\r\n      return matcher(p)(input);\r\n    });\r\n  };\r\n};\r\nvar predicate = function predicate(_predicate) {\r\n  return function (input) {\r\n    return _predicate(input);\r\n  };\r\n};\r\nvar string = function string(pattern) {\r\n  return function (input) {\r\n    return input.type === String(pattern);\r\n  };\r\n};\r\nvar symbol = function symbol(pattern) {\r\n  return function (input) {\r\n    return input.type === pattern;\r\n  };\r\n};\r\nvar wildcard = function wildcard() {\r\n  return kTrue;\r\n};\r\nfunction matcher(pattern) {\r\n  // prettier-ignore\r\n  var matcherCreator = pattern === '*' ? wildcard : string$1(pattern) ? string : array$1(pattern) ? array : stringableFunc(pattern) ? string : func(pattern) ? predicate : symbol$1(pattern) ? symbol : null;\r\n\r\n  if (matcherCreator === null) {\r\n    throw new Error(\"invalid pattern: \" + pattern);\r\n  }\r\n\r\n  return matcherCreator(pattern);\r\n}\r\n\r\nvar END = {\r\n  type: CHANNEL_END_TYPE\r\n};\r\nvar isEnd = function isEnd(a) {\r\n  return a && a.type === CHANNEL_END_TYPE;\r\n};\r\nvar CLOSED_CHANNEL_WITH_TAKERS = 'Cannot have a closed channel with pending takers';\r\nvar INVALID_BUFFER = 'invalid buffer passed to channel factory function';\r\nvar UNDEFINED_INPUT_ERROR = \"Saga or channel was provided with an undefined action\\nHints:\\n  - check that your Action Creator returns a non-undefined value\\n  - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners\";\r\nfunction channel(buffer$1) {\r\n  if (buffer$1 === void 0) {\r\n    buffer$1 = expanding();\r\n  }\r\n\r\n  var closed = false;\r\n  var takers = [];\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(buffer$1, buffer, INVALID_BUFFER);\r\n  }\r\n\r\n  function checkForbiddenStates() {\r\n    if (closed && takers.length) {\r\n      throw internalErr(CLOSED_CHANNEL_WITH_TAKERS);\r\n    }\r\n\r\n    if (takers.length && !buffer$1.isEmpty()) {\r\n      throw internalErr('Cannot have pending takers with non empty buffer');\r\n    }\r\n  }\r\n\r\n  function put(input) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      checkForbiddenStates();\r\n      check(input, notUndef, UNDEFINED_INPUT_ERROR);\r\n    }\r\n\r\n    if (closed) {\r\n      return;\r\n    }\r\n\r\n    if (takers.length === 0) {\r\n      return buffer$1.put(input);\r\n    }\r\n\r\n    var cb = takers.shift();\r\n    cb(input);\r\n  }\r\n\r\n  function take(cb) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      checkForbiddenStates();\r\n      check(cb, func, \"channel.take's callback must be a function\");\r\n    }\r\n\r\n    if (closed && buffer$1.isEmpty()) {\r\n      cb(END);\r\n    } else if (!buffer$1.isEmpty()) {\r\n      cb(buffer$1.take());\r\n    } else {\r\n      takers.push(cb);\r\n\r\n      cb.cancel = function () {\r\n        remove(takers, cb);\r\n      };\r\n    }\r\n  }\r\n\r\n  function flush(cb) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      checkForbiddenStates();\r\n      check(cb, func, \"channel.flush' callback must be a function\");\r\n    }\r\n\r\n    if (closed && buffer$1.isEmpty()) {\r\n      cb(END);\r\n      return;\r\n    }\r\n\r\n    cb(buffer$1.flush());\r\n  }\r\n\r\n  function close() {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      checkForbiddenStates();\r\n    }\r\n\r\n    if (closed) {\r\n      return;\r\n    }\r\n\r\n    closed = true;\r\n    var arr = takers;\r\n    takers = [];\r\n\r\n    for (var i = 0, len = arr.length; i < len; i++) {\r\n      var taker = arr[i];\r\n      taker(END);\r\n    }\r\n  }\r\n\r\n  return {\r\n    take: take,\r\n    put: put,\r\n    flush: flush,\r\n    close: close\r\n  };\r\n}\r\nfunction eventChannel(subscribe, buffer) {\r\n  if (buffer === void 0) {\r\n    buffer = none();\r\n  }\r\n\r\n  var closed = false;\r\n  var unsubscribe;\r\n  var chan = channel(buffer);\r\n\r\n  var close = function close() {\r\n    if (closed) {\r\n      return;\r\n    }\r\n\r\n    closed = true;\r\n\r\n    if (func(unsubscribe)) {\r\n      unsubscribe();\r\n    }\r\n\r\n    chan.close();\r\n  };\r\n\r\n  unsubscribe = subscribe(function (input) {\r\n    if (isEnd(input)) {\r\n      close();\r\n      return;\r\n    }\r\n\r\n    chan.put(input);\r\n  });\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(unsubscribe, func, 'in eventChannel: subscribe should return a function to unsubscribe');\r\n  }\r\n\r\n  unsubscribe = once(unsubscribe);\r\n\r\n  if (closed) {\r\n    unsubscribe();\r\n  }\r\n\r\n  return {\r\n    take: chan.take,\r\n    flush: chan.flush,\r\n    close: close\r\n  };\r\n}\r\nfunction multicastChannel() {\r\n  var _ref;\r\n\r\n  var closed = false;\r\n  var currentTakers = [];\r\n  var nextTakers = currentTakers;\r\n\r\n  function checkForbiddenStates() {\r\n    if (closed && nextTakers.length) {\r\n      throw internalErr(CLOSED_CHANNEL_WITH_TAKERS);\r\n    }\r\n  }\r\n\r\n  var ensureCanMutateNextTakers = function ensureCanMutateNextTakers() {\r\n    if (nextTakers !== currentTakers) {\r\n      return;\r\n    }\r\n\r\n    nextTakers = currentTakers.slice();\r\n  };\r\n\r\n  var close = function close() {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      checkForbiddenStates();\r\n    }\r\n\r\n    closed = true;\r\n    var takers = currentTakers = nextTakers;\r\n    nextTakers = [];\r\n    takers.forEach(function (taker) {\r\n      taker(END);\r\n    });\r\n  };\r\n\r\n  return _ref = {}, _ref[MULTICAST] = true, _ref.put = function put(input) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      checkForbiddenStates();\r\n      check(input, notUndef, UNDEFINED_INPUT_ERROR);\r\n    }\r\n\r\n    if (closed) {\r\n      return;\r\n    }\r\n\r\n    if (isEnd(input)) {\r\n      close();\r\n      return;\r\n    }\r\n\r\n    var takers = currentTakers = nextTakers;\r\n\r\n    for (var i = 0, len = takers.length; i < len; i++) {\r\n      var taker = takers[i];\r\n\r\n      if (taker[MATCH](input)) {\r\n        taker.cancel();\r\n        taker(input);\r\n      }\r\n    }\r\n  }, _ref.take = function take(cb, matcher) {\r\n    if (matcher === void 0) {\r\n      matcher = wildcard;\r\n    }\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      checkForbiddenStates();\r\n    }\r\n\r\n    if (closed) {\r\n      cb(END);\r\n      return;\r\n    }\r\n\r\n    cb[MATCH] = matcher;\r\n    ensureCanMutateNextTakers();\r\n    nextTakers.push(cb);\r\n    cb.cancel = once(function () {\r\n      ensureCanMutateNextTakers();\r\n      remove(nextTakers, cb);\r\n    });\r\n  }, _ref.close = close, _ref;\r\n}\r\nfunction stdChannel() {\r\n  var chan = multicastChannel();\r\n  var put = chan.put;\r\n\r\n  chan.put = function (input) {\r\n    if (input[SAGA_ACTION]) {\r\n      put(input);\r\n      return;\r\n    }\r\n\r\n    asap(function () {\r\n      put(input);\r\n    });\r\n  };\r\n\r\n  return chan;\r\n}\r\n\r\nvar RUNNING = 0;\r\nvar CANCELLED = 1;\r\nvar ABORTED = 2;\r\nvar DONE = 3;\r\n\r\nfunction resolvePromise(promise, cb) {\r\n  var cancelPromise = promise[CANCEL];\r\n\r\n  if (func(cancelPromise)) {\r\n    cb.cancel = cancelPromise;\r\n  }\r\n\r\n  promise.then(cb, function (error) {\r\n    cb(error, true);\r\n  });\r\n}\r\n\r\nvar current = 0;\r\nvar nextSagaId = (function () {\r\n  return ++current;\r\n});\r\n\r\nvar _effectRunnerMap;\r\n\r\nfunction getIteratorMetaInfo(iterator, fn) {\r\n  if (iterator.isSagaIterator) {\r\n    return {\r\n      name: iterator.meta.name\r\n    };\r\n  }\r\n\r\n  return getMetaInfo(fn);\r\n}\r\n\r\nfunction createTaskIterator(_ref) {\r\n  var context = _ref.context,\r\n      fn = _ref.fn,\r\n      args = _ref.args;\r\n\r\n  // catch synchronous failures; see #152 and #441\r\n  try {\r\n    var result = fn.apply(context, args); // i.e. a generator function returns an iterator\r\n\r\n    if (iterator(result)) {\r\n      return result;\r\n    }\r\n\r\n    var resolved = false;\r\n\r\n    var next = function next(arg) {\r\n      if (!resolved) {\r\n        resolved = true; // Only promises returned from fork will be interpreted. See #1573\r\n\r\n        return {\r\n          value: result,\r\n          done: !promise(result)\r\n        };\r\n      } else {\r\n        return {\r\n          value: arg,\r\n          done: true\r\n        };\r\n      }\r\n    };\r\n\r\n    return makeIterator(next);\r\n  } catch (err) {\r\n    // do not bubble up synchronous failures for detached forks\r\n    // instead create a failed task. See #152 and #441\r\n    return makeIterator(function () {\r\n      throw err;\r\n    });\r\n  }\r\n}\r\n\r\nfunction runPutEffect(env, _ref2, cb) {\r\n  var channel = _ref2.channel,\r\n      action = _ref2.action,\r\n      resolve = _ref2.resolve;\r\n\r\n  /**\r\n   Schedule the put in case another saga is holding a lock.\r\n   The put will be executed atomically. ie nested puts will execute after\r\n   this put has terminated.\r\n   **/\r\n  asap(function () {\r\n    var result;\r\n\r\n    try {\r\n      result = (channel ? channel.put : env.dispatch)(action);\r\n    } catch (error) {\r\n      cb(error, true);\r\n      return;\r\n    }\r\n\r\n    if (resolve && promise(result)) {\r\n      resolvePromise(result, cb);\r\n    } else {\r\n      cb(result);\r\n    }\r\n  }); // Put effects are non cancellables\r\n}\r\n\r\nfunction runTakeEffect(env, _ref3, cb) {\r\n  var _ref3$channel = _ref3.channel,\r\n      channel = _ref3$channel === void 0 ? env.channel : _ref3$channel,\r\n      pattern = _ref3.pattern,\r\n      maybe = _ref3.maybe;\r\n\r\n  var takeCb = function takeCb(input) {\r\n    if (input instanceof Error) {\r\n      cb(input, true);\r\n      return;\r\n    }\r\n\r\n    if (isEnd(input) && !maybe) {\r\n      cb(TERMINATE);\r\n      return;\r\n    }\r\n\r\n    cb(input);\r\n  };\r\n\r\n  try {\r\n    channel.take(takeCb, notUndef(pattern) ? matcher(pattern) : null);\r\n  } catch (err) {\r\n    cb(err, true);\r\n    return;\r\n  }\r\n\r\n  cb.cancel = takeCb.cancel;\r\n}\r\n\r\nfunction runCallEffect(env, _ref4, cb, _ref5) {\r\n  var context = _ref4.context,\r\n      fn = _ref4.fn,\r\n      args = _ref4.args;\r\n  var task = _ref5.task;\r\n\r\n  // catch synchronous failures; see #152\r\n  try {\r\n    var result = fn.apply(context, args);\r\n\r\n    if (promise(result)) {\r\n      resolvePromise(result, cb);\r\n      return;\r\n    }\r\n\r\n    if (iterator(result)) {\r\n      // resolve iterator\r\n      proc(env, result, task.context, current, getMetaInfo(fn),\r\n      /* isRoot */\r\n      false, cb);\r\n      return;\r\n    }\r\n\r\n    cb(result);\r\n  } catch (error) {\r\n    cb(error, true);\r\n  }\r\n}\r\n\r\nfunction runCPSEffect(env, _ref6, cb) {\r\n  var context = _ref6.context,\r\n      fn = _ref6.fn,\r\n      args = _ref6.args;\r\n\r\n  // CPS (ie node style functions) can define their own cancellation logic\r\n  // by setting cancel field on the cb\r\n  // catch synchronous failures; see #152\r\n  try {\r\n    var cpsCb = function cpsCb(err, res) {\r\n      if (undef(err)) {\r\n        cb(res);\r\n      } else {\r\n        cb(err, true);\r\n      }\r\n    };\r\n\r\n    fn.apply(context, args.concat(cpsCb));\r\n\r\n    if (cpsCb.cancel) {\r\n      cb.cancel = cpsCb.cancel;\r\n    }\r\n  } catch (error) {\r\n    cb(error, true);\r\n  }\r\n}\r\n\r\nfunction runForkEffect(env, _ref7, cb, _ref8) {\r\n  var context = _ref7.context,\r\n      fn = _ref7.fn,\r\n      args = _ref7.args,\r\n      detached = _ref7.detached;\r\n  var parent = _ref8.task;\r\n  var taskIterator = createTaskIterator({\r\n    context: context,\r\n    fn: fn,\r\n    args: args\r\n  });\r\n  var meta = getIteratorMetaInfo(taskIterator, fn);\r\n  immediately(function () {\r\n    var child = proc(env, taskIterator, parent.context, current, meta, detached, undefined);\r\n\r\n    if (detached) {\r\n      cb(child);\r\n    } else {\r\n      if (child.isRunning()) {\r\n        parent.queue.addTask(child);\r\n        cb(child);\r\n      } else if (child.isAborted()) {\r\n        parent.queue.abort(child.error());\r\n      } else {\r\n        cb(child);\r\n      }\r\n    }\r\n  }); // Fork effects are non cancellables\r\n}\r\n\r\nfunction runJoinEffect(env, taskOrTasks, cb, _ref9) {\r\n  var task = _ref9.task;\r\n\r\n  var joinSingleTask = function joinSingleTask(taskToJoin, cb) {\r\n    if (taskToJoin.isRunning()) {\r\n      var joiner = {\r\n        task: task,\r\n        cb: cb\r\n      };\r\n\r\n      cb.cancel = function () {\r\n        if (taskToJoin.isRunning()) remove(taskToJoin.joiners, joiner);\r\n      };\r\n\r\n      taskToJoin.joiners.push(joiner);\r\n    } else {\r\n      if (taskToJoin.isAborted()) {\r\n        cb(taskToJoin.error(), true);\r\n      } else {\r\n        cb(taskToJoin.result());\r\n      }\r\n    }\r\n  };\r\n\r\n  if (array$1(taskOrTasks)) {\r\n    if (taskOrTasks.length === 0) {\r\n      cb([]);\r\n      return;\r\n    }\r\n\r\n    var childCallbacks = createAllStyleChildCallbacks(taskOrTasks, cb);\r\n    taskOrTasks.forEach(function (t, i) {\r\n      joinSingleTask(t, childCallbacks[i]);\r\n    });\r\n  } else {\r\n    joinSingleTask(taskOrTasks, cb);\r\n  }\r\n}\r\n\r\nfunction cancelSingleTask(taskToCancel) {\r\n  if (taskToCancel.isRunning()) {\r\n    taskToCancel.cancel();\r\n  }\r\n}\r\n\r\nfunction runCancelEffect(env, taskOrTasks, cb, _ref10) {\r\n  var task = _ref10.task;\r\n\r\n  if (taskOrTasks === SELF_CANCELLATION) {\r\n    cancelSingleTask(task);\r\n  } else if (array$1(taskOrTasks)) {\r\n    taskOrTasks.forEach(cancelSingleTask);\r\n  } else {\r\n    cancelSingleTask(taskOrTasks);\r\n  }\r\n\r\n  cb(); // cancel effects are non cancellables\r\n}\r\n\r\nfunction runAllEffect(env, effects, cb, _ref11) {\r\n  var digestEffect = _ref11.digestEffect;\r\n  var effectId = current;\r\n  var keys = Object.keys(effects);\r\n\r\n  if (keys.length === 0) {\r\n    cb(array$1(effects) ? [] : {});\r\n    return;\r\n  }\r\n\r\n  var childCallbacks = createAllStyleChildCallbacks(effects, cb);\r\n  keys.forEach(function (key) {\r\n    digestEffect(effects[key], effectId, childCallbacks[key], key);\r\n  });\r\n}\r\n\r\nfunction runRaceEffect(env, effects, cb, _ref12) {\r\n  var digestEffect = _ref12.digestEffect;\r\n  var effectId = current;\r\n  var keys = Object.keys(effects);\r\n  var response = array$1(effects) ? createEmptyArray(keys.length) : {};\r\n  var childCbs = {};\r\n  var completed = false;\r\n  keys.forEach(function (key) {\r\n    var chCbAtKey = function chCbAtKey(res, isErr) {\r\n      if (completed) {\r\n        return;\r\n      }\r\n\r\n      if (isErr || shouldComplete(res)) {\r\n        // Race Auto cancellation\r\n        cb.cancel();\r\n        cb(res, isErr);\r\n      } else {\r\n        cb.cancel();\r\n        completed = true;\r\n        response[key] = res;\r\n        cb(response);\r\n      }\r\n    };\r\n\r\n    chCbAtKey.cancel = noop;\r\n    childCbs[key] = chCbAtKey;\r\n  });\r\n\r\n  cb.cancel = function () {\r\n    // prevents unnecessary cancellation\r\n    if (!completed) {\r\n      completed = true;\r\n      keys.forEach(function (key) {\r\n        return childCbs[key].cancel();\r\n      });\r\n    }\r\n  };\r\n\r\n  keys.forEach(function (key) {\r\n    if (completed) {\r\n      return;\r\n    }\r\n\r\n    digestEffect(effects[key], effectId, childCbs[key], key);\r\n  });\r\n}\r\n\r\nfunction runSelectEffect(env, _ref13, cb) {\r\n  var selector = _ref13.selector,\r\n      args = _ref13.args;\r\n\r\n  try {\r\n    var state = selector.apply(void 0, [env.getState()].concat(args));\r\n    cb(state);\r\n  } catch (error) {\r\n    cb(error, true);\r\n  }\r\n}\r\n\r\nfunction runChannelEffect(env, _ref14, cb) {\r\n  var pattern = _ref14.pattern,\r\n      buffer = _ref14.buffer;\r\n  var chan = channel(buffer);\r\n  var match = matcher(pattern);\r\n\r\n  var taker = function taker(action) {\r\n    if (!isEnd(action)) {\r\n      env.channel.take(taker, match);\r\n    }\r\n\r\n    chan.put(action);\r\n  };\r\n\r\n  var close = chan.close;\r\n\r\n  chan.close = function () {\r\n    taker.cancel();\r\n    close();\r\n  };\r\n\r\n  env.channel.take(taker, match);\r\n  cb(chan);\r\n}\r\n\r\nfunction runCancelledEffect(env, data, cb, _ref15) {\r\n  var task = _ref15.task;\r\n  cb(task.isCancelled());\r\n}\r\n\r\nfunction runFlushEffect(env, channel, cb) {\r\n  channel.flush(cb);\r\n}\r\n\r\nfunction runGetContextEffect(env, prop, cb, _ref16) {\r\n  var task = _ref16.task;\r\n  cb(task.context[prop]);\r\n}\r\n\r\nfunction runSetContextEffect(env, props, cb, _ref17) {\r\n  var task = _ref17.task;\r\n  assignWithSymbols(task.context, props);\r\n  cb();\r\n}\r\n\r\nvar effectRunnerMap = (_effectRunnerMap = {}, _effectRunnerMap[TAKE] = runTakeEffect, _effectRunnerMap[PUT] = runPutEffect, _effectRunnerMap[ALL] = runAllEffect, _effectRunnerMap[RACE] = runRaceEffect, _effectRunnerMap[CALL] = runCallEffect, _effectRunnerMap[CPS] = runCPSEffect, _effectRunnerMap[FORK] = runForkEffect, _effectRunnerMap[JOIN] = runJoinEffect, _effectRunnerMap[CANCEL$1] = runCancelEffect, _effectRunnerMap[SELECT] = runSelectEffect, _effectRunnerMap[ACTION_CHANNEL] = runChannelEffect, _effectRunnerMap[CANCELLED$1] = runCancelledEffect, _effectRunnerMap[FLUSH] = runFlushEffect, _effectRunnerMap[GET_CONTEXT] = runGetContextEffect, _effectRunnerMap[SET_CONTEXT] = runSetContextEffect, _effectRunnerMap);\r\n\r\n/**\r\n Used to track a parent task and its forks\r\n In the fork model, forked tasks are attached by default to their parent\r\n We model this using the concept of Parent task && main Task\r\n main task is the main flow of the current Generator, the parent tasks is the\r\n aggregation of the main tasks + all its forked tasks.\r\n Thus the whole model represents an execution tree with multiple branches (vs the\r\n linear execution tree in sequential (non parallel) programming)\r\n\r\n A parent tasks has the following semantics\r\n - It completes if all its forks either complete or all cancelled\r\n - If it's cancelled, all forks are cancelled as well\r\n - It aborts if any uncaught error bubbles up from forks\r\n - If it completes, the return value is the one returned by the main task\r\n **/\r\n\r\nfunction forkQueue(mainTask, onAbort, cont) {\r\n  var tasks = [];\r\n  var result;\r\n  var completed = false;\r\n  addTask(mainTask);\r\n\r\n  var getTasks = function getTasks() {\r\n    return tasks;\r\n  };\r\n\r\n  function abort(err) {\r\n    onAbort();\r\n    cancelAll();\r\n    cont(err, true);\r\n  }\r\n\r\n  function addTask(task) {\r\n    tasks.push(task);\r\n\r\n    task.cont = function (res, isErr) {\r\n      if (completed) {\r\n        return;\r\n      }\r\n\r\n      remove(tasks, task);\r\n      task.cont = noop;\r\n\r\n      if (isErr) {\r\n        abort(res);\r\n      } else {\r\n        if (task === mainTask) {\r\n          result = res;\r\n        }\r\n\r\n        if (!tasks.length) {\r\n          completed = true;\r\n          cont(result);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  function cancelAll() {\r\n    if (completed) {\r\n      return;\r\n    }\r\n\r\n    completed = true;\r\n    tasks.forEach(function (t) {\r\n      t.cont = noop;\r\n      t.cancel();\r\n    });\r\n    tasks = [];\r\n  }\r\n\r\n  return {\r\n    addTask: addTask,\r\n    cancelAll: cancelAll,\r\n    abort: abort,\r\n    getTasks: getTasks\r\n  };\r\n}\r\n\r\n// there can be only a single saga error created at any given moment\r\n\r\nfunction formatLocation(fileName, lineNumber) {\r\n  return fileName + \"?\" + lineNumber;\r\n}\r\n\r\nfunction effectLocationAsString(effect) {\r\n  var location = getLocation(effect);\r\n\r\n  if (location) {\r\n    var code = location.code,\r\n        fileName = location.fileName,\r\n        lineNumber = location.lineNumber;\r\n    var source = code + \"  \" + formatLocation(fileName, lineNumber);\r\n    return source;\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\nfunction sagaLocationAsString(sagaMeta) {\r\n  var name = sagaMeta.name,\r\n      location = sagaMeta.location;\r\n\r\n  if (location) {\r\n    return name + \"  \" + formatLocation(location.fileName, location.lineNumber);\r\n  }\r\n\r\n  return name;\r\n}\r\n\r\nfunction cancelledTasksAsString(sagaStack) {\r\n  var cancelledTasks = flatMap(function (i) {\r\n    return i.cancelledTasks;\r\n  }, sagaStack);\r\n\r\n  if (!cancelledTasks.length) {\r\n    return '';\r\n  }\r\n\r\n  return ['Tasks cancelled due to error:'].concat(cancelledTasks).join('\\n');\r\n}\r\n\r\nvar crashedEffect = null;\r\nvar sagaStack = [];\r\nvar addSagaFrame = function addSagaFrame(frame) {\r\n  frame.crashedEffect = crashedEffect;\r\n  sagaStack.push(frame);\r\n};\r\nvar clear = function clear() {\r\n  crashedEffect = null;\r\n  sagaStack.length = 0;\r\n}; // this sets crashed effect for the soon-to-be-reported saga frame\r\n// this slightly streatches the singleton nature of this module into wrong direction\r\n// as it's even less obvious what's the data flow here, but it is what it is for now\r\n\r\nvar setCrashedEffect = function setCrashedEffect(effect) {\r\n  crashedEffect = effect;\r\n};\r\n/**\r\n  @returns {string}\r\n\r\n  @example\r\n  The above error occurred in task errorInPutSaga {pathToFile}\r\n  when executing effect put({type: 'REDUCER_ACTION_ERROR_IN_PUT'}) {pathToFile}\r\n      created by fetchSaga {pathToFile}\r\n      created by rootSaga {pathToFile}\r\n*/\r\n\r\nvar toString = function toString() {\r\n  var firstSaga = sagaStack[0],\r\n      otherSagas = sagaStack.slice(1);\r\n  var crashedEffectLocation = firstSaga.crashedEffect ? effectLocationAsString(firstSaga.crashedEffect) : null;\r\n  var errorMessage = \"The above error occurred in task \" + sagaLocationAsString(firstSaga.meta) + (crashedEffectLocation ? \" \\n when executing effect \" + crashedEffectLocation : '');\r\n  return [errorMessage].concat(otherSagas.map(function (s) {\r\n    return \"    created by \" + sagaLocationAsString(s.meta);\r\n  }), [cancelledTasksAsString(sagaStack)]).join('\\n');\r\n};\r\n\r\nfunction newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont) {\r\n  var _task;\r\n\r\n  if (cont === void 0) {\r\n    cont = noop;\r\n  }\r\n\r\n  var status = RUNNING;\r\n  var taskResult;\r\n  var taskError;\r\n  var deferredEnd = null;\r\n  var cancelledDueToErrorTasks = [];\r\n  var context = Object.create(parentContext);\r\n  var queue = forkQueue(mainTask, function onAbort() {\r\n    cancelledDueToErrorTasks.push.apply(cancelledDueToErrorTasks, queue.getTasks().map(function (t) {\r\n      return t.meta.name;\r\n    }));\r\n  }, end);\r\n  /**\r\n   This may be called by a parent generator to trigger/propagate cancellation\r\n   cancel all pending tasks (including the main task), then end the current task.\r\n    Cancellation propagates down to the whole execution tree held by this Parent task\r\n   It's also propagated to all joiners of this task and their execution tree/joiners\r\n    Cancellation is noop for terminated/Cancelled tasks tasks\r\n   **/\r\n\r\n  function cancel() {\r\n    if (status === RUNNING) {\r\n      // Setting status to CANCELLED does not necessarily mean that the task/iterators are stopped\r\n      // effects in the iterator's finally block will still be executed\r\n      status = CANCELLED;\r\n      queue.cancelAll(); // Ending with a TASK_CANCEL will propagate the Cancellation to all joiners\r\n\r\n      end(TASK_CANCEL, false);\r\n    }\r\n  }\r\n\r\n  function end(result, isErr) {\r\n    if (!isErr) {\r\n      // The status here may be RUNNING or CANCELLED\r\n      // If the status is CANCELLED, then we do not need to change it here\r\n      if (result === TASK_CANCEL) {\r\n        status = CANCELLED;\r\n      } else if (status !== CANCELLED) {\r\n        status = DONE;\r\n      }\r\n\r\n      taskResult = result;\r\n      deferredEnd && deferredEnd.resolve(result);\r\n    } else {\r\n      status = ABORTED;\r\n      addSagaFrame({\r\n        meta: meta,\r\n        cancelledTasks: cancelledDueToErrorTasks\r\n      });\r\n\r\n      if (task.isRoot) {\r\n        var sagaStack = toString(); // we've dumped the saga stack to string and are passing it to user's code\r\n        // we know that it won't be needed anymore and we need to clear it\r\n\r\n        clear();\r\n        env.onError(result, {\r\n          sagaStack: sagaStack\r\n        });\r\n      }\r\n\r\n      taskError = result;\r\n      deferredEnd && deferredEnd.reject(result);\r\n    }\r\n\r\n    task.cont(result, isErr);\r\n    task.joiners.forEach(function (joiner) {\r\n      joiner.cb(result, isErr);\r\n    });\r\n    task.joiners = null;\r\n  }\r\n\r\n  function setContext(props) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      check(props, object, createSetContextWarning('task', props));\r\n    }\r\n\r\n    assignWithSymbols(context, props);\r\n  }\r\n\r\n  function toPromise() {\r\n    if (deferredEnd) {\r\n      return deferredEnd.promise;\r\n    }\r\n\r\n    deferredEnd = deferred();\r\n\r\n    if (status === ABORTED) {\r\n      deferredEnd.reject(taskError);\r\n    } else if (status !== RUNNING) {\r\n      deferredEnd.resolve(taskResult);\r\n    }\r\n\r\n    return deferredEnd.promise;\r\n  }\r\n\r\n  var task = (_task = {}, _task[TASK] = true, _task.id = parentEffectId, _task.meta = meta, _task.isRoot = isRoot, _task.context = context, _task.joiners = [], _task.queue = queue, _task.cancel = cancel, _task.cont = cont, _task.end = end, _task.setContext = setContext, _task.toPromise = toPromise, _task.isRunning = function isRunning() {\r\n    return status === RUNNING;\r\n  }, _task.isCancelled = function isCancelled() {\r\n    return status === CANCELLED || status === RUNNING && mainTask.status === CANCELLED;\r\n  }, _task.isAborted = function isAborted() {\r\n    return status === ABORTED;\r\n  }, _task.result = function result() {\r\n    return taskResult;\r\n  }, _task.error = function error() {\r\n    return taskError;\r\n  }, _task);\r\n  return task;\r\n}\r\n\r\nfunction proc(env, iterator$1, parentContext, parentEffectId, meta, isRoot, cont) {\r\n  if (process.env.NODE_ENV !== 'production' && iterator$1[asyncIteratorSymbol]) {\r\n    throw new Error(\"redux-saga doesn't support async generators, please use only regular ones\");\r\n  }\r\n\r\n  var finalRunEffect = env.finalizeRunEffect(runEffect);\r\n  /**\r\n    Tracks the current effect cancellation\r\n    Each time the generator progresses. calling runEffect will set a new value\r\n    on it. It allows propagating cancellation to child effects\r\n  **/\r\n\r\n  next.cancel = noop;\r\n  /** Creates a main task to track the main flow */\r\n\r\n  var mainTask = {\r\n    meta: meta,\r\n    cancel: cancelMain,\r\n    status: RUNNING\r\n  };\r\n  /**\r\n   Creates a new task descriptor for this generator.\r\n   A task is the aggregation of it's mainTask and all it's forked tasks.\r\n   **/\r\n\r\n  var task = newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont);\r\n  var executingContext = {\r\n    task: task,\r\n    digestEffect: digestEffect\r\n  };\r\n  /**\r\n    cancellation of the main task. We'll simply resume the Generator with a TASK_CANCEL\r\n  **/\r\n\r\n  function cancelMain() {\r\n    if (mainTask.status === RUNNING) {\r\n      mainTask.status = CANCELLED;\r\n      next(TASK_CANCEL);\r\n    }\r\n  }\r\n  /**\r\n    attaches cancellation logic to this task's continuation\r\n    this will permit cancellation to propagate down the call chain\r\n  **/\r\n\r\n\r\n  if (cont) {\r\n    cont.cancel = task.cancel;\r\n  } // kicks up the generator\r\n\r\n\r\n  next(); // then return the task descriptor to the caller\r\n\r\n  return task;\r\n  /**\r\n   * This is the generator driver\r\n   * It's a recursive async/continuation function which calls itself\r\n   * until the generator terminates or throws\r\n   * @param {internal commands(TASK_CANCEL | TERMINATE) | any} arg - value, generator will be resumed with.\r\n   * @param {boolean} isErr - the flag shows if effect finished with an error\r\n   *\r\n   * receives either (command | effect result, false) or (any thrown thing, true)\r\n   */\r\n\r\n  function next(arg, isErr) {\r\n    try {\r\n      var result;\r\n\r\n      if (isErr) {\r\n        result = iterator$1.throw(arg); // user handled the error, we can clear bookkept values\r\n\r\n        clear();\r\n      } else if (shouldCancel(arg)) {\r\n        /**\r\n          getting TASK_CANCEL automatically cancels the main task\r\n          We can get this value here\r\n           - By cancelling the parent task manually\r\n          - By joining a Cancelled task\r\n        **/\r\n        mainTask.status = CANCELLED;\r\n        /**\r\n          Cancels the current effect; this will propagate the cancellation down to any called tasks\r\n        **/\r\n\r\n        next.cancel();\r\n        /**\r\n          If this Generator has a `return` method then invokes it\r\n          This will jump to the finally block\r\n        **/\r\n\r\n        result = func(iterator$1.return) ? iterator$1.return(TASK_CANCEL) : {\r\n          done: true,\r\n          value: TASK_CANCEL\r\n        };\r\n      } else if (shouldTerminate(arg)) {\r\n        // We get TERMINATE flag, i.e. by taking from a channel that ended using `take` (and not `takem` used to trap End of channels)\r\n        result = func(iterator$1.return) ? iterator$1.return() : {\r\n          done: true\r\n        };\r\n      } else {\r\n        result = iterator$1.next(arg);\r\n      }\r\n\r\n      if (!result.done) {\r\n        digestEffect(result.value, parentEffectId, next);\r\n      } else {\r\n        /**\r\n          This Generator has ended, terminate the main task and notify the fork queue\r\n        **/\r\n        if (mainTask.status !== CANCELLED) {\r\n          mainTask.status = DONE;\r\n        }\r\n\r\n        mainTask.cont(result.value);\r\n      }\r\n    } catch (error) {\r\n      if (mainTask.status === CANCELLED) {\r\n        throw error;\r\n      }\r\n\r\n      mainTask.status = ABORTED;\r\n      mainTask.cont(error, true);\r\n    }\r\n  }\r\n\r\n  function runEffect(effect, effectId, currCb) {\r\n    /**\r\n      each effect runner must attach its own logic of cancellation to the provided callback\r\n      it allows this generator to propagate cancellation downward.\r\n       ATTENTION! effect runners must setup the cancel logic by setting cb.cancel = [cancelMethod]\r\n      And the setup must occur before calling the callback\r\n       This is a sort of inversion of control: called async functions are responsible\r\n      of completing the flow by calling the provided continuation; while caller functions\r\n      are responsible for aborting the current flow by calling the attached cancel function\r\n       Library users can attach their own cancellation logic to promises by defining a\r\n      promise[CANCEL] method in their returned promises\r\n      ATTENTION! calling cancel must have no effect on an already completed or cancelled effect\r\n    **/\r\n    if (promise(effect)) {\r\n      resolvePromise(effect, currCb);\r\n    } else if (iterator(effect)) {\r\n      // resolve iterator\r\n      proc(env, effect, task.context, effectId, meta,\r\n      /* isRoot */\r\n      false, currCb);\r\n    } else if (effect && effect[IO]) {\r\n      var effectRunner = effectRunnerMap[effect.type];\r\n      effectRunner(env, effect.payload, currCb, executingContext);\r\n    } else {\r\n      // anything else returned as is\r\n      currCb(effect);\r\n    }\r\n  }\r\n\r\n  function digestEffect(effect, parentEffectId, cb, label) {\r\n    if (label === void 0) {\r\n      label = '';\r\n    }\r\n\r\n    var effectId = nextSagaId();\r\n    env.sagaMonitor && env.sagaMonitor.effectTriggered({\r\n      effectId: effectId,\r\n      parentEffectId: parentEffectId,\r\n      label: label,\r\n      effect: effect\r\n    });\r\n    /**\r\n      completion callback and cancel callback are mutually exclusive\r\n      We can't cancel an already completed effect\r\n      And We can't complete an already cancelled effectId\r\n    **/\r\n\r\n    var effectSettled; // Completion callback passed to the appropriate effect runner\r\n\r\n    function currCb(res, isErr) {\r\n      if (effectSettled) {\r\n        return;\r\n      }\r\n\r\n      effectSettled = true;\r\n      cb.cancel = noop; // defensive measure\r\n\r\n      if (env.sagaMonitor) {\r\n        if (isErr) {\r\n          env.sagaMonitor.effectRejected(effectId, res);\r\n        } else {\r\n          env.sagaMonitor.effectResolved(effectId, res);\r\n        }\r\n      }\r\n\r\n      if (isErr) {\r\n        setCrashedEffect(effect);\r\n      }\r\n\r\n      cb(res, isErr);\r\n    } // tracks down the current cancel\r\n\r\n\r\n    currCb.cancel = noop; // setup cancellation logic on the parent cb\r\n\r\n    cb.cancel = function () {\r\n      // prevents cancelling an already completed effect\r\n      if (effectSettled) {\r\n        return;\r\n      }\r\n\r\n      effectSettled = true;\r\n      currCb.cancel(); // propagates cancel downward\r\n\r\n      currCb.cancel = noop; // defensive measure\r\n\r\n      env.sagaMonitor && env.sagaMonitor.effectCancelled(effectId);\r\n    };\r\n\r\n    finalRunEffect(effect, effectId, currCb);\r\n  }\r\n}\r\n\r\nvar RUN_SAGA_SIGNATURE = 'runSaga(options, saga, ...args)';\r\nvar NON_GENERATOR_ERR = RUN_SAGA_SIGNATURE + \": saga argument must be a Generator function!\";\r\nfunction runSaga(_ref, saga) {\r\n  var _ref$channel = _ref.channel,\r\n      channel = _ref$channel === void 0 ? stdChannel() : _ref$channel,\r\n      dispatch = _ref.dispatch,\r\n      getState = _ref.getState,\r\n      _ref$context = _ref.context,\r\n      context = _ref$context === void 0 ? {} : _ref$context,\r\n      sagaMonitor = _ref.sagaMonitor,\r\n      effectMiddlewares = _ref.effectMiddlewares,\r\n      _ref$onError = _ref.onError,\r\n      onError = _ref$onError === void 0 ? logError : _ref$onError;\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(saga, func, NON_GENERATOR_ERR);\r\n  }\r\n\r\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\r\n    args[_key - 2] = arguments[_key];\r\n  }\r\n\r\n  var iterator$1 = saga.apply(void 0, args);\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(iterator$1, iterator, NON_GENERATOR_ERR);\r\n  }\r\n\r\n  var effectId = nextSagaId();\r\n\r\n  if (sagaMonitor) {\r\n    // monitors are expected to have a certain interface, let's fill-in any missing ones\r\n    sagaMonitor.rootSagaStarted = sagaMonitor.rootSagaStarted || noop;\r\n    sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || noop;\r\n    sagaMonitor.effectResolved = sagaMonitor.effectResolved || noop;\r\n    sagaMonitor.effectRejected = sagaMonitor.effectRejected || noop;\r\n    sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || noop;\r\n    sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || noop;\r\n    sagaMonitor.rootSagaStarted({\r\n      effectId: effectId,\r\n      saga: saga,\r\n      args: args\r\n    });\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (notUndef(dispatch)) {\r\n      check(dispatch, func, 'dispatch must be a function');\r\n    }\r\n\r\n    if (notUndef(getState)) {\r\n      check(getState, func, 'getState must be a function');\r\n    }\r\n\r\n    if (notUndef(effectMiddlewares)) {\r\n      var MIDDLEWARE_TYPE_ERROR = 'effectMiddlewares must be an array of functions';\r\n      check(effectMiddlewares, array$1, MIDDLEWARE_TYPE_ERROR);\r\n      effectMiddlewares.forEach(function (effectMiddleware) {\r\n        return check(effectMiddleware, func, MIDDLEWARE_TYPE_ERROR);\r\n      });\r\n    }\r\n\r\n    check(onError, func, 'onError passed to the redux-saga is not a function!');\r\n  }\r\n\r\n  var finalizeRunEffect;\r\n\r\n  if (effectMiddlewares) {\r\n    var middleware = compose.apply(void 0, effectMiddlewares);\r\n\r\n    finalizeRunEffect = function finalizeRunEffect(runEffect) {\r\n      return function (effect, effectId, currCb) {\r\n        var plainRunEffect = function plainRunEffect(eff) {\r\n          return runEffect(eff, effectId, currCb);\r\n        };\r\n\r\n        return middleware(plainRunEffect)(effect);\r\n      };\r\n    };\r\n  } else {\r\n    finalizeRunEffect = identity;\r\n  }\r\n\r\n  var env = {\r\n    channel: channel,\r\n    dispatch: wrapSagaDispatch(dispatch),\r\n    getState: getState,\r\n    sagaMonitor: sagaMonitor,\r\n    onError: onError,\r\n    finalizeRunEffect: finalizeRunEffect\r\n  };\r\n  return immediately(function () {\r\n    var task = proc(env, iterator$1, context, effectId, getMetaInfo(saga),\r\n    /* isRoot */\r\n    true, undefined);\r\n\r\n    if (sagaMonitor) {\r\n      sagaMonitor.effectResolved(effectId, task);\r\n    }\r\n\r\n    return task;\r\n  });\r\n}\r\n\r\nfunction sagaMiddlewareFactory(_temp) {\r\n  var _ref = _temp === void 0 ? {} : _temp,\r\n      _ref$context = _ref.context,\r\n      context = _ref$context === void 0 ? {} : _ref$context,\r\n      _ref$channel = _ref.channel,\r\n      channel = _ref$channel === void 0 ? stdChannel() : _ref$channel,\r\n      sagaMonitor = _ref.sagaMonitor,\r\n      options = _objectWithoutPropertiesLoose(_ref, [\"context\", \"channel\", \"sagaMonitor\"]);\r\n\r\n  var boundRunSaga;\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(channel, channel$1, 'options.channel passed to the Saga middleware is not a channel');\r\n  }\r\n\r\n  function sagaMiddleware(_ref2) {\r\n    var getState = _ref2.getState,\r\n        dispatch = _ref2.dispatch;\r\n    boundRunSaga = runSaga.bind(null, _extends({}, options, {\r\n      context: context,\r\n      channel: channel,\r\n      dispatch: dispatch,\r\n      getState: getState,\r\n      sagaMonitor: sagaMonitor\r\n    }));\r\n    return function (next) {\r\n      return function (action) {\r\n        if (sagaMonitor && sagaMonitor.actionDispatched) {\r\n          sagaMonitor.actionDispatched(action);\r\n        }\r\n\r\n        var result = next(action); // hit reducers\r\n\r\n        channel.put(action);\r\n        return result;\r\n      };\r\n    };\r\n  }\r\n\r\n  sagaMiddleware.run = function () {\r\n    if (process.env.NODE_ENV !== 'production' && !boundRunSaga) {\r\n      throw new Error('Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware');\r\n    }\r\n\r\n    return boundRunSaga.apply(void 0, arguments);\r\n  };\r\n\r\n  sagaMiddleware.setContext = function (props) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      check(props, object, createSetContextWarning('sagaMiddleware', props));\r\n    }\r\n\r\n    assignWithSymbols(context, props);\r\n  };\r\n\r\n  return sagaMiddleware;\r\n}\r\n\r\nexport default sagaMiddlewareFactory;\r\nexport { END, channel, eventChannel, isEnd, multicastChannel, runSaga, stdChannel };\r\n","import '@redux-saga/symbols';\r\nimport '@babel/runtime/helpers/esm/extends';\r\nimport { channel, stringableFunc, func, notUndef } from '@redux-saga/is';\r\nimport { q as makeIterator, K as take, L as fork, M as cancel, N as call, O as actionChannel, Q as sliding, U as delay, V as race, c as check } from './io-6de156f3.js';\r\nexport { O as actionChannel, _ as all, $ as apply, N as call, M as cancel, a4 as cancelled, a0 as cps, U as delay, W as effectTypes, a5 as flush, L as fork, a6 as getContext, a2 as join, Y as put, Z as putResolve, V as race, a3 as select, a7 as setContext, a1 as spawn, K as take, X as takeMaybe } from './io-6de156f3.js';\r\nimport '@redux-saga/delay-p';\r\n\r\nvar done = function done(value) {\r\n  return {\r\n    done: true,\r\n    value: value\r\n  };\r\n};\r\n\r\nvar qEnd = {};\r\nfunction safeName(patternOrChannel) {\r\n  if (channel(patternOrChannel)) {\r\n    return 'channel';\r\n  }\r\n\r\n  if (stringableFunc(patternOrChannel)) {\r\n    return String(patternOrChannel);\r\n  }\r\n\r\n  if (func(patternOrChannel)) {\r\n    return patternOrChannel.name;\r\n  }\r\n\r\n  return String(patternOrChannel);\r\n}\r\nfunction fsmIterator(fsm, startState, name) {\r\n  var stateUpdater,\r\n      errorState,\r\n      effect,\r\n      nextState = startState;\r\n\r\n  function next(arg, error) {\r\n    if (nextState === qEnd) {\r\n      return done(arg);\r\n    }\r\n\r\n    if (error && !errorState) {\r\n      nextState = qEnd;\r\n      throw error;\r\n    } else {\r\n      stateUpdater && stateUpdater(arg);\r\n      var currentState = error ? fsm[errorState](error) : fsm[nextState]();\r\n      nextState = currentState.nextState;\r\n      effect = currentState.effect;\r\n      stateUpdater = currentState.stateUpdater;\r\n      errorState = currentState.errorState;\r\n      return nextState === qEnd ? done(arg) : effect;\r\n    }\r\n  }\r\n\r\n  return makeIterator(next, function (error) {\r\n    return next(null, error);\r\n  }, name);\r\n}\r\n\r\nfunction takeEvery(patternOrChannel, worker) {\r\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\r\n    args[_key - 2] = arguments[_key];\r\n  }\r\n\r\n  var yTake = {\r\n    done: false,\r\n    value: take(patternOrChannel)\r\n  };\r\n\r\n  var yFork = function yFork(ac) {\r\n    return {\r\n      done: false,\r\n      value: fork.apply(void 0, [worker].concat(args, [ac]))\r\n    };\r\n  };\r\n\r\n  var action,\r\n      setAction = function setAction(ac) {\r\n    return action = ac;\r\n  };\r\n\r\n  return fsmIterator({\r\n    q1: function q1() {\r\n      return {\r\n        nextState: 'q2',\r\n        effect: yTake,\r\n        stateUpdater: setAction\r\n      };\r\n    },\r\n    q2: function q2() {\r\n      return {\r\n        nextState: 'q1',\r\n        effect: yFork(action)\r\n      };\r\n    }\r\n  }, 'q1', \"takeEvery(\" + safeName(patternOrChannel) + \", \" + worker.name + \")\");\r\n}\r\n\r\nfunction takeLatest(patternOrChannel, worker) {\r\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\r\n    args[_key - 2] = arguments[_key];\r\n  }\r\n\r\n  var yTake = {\r\n    done: false,\r\n    value: take(patternOrChannel)\r\n  };\r\n\r\n  var yFork = function yFork(ac) {\r\n    return {\r\n      done: false,\r\n      value: fork.apply(void 0, [worker].concat(args, [ac]))\r\n    };\r\n  };\r\n\r\n  var yCancel = function yCancel(task) {\r\n    return {\r\n      done: false,\r\n      value: cancel(task)\r\n    };\r\n  };\r\n\r\n  var task, action;\r\n\r\n  var setTask = function setTask(t) {\r\n    return task = t;\r\n  };\r\n\r\n  var setAction = function setAction(ac) {\r\n    return action = ac;\r\n  };\r\n\r\n  return fsmIterator({\r\n    q1: function q1() {\r\n      return {\r\n        nextState: 'q2',\r\n        effect: yTake,\r\n        stateUpdater: setAction\r\n      };\r\n    },\r\n    q2: function q2() {\r\n      return task ? {\r\n        nextState: 'q3',\r\n        effect: yCancel(task)\r\n      } : {\r\n        nextState: 'q1',\r\n        effect: yFork(action),\r\n        stateUpdater: setTask\r\n      };\r\n    },\r\n    q3: function q3() {\r\n      return {\r\n        nextState: 'q1',\r\n        effect: yFork(action),\r\n        stateUpdater: setTask\r\n      };\r\n    }\r\n  }, 'q1', \"takeLatest(\" + safeName(patternOrChannel) + \", \" + worker.name + \")\");\r\n}\r\n\r\nfunction takeLeading(patternOrChannel, worker) {\r\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\r\n    args[_key - 2] = arguments[_key];\r\n  }\r\n\r\n  var yTake = {\r\n    done: false,\r\n    value: take(patternOrChannel)\r\n  };\r\n\r\n  var yCall = function yCall(ac) {\r\n    return {\r\n      done: false,\r\n      value: call.apply(void 0, [worker].concat(args, [ac]))\r\n    };\r\n  };\r\n\r\n  var action;\r\n\r\n  var setAction = function setAction(ac) {\r\n    return action = ac;\r\n  };\r\n\r\n  return fsmIterator({\r\n    q1: function q1() {\r\n      return {\r\n        nextState: 'q2',\r\n        effect: yTake,\r\n        stateUpdater: setAction\r\n      };\r\n    },\r\n    q2: function q2() {\r\n      return {\r\n        nextState: 'q1',\r\n        effect: yCall(action)\r\n      };\r\n    }\r\n  }, 'q1', \"takeLeading(\" + safeName(patternOrChannel) + \", \" + worker.name + \")\");\r\n}\r\n\r\nfunction throttle(delayLength, pattern, worker) {\r\n  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\r\n    args[_key - 3] = arguments[_key];\r\n  }\r\n\r\n  var action, channel;\r\n  var yActionChannel = {\r\n    done: false,\r\n    value: actionChannel(pattern, sliding(1))\r\n  };\r\n\r\n  var yTake = function yTake() {\r\n    return {\r\n      done: false,\r\n      value: take(channel)\r\n    };\r\n  };\r\n\r\n  var yFork = function yFork(ac) {\r\n    return {\r\n      done: false,\r\n      value: fork.apply(void 0, [worker].concat(args, [ac]))\r\n    };\r\n  };\r\n\r\n  var yDelay = {\r\n    done: false,\r\n    value: delay(delayLength)\r\n  };\r\n\r\n  var setAction = function setAction(ac) {\r\n    return action = ac;\r\n  };\r\n\r\n  var setChannel = function setChannel(ch) {\r\n    return channel = ch;\r\n  };\r\n\r\n  return fsmIterator({\r\n    q1: function q1() {\r\n      return {\r\n        nextState: 'q2',\r\n        effect: yActionChannel,\r\n        stateUpdater: setChannel\r\n      };\r\n    },\r\n    q2: function q2() {\r\n      return {\r\n        nextState: 'q3',\r\n        effect: yTake(),\r\n        stateUpdater: setAction\r\n      };\r\n    },\r\n    q3: function q3() {\r\n      return {\r\n        nextState: 'q4',\r\n        effect: yFork(action)\r\n      };\r\n    },\r\n    q4: function q4() {\r\n      return {\r\n        nextState: 'q2',\r\n        effect: yDelay\r\n      };\r\n    }\r\n  }, 'q1', \"throttle(\" + safeName(pattern) + \", \" + worker.name + \")\");\r\n}\r\n\r\nfunction retry(maxTries, delayLength, fn) {\r\n  var counter = maxTries;\r\n\r\n  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\r\n    args[_key - 3] = arguments[_key];\r\n  }\r\n\r\n  var yCall = {\r\n    done: false,\r\n    value: call.apply(void 0, [fn].concat(args))\r\n  };\r\n  var yDelay = {\r\n    done: false,\r\n    value: delay(delayLength)\r\n  };\r\n  return fsmIterator({\r\n    q1: function q1() {\r\n      return {\r\n        nextState: 'q2',\r\n        effect: yCall,\r\n        errorState: 'q10'\r\n      };\r\n    },\r\n    q2: function q2() {\r\n      return {\r\n        nextState: qEnd\r\n      };\r\n    },\r\n    q10: function q10(error) {\r\n      counter -= 1;\r\n\r\n      if (counter <= 0) {\r\n        throw error;\r\n      }\r\n\r\n      return {\r\n        nextState: 'q1',\r\n        effect: yDelay\r\n      };\r\n    }\r\n  }, 'q1', \"retry(\" + fn.name + \")\");\r\n}\r\n\r\nfunction debounceHelper(delayLength, patternOrChannel, worker) {\r\n  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\r\n    args[_key - 3] = arguments[_key];\r\n  }\r\n\r\n  var action, raceOutput;\r\n  var yTake = {\r\n    done: false,\r\n    value: take(patternOrChannel)\r\n  };\r\n  var yRace = {\r\n    done: false,\r\n    value: race({\r\n      action: take(patternOrChannel),\r\n      debounce: delay(delayLength)\r\n    })\r\n  };\r\n\r\n  var yFork = function yFork(ac) {\r\n    return {\r\n      done: false,\r\n      value: fork.apply(void 0, [worker].concat(args, [ac]))\r\n    };\r\n  };\r\n\r\n  var yNoop = function yNoop(value) {\r\n    return {\r\n      done: false,\r\n      value: value\r\n    };\r\n  };\r\n\r\n  var setAction = function setAction(ac) {\r\n    return action = ac;\r\n  };\r\n\r\n  var setRaceOutput = function setRaceOutput(ro) {\r\n    return raceOutput = ro;\r\n  };\r\n\r\n  return fsmIterator({\r\n    q1: function q1() {\r\n      return {\r\n        nextState: 'q2',\r\n        effect: yTake,\r\n        stateUpdater: setAction\r\n      };\r\n    },\r\n    q2: function q2() {\r\n      return {\r\n        nextState: 'q3',\r\n        effect: yRace,\r\n        stateUpdater: setRaceOutput\r\n      };\r\n    },\r\n    q3: function q3() {\r\n      return raceOutput.debounce ? {\r\n        nextState: 'q1',\r\n        effect: yFork(action)\r\n      } : {\r\n        nextState: 'q2',\r\n        effect: yNoop(raceOutput.action),\r\n        stateUpdater: setAction\r\n      };\r\n    }\r\n  }, 'q1', \"debounce(\" + safeName(patternOrChannel) + \", \" + worker.name + \")\");\r\n}\r\n\r\nvar validateTakeEffect = function validateTakeEffect(fn, patternOrChannel, worker) {\r\n  check(patternOrChannel, notUndef, fn.name + \" requires a pattern or channel\");\r\n  check(worker, notUndef, fn.name + \" requires a saga parameter\");\r\n};\r\n\r\nfunction takeEvery$1(patternOrChannel, worker) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    validateTakeEffect(takeEvery$1, patternOrChannel, worker);\r\n  }\r\n\r\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\r\n    args[_key - 2] = arguments[_key];\r\n  }\r\n\r\n  return fork.apply(void 0, [takeEvery, patternOrChannel, worker].concat(args));\r\n}\r\nfunction takeLatest$1(patternOrChannel, worker) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    validateTakeEffect(takeLatest$1, patternOrChannel, worker);\r\n  }\r\n\r\n  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\r\n    args[_key2 - 2] = arguments[_key2];\r\n  }\r\n\r\n  return fork.apply(void 0, [takeLatest, patternOrChannel, worker].concat(args));\r\n}\r\nfunction takeLeading$1(patternOrChannel, worker) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    validateTakeEffect(takeLeading$1, patternOrChannel, worker);\r\n  }\r\n\r\n  for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\r\n    args[_key3 - 2] = arguments[_key3];\r\n  }\r\n\r\n  return fork.apply(void 0, [takeLeading, patternOrChannel, worker].concat(args));\r\n}\r\nfunction throttle$1(ms, pattern, worker) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    check(pattern, notUndef, 'throttle requires a pattern');\r\n    check(worker, notUndef, 'throttle requires a saga parameter');\r\n  }\r\n\r\n  for (var _len4 = arguments.length, args = new Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {\r\n    args[_key4 - 3] = arguments[_key4];\r\n  }\r\n\r\n  return fork.apply(void 0, [throttle, ms, pattern, worker].concat(args));\r\n}\r\nfunction retry$1(maxTries, delayLength, worker) {\r\n  for (var _len5 = arguments.length, args = new Array(_len5 > 3 ? _len5 - 3 : 0), _key5 = 3; _key5 < _len5; _key5++) {\r\n    args[_key5 - 3] = arguments[_key5];\r\n  }\r\n\r\n  return call.apply(void 0, [retry, maxTries, delayLength, worker].concat(args));\r\n}\r\nfunction debounce(delayLength, pattern, worker) {\r\n  for (var _len6 = arguments.length, args = new Array(_len6 > 3 ? _len6 - 3 : 0), _key6 = 3; _key6 < _len6; _key6++) {\r\n    args[_key6 - 3] = arguments[_key6];\r\n  }\r\n\r\n  return fork.apply(void 0, [debounceHelper, delayLength, pattern, worker].concat(args));\r\n}\r\n\r\nexport { debounce, retry$1 as retry, takeEvery$1 as takeEvery, takeLatest$1 as takeLatest, takeLeading$1 as takeLeading, throttle$1 as throttle };\r\n","function deferred() {\r\n  var def = {};\r\n  def.promise = new Promise(function (resolve, reject) {\r\n    def.resolve = resolve;\r\n    def.reject = reject;\r\n  });\r\n  return def;\r\n}\r\nfunction arrayOfDeferred(length) {\r\n  var arr = [];\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    arr.push(deferred());\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nexport default deferred;\r\nexport { arrayOfDeferred };\r\n","import { CANCEL } from '@redux-saga/symbols';\r\n\r\nfunction delayP(ms, val) {\r\n  if (val === void 0) {\r\n    val = true;\r\n  }\r\n\r\n  var timeoutId;\r\n  var promise = new Promise(function (resolve) {\r\n    timeoutId = setTimeout(resolve, ms, val);\r\n  });\r\n\r\n  promise[CANCEL] = function () {\r\n    clearTimeout(timeoutId);\r\n  };\r\n\r\n  return promise;\r\n}\r\n\r\nexport default delayP;\r\n","import { TASK, SAGA_ACTION, MULTICAST, IO } from '@redux-saga/symbols';\r\n\r\nvar undef = function undef(v) {\r\n  return v === null || v === undefined;\r\n};\r\nvar notUndef = function notUndef(v) {\r\n  return v !== null && v !== undefined;\r\n};\r\nvar func = function func(f) {\r\n  return typeof f === 'function';\r\n};\r\nvar number = function number(n) {\r\n  return typeof n === 'number';\r\n};\r\nvar string = function string(s) {\r\n  return typeof s === 'string';\r\n};\r\nvar array = Array.isArray;\r\nvar object = function object(obj) {\r\n  return obj && !array(obj) && typeof obj === 'object';\r\n};\r\nvar promise = function promise(p) {\r\n  return p && func(p.then);\r\n};\r\nvar iterator = function iterator(it) {\r\n  return it && func(it.next) && func(it.throw);\r\n};\r\nvar iterable = function iterable(it) {\r\n  return it && func(Symbol) ? func(it[Symbol.iterator]) : array(it);\r\n};\r\nvar task = function task(t) {\r\n  return t && t[TASK];\r\n};\r\nvar sagaAction = function sagaAction(a) {\r\n  return Boolean(a && a[SAGA_ACTION]);\r\n};\r\nvar observable = function observable(ob) {\r\n  return ob && func(ob.subscribe);\r\n};\r\nvar buffer = function buffer(buf) {\r\n  return buf && func(buf.isEmpty) && func(buf.take) && func(buf.put);\r\n};\r\nvar pattern = function pattern(pat) {\r\n  return pat && (string(pat) || symbol(pat) || func(pat) || array(pat) && pat.every(pattern));\r\n};\r\nvar channel = function channel(ch) {\r\n  return ch && func(ch.take) && func(ch.close);\r\n};\r\nvar stringableFunc = function stringableFunc(f) {\r\n  return func(f) && f.hasOwnProperty('toString');\r\n};\r\nvar symbol = function symbol(sym) {\r\n  return Boolean(sym) && typeof Symbol === 'function' && sym.constructor === Symbol && sym !== Symbol.prototype;\r\n};\r\nvar multicast = function multicast(ch) {\r\n  return channel(ch) && ch[MULTICAST];\r\n};\r\nvar effect = function effect(eff) {\r\n  return eff && eff[IO];\r\n};\r\n\r\nexport { array, buffer, channel, effect, func, iterable, iterator, multicast, notUndef, number, object, observable, pattern, promise, sagaAction, string, stringableFunc, symbol, task, undef };\r\n","var createSymbol = function createSymbol(name) {\r\n  return \"@@redux-saga/\" + name;\r\n};\r\n\r\nvar CANCEL =\r\n/*#__PURE__*/\r\ncreateSymbol('CANCEL_PROMISE');\r\nvar CHANNEL_END_TYPE =\r\n/*#__PURE__*/\r\ncreateSymbol('CHANNEL_END');\r\nvar IO =\r\n/*#__PURE__*/\r\ncreateSymbol('IO');\r\nvar MATCH =\r\n/*#__PURE__*/\r\ncreateSymbol('MATCH');\r\nvar MULTICAST =\r\n/*#__PURE__*/\r\ncreateSymbol('MULTICAST');\r\nvar SAGA_ACTION =\r\n/*#__PURE__*/\r\ncreateSymbol('SAGA_ACTION');\r\nvar SELF_CANCELLATION =\r\n/*#__PURE__*/\r\ncreateSymbol('SELF_CANCELLATION');\r\nvar TASK =\r\n/*#__PURE__*/\r\ncreateSymbol('TASK');\r\nvar TASK_CANCEL =\r\n/*#__PURE__*/\r\ncreateSymbol('TASK_CANCEL');\r\nvar TERMINATE =\r\n/*#__PURE__*/\r\ncreateSymbol('TERMINATE');\r\nvar SAGA_LOCATION =\r\n/*#__PURE__*/\r\ncreateSymbol('LOCATION');\r\n\r\nexport { CANCEL, CHANNEL_END_TYPE, IO, MATCH, MULTICAST, SAGA_ACTION, SAGA_LOCATION, SELF_CANCELLATION, TASK, TASK_CANCEL, TERMINATE };\r\n","import createSagaMiddleware__default from '@redux-saga/core';\r\nexport * from '@redux-saga/core';\r\n\r\n\r\n\r\nexport default createSagaMiddleware__default;\r\n","export * from '@redux-saga/core/effects';\r\n","//next에서 제공하는 최상위 컴포넌트 파일 (_app.js로 직접 만들어야 한다. )\r\n//페이지들의 공통적인 부분기여주기 \r\n\r\nimport AppLayout from '../components/AppLayout'; \r\nimport Head from 'next/head'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// 모든 컴포넌트는 _app.js를 공유한다. \r\n// redux는 state의 중앙통제실 역할을 하므로 모든 컴포넌트의 state를 컨트롤 하기 위해\r\n// _app.js에다가 redux를 연결해 주는 작업이 필요하다. \r\n\r\n//--react, redux 연결하기 \r\nimport {Provider} from 'react-redux'; //redux state 제공, 이것으로 전체 컴포넌트의 state를 관리 할 수 있다. \r\nimport reducer from '../reducers'; \r\nimport {createStore, compose, applyMiddleware} from 'redux'\r\nimport withRedux from 'next-redux-wrapper'\r\n\r\n\r\n//리덕스 사가 \r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\n\r\nconst NodeBird = ({Component,store}) =>{\r\n                    //▲ next에서 제공하는 props\r\n\r\n        return (\r\n        <Provider store={store}> {/*이 store가 redux state이다. 이 store가 전체 컴포넌트 state를 다 받는다. */}\r\n            <div>\r\n            <Head>\r\n                <title>NodeBird</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.min.css\"/>\r\n            </Head>\r\n            <AppLayout >\r\n                <Component />\r\n            </AppLayout>  \r\n            </div>\r\n        </Provider>\r\n\r\n        )\r\n\r\n}\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType,\r\n    store    : PropTypes.object, \r\n}\r\n\r\n//하이오더 컴포넌트 \r\n/*\r\nhello(Component); \r\nconst hello = (Component) => ()=>{\r\n    return (\r\n        <Component good=\"i'm a good person\"/>\r\n    )\r\n}\r\n*/\r\n\r\n//제로초가 그냥 외우라고함... \r\nexport default withRedux((initialState,options)=>{\r\n\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middleWares = [sagaMiddleware];\r\n                     \r\n                      \r\n    const enhancer =  process.env.NODE_ENV ==='production' \r\n                                ? compose(\r\n                               \r\n                                applyMiddleware(...middleWares),\r\n                    \r\n                                )\r\n                                : compose(\r\n                               \r\n                                    applyMiddleware(...middleWares),\r\n                                    !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION !== 'undefined'? window.__REDUX_DEVTOOLS_EXTENSION__() : (f)=>f,\r\n                                    //브라우저에 REDUX DEVTOOLS 설치시 \r\n                                    //window객체애 해당 변수(__REDUX_DEVTOOLS_EXTENSION)가 생성됨, __REDUX_DEVTOOLS_EXTENSION__()해당 함수를 사용할 수 있게됨\r\n    \r\n                                    )\r\n    const store = createStore(reducer,initialState,enhancer); \r\n    sagaMiddleware.run(rootSaga);\r\n    return store; \r\n})(NodeBird); ","//user의 store \r\n\r\n//초기 state\r\nconst dummyUser = {\r\n    nickname:'정준일', \r\n    Post:['정','준'],\r\n    Followings:['정','준'],\r\n    Followers:['정','준'],\r\n    signUpData:{},\r\n    \r\n}\r\nexport const initialState = {\r\n\r\n    isLoggedIn : false, \r\n    user: null, \r\n};\r\n\r\nexport const SIGN_UP='SIGN_UP'; \r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS'; \r\n \r\nexport const LOG_IN = 'LOG_IN'; \r\nexport const LOG_IN_SUCCESS = 'LOGIN_SUCCESS'; \r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; \r\n\r\nexport const LOG_OUT = 'LOG_OUT'; \r\n\r\n\r\n//실제 액션 \r\nexport const signUpAction = (data) =>{\r\n//action에 넣을 데이터가 동적인 경우 action을 함수로 만들어야 한다. \r\n    return {\r\n        type:SIGN_UP,\r\n        data:data,\r\n    };\r\n\r\n}\r\nexport const loginAction = {\r\n    type:LOG_IN,\r\n    data:{\r\n        nickname:'주닐정', \r\n    }, \r\n}\r\n\r\nexport const logOutAction = {\r\n    type:LOG_OUT,\r\n}\r\n\r\nconst reducer = (state = initialState , action)=>{\r\n\r\n    switch(action.type){\r\n        \r\n        case LOG_IN:{\r\n            return {\r\n                ...state,\r\n                isLoggedIn:true,\r\n                user:dummyUser,\r\n            };\r\n        }\r\n        case LOG_OUT:{\r\n            return {\r\n                ...state,\r\n                isLoggedIn:false,\r\n                user:null,\r\n            }\r\n        }\r\n        case SIGN_UP:{\r\n            return{\r\n                ...state,\r\n                signUpData:action.data,\r\n            }\r\n        }\r\n\r\n\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default reducer; ","import {all, call}from 'redux-saga/effects'; \r\nimport user from './user'\r\nimport post from './post'\r\n\r\nexport default function* rootSaga(){\r\n    yield all([\r\n        call(user),\r\n        call(post),\r\n    ]);\r\n}","import {all} from 'redux-saga/effects'; \r\n\r\nexport default function* postSaga() {\r\n\r\n yield all([]); \r\n\r\n}","import {all ,fork, takeLatest, call, put }from 'redux-saga/effects'; \r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\n//call : 함수 동기적 호출 \r\n//fort : 함수 비동기적 호출 \r\n//put  : 액션 , dispatch\r\n\r\nfunction* loginAPI(){\r\n//서버에 요청하는 부분 \r\n\r\n}\r\n\r\nfunction* login(){\r\n\r\n    try{\r\n        \r\n        yield call(loginAPI); \r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN,login); \r\n          //takeLatest가 LOG_IN 액션이 dispatch되길 기다려서 \r\n          // dispatch될 때 login 제너레이터를 호출한다. \r\n\r\n}\r\n\r\nexport default function* userSaga() {\r\n\r\n yield all([\r\n     fork(watchLogin),\r\n ]); \r\n\r\n}"],"mappingszqbA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAKA;;;;;;;;AASA;AACA;AAAA;AAEA;AACA;AAGA;AASA;AAAA;AAEA;AALA;AAQA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AADA;AAFA;AAOA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAEA;AAAA;AACA;AAGA;AA5BA;AAiCA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AALA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAHA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACKA;AAKA;AAkBA;AAOA;AACA;AAtCA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AALA;AAAA;AAKA;AACA;AADA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AAVA;AAWA;AACA;AADA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}