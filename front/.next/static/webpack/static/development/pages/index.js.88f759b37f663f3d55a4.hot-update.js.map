{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.88f759b37f663f3d55a4.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["\r\nimport React, {useEffect, useCallback} from 'react'; \r\nimport PostForm from '../components/PostForm'\r\nimport PostCard from '../components/PostCard'\r\nimport {useDispatch ,useSelector} from 'react-redux'\r\nimport { LOG_IN_REQUEST, loginAction, LOG_IN_SUCCESS } from '../reducers/user';\r\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\r\n\r\n\r\n\r\n\r\nconst Home = ()=>{\r\n\r\n    const dispatch = useDispatch(); \r\n                                //dispatch() 는 useState 의 setState라고 생각하면 편하다.\r\n\r\n    const {me} = useSelector(state => state.user);\r\n                                //리덕스 STATE를 가져오기 위해서는 userSelector \r\n    const {mainPosts,hasMorePost} =useSelector(state => state.post); \r\n\r\n\r\n    const onScroll = useCallback(() =>{\r\n            //window.scrollY + document.documentElement.clientHeight = document.documentElement.scrollHeight\r\n        console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight); \r\n\r\n        if(hasMorePost){//스크롤 할 때 마다 서버로 요청보내면 서버 뒤질 수 도 있음 방지\r\n                        //reducer 잘 보면 이해가 가능할 것이다. \r\n            if(window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight-300){\r\n                dispatch({\r\n                    type:LOAD_MAIN_POSTS_REQUEST,\r\n                    lastId : mainPosts[mainPosts.length - 1].id,\r\n                }); \r\n            }\r\n        }         \r\n    },[hasMorePost , mainPosts.length]); \r\n  \r\n    useEffect(()=>{\r\n            window.addEventListener('scroll',onScroll); \r\n\r\n            return ()=>{\r\n                window.removeEventListener('scroll',onScroll);\r\n            }\r\n    },[mainPosts.length])\r\n\r\n    return (\r\n      \r\n            <div>\r\n            \r\n            {me ? <div>로그인됨</div> : <div>로그인 안됨</div>}\r\n                {me && <PostForm userInfo={me} />}\r\n                \r\n                {mainPosts.map((v,i)=>{\r\n                    return (\r\n                            <PostCard key={v.id} post={v} />\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\nHome.getInitialProps = async (context) =>{\r\n    console.log(Object.keys(context)); \r\n    context.store.dispatch({\r\n\r\n            type:LOAD_MAIN_POSTS_REQUEST, \r\n\r\n    });\r\n\r\n};\r\n\r\nexport default Home;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAHA;AAKA;AAAA;AALA;AACA;AACA;AAFA;AAOA;AAAA;AAPA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AAGA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAFA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;;;;A","sourceRoot":""}