{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.71552ff25129189f55c3.hot-update.js","sources":["webpack:///./sagas/post.js"],"sourcesContent":["import {all,fork,takeLatest, put, delay,call,throttle} from 'redux-saga/effects'; \r\nimport axios from 'axios'; //한번 불러온 모듈을 캐싱이 되므로 user.js에서 \r\n                           //axios.defaults.baseURL='http://captainryan.gonetis.com:3065/api'; 해 놓은게 post.js에서도 적용이 된다. \r\n\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user'\r\n\r\n\r\nfunction addPostAPI(postData){\r\n    return axios.post('/post',postData,{withCredentials:true}); \r\n}\r\n\r\nfunction loadMainPostsAPI(lastId = 0 , limit = 3){\r\n\r\n    return axios.get(`/posts?lastId=${lastId}&limit=${limit}`); \r\n}\r\n\r\n\r\nfunction* loadMainPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadMainPostsAPI,action.lastId);       \r\n            yield put({\r\n                type:LOAD_MAIN_POSTS_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadHashtagPostsAPI(tag,lastId,limit = 3){\r\n\r\n    return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=${limit}`); \r\n}\r\n\r\n\r\nfunction* loadHashtagPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadHashtagPostsAPI,action.data,action.lastId);     \r\n           yield put({\r\n               type:LOAD_HASHTAG_POSTS_SUCCESS,\r\n               data: result.data,\r\n           })  \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction loadUserPostsAPI(id){\r\n\r\n    return axios.get(`/user/${id || 0}/posts`); \r\n}\r\n\r\n\r\nfunction* loadUserPosts(action){\r\n\r\n    try{\r\n           const result = yield call(loadUserPostsAPI,action.data);    \r\n           yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })  \r\n          \r\n          \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction* addPost(action){\r\n\r\n    try{\r\n            const result = yield call(addPostAPI,action.data);\r\n \r\n            yield put({\r\n                type:ADD_POST_SUCCESS,\r\n                data:result.data,\r\n\r\n            });\r\n\r\n\r\n            yield put({\r\n                type: ADD_POST_TO_ME,\r\n                data : result.data.id,\r\n            });\r\n\r\n    }catch(e){\r\n        console.error('ADD_POST_FAILURE==>' ,e); \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n\r\n  function* addComment(action) {\r\n    try {\r\n      const result = yield call(addCommentAPI, action.data);\r\n      yield put({\r\n        type: ADD_COMMENT_SUCCESS,\r\n        data: {\r\n          postId: action.data.postId,\r\n          comment: result.data,\r\n        },\r\n      });\r\n    } catch (e) {\r\n      \r\n      console.error(e);\r\n      yield put({\r\n        type: ADD_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\nfunction loadCommentstAPI(postId){\r\n\r\n    return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action){\r\n\r\n    try{\r\n        const result = yield call(loadCommentstAPI,action.data);\r\n        yield put({\r\n            type:LOAD_COMMENTS_SUCCESS,\r\n            data:{\r\n                postId:action.data,\r\n                comments:result.data,\r\n            },\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:LOAD_COMMENTS_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction upLoadImagesAPI(formData){\r\n    return axios.post('/post/images',formData,{withCredentials:true}); \r\n}\r\n\r\nfunction* upLoadImages(action){\r\n\r\n    try{\r\n        const result = yield call(upLoadImagesAPI,action.data);\r\n        yield put({\r\n            type:UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,  //이미지가 저장된 주소를 가져온다. \r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:UPLOAD_IMAGES_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\nfunction likePostAPI(postId){\r\n    return axios.post(`/post/${postId}/like`,{},{withCredentials:true}); \r\n}\r\n\r\nfunction* likePost(action){\r\n        console.log('post saga likePost==>' , action); \r\n    try{\r\n        const result = yield call(likePostAPI,action.data);\r\n        yield put({\r\n            type:LIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            }\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:LIKE_POST_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction unLikePostAPI(postId){\r\n    return axios.delete(`/post/${postId}/like`,{withCredentials:true}); \r\n}\r\n\r\nfunction* unLikePost(action){\r\n    try{\r\n        const result = yield call(unLikePostAPI,action.data);\r\n        yield put({\r\n            type:UNLIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            }\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n    yield put({\r\n        type:UNLIKE_POST_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction reTweetAPI(postId){\r\n    return axios.post(`/post/${postId}/retweet`,{},{withCredentials:true}); \r\n}\r\n\r\nfunction* reTweet(action){\r\n    try{\r\n        const result = yield call(reTweetAPI,action.data);\r\n        yield put({\r\n            type:RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n\r\n}catch(e){\r\n    console.log(e); \r\n   alert(e); \r\n    yield put({\r\n        type:RETWEET_FAILURE,\r\n        error: e,\r\n    })\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction removePostAPI(postId){\r\n    return axios.delete( `/post/${postId}`,{withCredentials:true}); \r\n}\r\n\r\nfunction* removePost(action){\r\n    try{\r\n        const result = yield call(removePostAPI,action.data);\r\n        // const deleteinfo  =yield result.then((resolve)=>{\r\n        //             return resolve.data; \r\n        // }); \r\n\r\n         console.log('removePost' , result.data); \r\n        yield put({\r\n            type:REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n\r\n        yield put({\r\n            type:REMOVE_POST_OF_ME,\r\n            data : result.data,\r\n        })\r\n\r\n}catch(e){\r\n    console.log(e); \r\n   alert(e); \r\n    yield put({\r\n        type:REMOVE_POST_FAILURE,\r\n        error: e,\r\n    });\r\n  \r\n}\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchRemovePost(){\r\n\r\n    yield takeLatest(REMOVE_POST_REQUEST,removePost); \r\n}\r\n\r\n\r\nfunction* whatchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost); \r\n\r\n}\r\n\r\nfunction* watchLoadMainPosts(){\r\n    yield throttle(LOAD_MAIN_POSTS_REQUEST,loadMainPosts); \r\n}\r\n\r\n\r\nfunction* whatchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); \r\n    \r\n}\r\n\r\nfunction* watchLoadHashtagPosts(){\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts); \r\n}\r\n\r\nfunction* watchLoadUserPosts(){\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST,loadUserPosts); \r\n}\r\n\r\nfunction* watchLoadComments(){\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST,loadComments);\r\n}\r\n\r\nfunction* watchUploadImages(){\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST,upLoadImages);\r\n}\r\n\r\nfunction* watchLikePost(){\r\n    yield takeLatest(LIKE_POST_REQUEST,likePost);\r\n\r\n}\r\n\r\nfunction* watchUnLikePost(){\r\n        yield takeLatest(UNLIKE_POST_REQUEST,unLikePost)\r\n}\r\n\r\nfunction* watchRetweet(){\r\n    yield takeLatest(RETWEET_REQUEST,reTweet); \r\n}\r\n\r\nexport default function* postSaga() {\r\n\r\n yield all([\r\n     fork(watchLoadMainPosts),\r\n     fork(whatchAddPost), \r\n     fork(whatchAddComment), \r\n     fork(watchLoadComments),\r\n     fork(watchLoadHashtagPosts),\r\n     fork(watchLoadUserPosts),\r\n     fork(watchUploadImages),\r\n     fork(watchLikePost),\r\n     fork(watchUnLikePost),\r\n     fork(watchRetweet),\r\n     fork(watchRemovePost),\r\n ]); \r\n\r\n}"],"mappings":"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","sourceRoot":""}